module House_heating__temperature
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type temperature = <range 17 19>
  
  val function first : int
    ensures { result = (17 : int) }
  
  val function last : int
    ensures { result = (19 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = temperature,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type temperature__ref = { mutable temperature__content : temperature }
  
  function temperature__ref_temperature__content__projection (a: temperature__ref) : temperature =
    a.temperature__content
  
  meta "model_projection" function temperature__ref_temperature__content__projection
  
  meta "inline:no" function temperature__ref_temperature__content__projection
  
  val temperature__havoc (x: temperature__ref) : unit
    writes { x }
end

module House_heating__temperature__rep
  use House_heating__temperature as House_heating__temperature
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: House_heating__temperature.temperature) : int =
    House_heating__temperature.temperature'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_heating__temperature.temperature,
    predicate in_range = House_heating__temperature.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_heating__heatingstatus
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type heatingstatus
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = heatingstatus,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type heatingstatus__ref = {
                           mutable heatingstatus__content : heatingstatus
                           }
  
  function heatingstatus__ref_heatingstatus__content__projection (a: heatingstatus__ref) : heatingstatus =
    a.heatingstatus__content
  
  meta "model_projection" function heatingstatus__ref_heatingstatus__content__projection
  
  meta "inline:no" function heatingstatus__ref_heatingstatus__content__projection
  
  val heatingstatus__havoc (x: heatingstatus__ref) : unit
    writes { x }
end

module House_heating__heatingstatus__rep
  use House_heating__heatingstatus as House_heating__heatingstatus
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_heating__heatingstatus.heatingstatus,
    predicate in_range = House_heating__heatingstatus.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_heating__househeating__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use House_heating__temperature as House_heating__temperature
  use House_heating__temperature__rep as House_heating__temperature__rep
  use House_heating__heatingstatus as House_heating__heatingstatus
  use House_heating__heatingstatus__rep as House_heating__heatingstatus__rep
  
  type __split_fields = {
                       rec__house_heating__househeating__temp :
                         House_heating__temperature.temperature;
                       rec__house_heating__househeating__status :
                         House_heating__heatingstatus.heatingstatus;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__house_heating__househeating__temp__projection (a: __split_fields) : 
    House_heating__temperature.temperature =
    a.rec__house_heating__househeating__temp
  
  meta "model_projection" function __split_fields_rec__house_heating__househeating__temp__projection
  
  meta "inline:no" function __split_fields_rec__house_heating__househeating__temp__projection
  
  function __split_fields_rec__house_heating__househeating__status__projection (a: __split_fields) : 
    House_heating__heatingstatus.heatingstatus =
    a.rec__house_heating__househeating__status
  
  meta "model_projection" function __split_fields_rec__house_heating__househeating__status__projection
  
  meta "inline:no" function __split_fields_rec__house_heating__househeating__status__projection
  
  function __split_fields_rec__ext____projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____projection
  
  meta "inline:no" function __split_fields_rec__ext____projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function __rep_attr__tag__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__projection
  
  meta "inline:no" function __rep_attr__tag__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate house_heating__househeating__temp__pred (a: __rep) = true
  
  val house_heating__househeating__temp__pred (a: __rep) : bool
    ensures { result
                <->
                (house_heating__househeating__temp__pred (a : __rep)) }
  
  val rec__house_heating__househeating__temp_ (a: __rep) : House_heating__temperature.temperature
    requires { house_heating__househeating__temp__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_heating__househeating__temp)) }
  
  predicate house_heating__househeating__status__pred (a: __rep) = true
  
  val house_heating__househeating__status__pred (a: __rep) : bool
    ensures { result
                <->
                (house_heating__househeating__status__pred (a : __rep)) }
  
  val rec__house_heating__househeating__status_ (a: __rep) : House_heating__heatingstatus.heatingstatus
    requires { house_heating__househeating__status__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_heating__househeating__status)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((House_heating__temperature__rep.to_rep
            ((__split_fields a).rec__house_heating__househeating__temp))
           = (House_heating__temperature__rep.to_rep
                ((__split_fields b).rec__house_heating__househeating__temp))) /\
          ((House_heating__heatingstatus__rep.to_rep
              ((__split_fields a).rec__house_heating__househeating__status))
             = (House_heating__heatingstatus__rep.to_rep
                  ((__split_fields b).rec__house_heating__househeating__status)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module House_heating__househeating
  use export House_heating__househeating__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type househeating = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function house_heating__househeating__temp__first__bit : int
  
  val function house_heating__househeating__temp__last__bit : int
  
  val function house_heating__househeating__temp__position : int
  
  axiom house_heating__househeating__temp__first__bit_axiom:
    (house_heating__househeating__temp__first__bit >= (0 : int))
  
  axiom house_heating__househeating__temp__last__bit_axiom:
    (house_heating__househeating__temp__last__bit
       > house_heating__househeating__temp__first__bit)
  
  axiom house_heating__househeating__temp__position_axiom:
    (house_heating__househeating__temp__position >= (0 : int))
  
  val function house_heating__househeating__status__first__bit : int
  
  val function house_heating__househeating__status__last__bit : int
  
  val function house_heating__househeating__status__position : int
  
  axiom house_heating__househeating__status__first__bit_axiom:
    (house_heating__househeating__status__first__bit >= (0 : int))
  
  axiom house_heating__househeating__status__last__bit_axiom:
    (house_heating__househeating__status__last__bit
       > house_heating__househeating__status__first__bit)
  
  axiom house_heating__househeating__status__position_axiom:
    (house_heating__househeating__status__position >= (0 : int))
  
  val function user_eq (a: househeating) (b: househeating) : bool
  
  val function dummy : househeating
  
  type househeating__ref = { mutable househeating__content : househeating }
  
  function househeating__ref_househeating__content__projection (a: househeating__ref) : househeating =
    a.househeating__content
  
  meta "model_projection" function househeating__ref_househeating__content__projection
  
  meta "inline:no" function househeating__ref_househeating__content__projection
  
  val househeating__havoc (x: househeating__ref) : unit
    writes { x }
end

module House_exterior__exteriorstatus
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type exteriorstatus
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = exteriorstatus,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type exteriorstatus__ref = {
                            mutable exteriorstatus__content : exteriorstatus
                            }
  
  function exteriorstatus__ref_exteriorstatus__content__projection (a: exteriorstatus__ref) : exteriorstatus =
    a.exteriorstatus__content
  
  meta "model_projection" function exteriorstatus__ref_exteriorstatus__content__projection
  
  meta "inline:no" function exteriorstatus__ref_exteriorstatus__content__projection
  
  val exteriorstatus__havoc (x: exteriorstatus__ref) : unit
    writes { x }
end

module House_exterior__exteriorstatus__rep
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_exterior__exteriorstatus.exteriorstatus,
    predicate in_range = House_exterior__exteriorstatus.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_exterior__houseexterior__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  use House_exterior__exteriorstatus__rep as House_exterior__exteriorstatus__rep
  
  type __split_fields = {
                       rec__house_exterior__houseexterior__status :
                         House_exterior__exteriorstatus.exteriorstatus;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__house_exterior__houseexterior__status__projection (a: __split_fields) : 
    House_exterior__exteriorstatus.exteriorstatus =
    a.rec__house_exterior__houseexterior__status
  
  meta "model_projection" function __split_fields_rec__house_exterior__houseexterior__status__projection
  
  meta "inline:no" function __split_fields_rec__house_exterior__houseexterior__status__projection
  
  function __split_fields_rec__ext____2__projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____2__projection
  
  meta "inline:no" function __split_fields_rec__ext____2__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__2__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__2__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__2__projection
  
  meta "inline:no" function __rep___split_fields__2__projection
  
  function __rep_attr__tag__2__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__2__projection
  
  meta "inline:no" function __rep_attr__tag__2__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate house_exterior__houseexterior__status__pred (a: __rep) = true
  
  val house_exterior__houseexterior__status__pred (a: __rep) : bool
    ensures { result
                <->
                (house_exterior__houseexterior__status__pred (a : __rep)) }
  
  val rec__house_exterior__houseexterior__status_ (a: __rep) : House_exterior__exteriorstatus.exteriorstatus
    requires { house_exterior__houseexterior__status__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_exterior__houseexterior__status)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((House_exterior__exteriorstatus__rep.to_rep
           ((__split_fields a).rec__house_exterior__houseexterior__status))
          = (House_exterior__exteriorstatus__rep.to_rep
               ((__split_fields b).rec__house_exterior__houseexterior__status))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module House_exterior__houseexterior
  use export House_exterior__houseexterior__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type houseexterior = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function house_exterior__houseexterior__status__first__bit : int
  
  val function house_exterior__houseexterior__status__last__bit : int
  
  val function house_exterior__houseexterior__status__position : int
  
  axiom house_exterior__houseexterior__status__first__bit_axiom:
    (house_exterior__houseexterior__status__first__bit >= (0 : int))
  
  axiom house_exterior__houseexterior__status__last__bit_axiom:
    (house_exterior__houseexterior__status__last__bit
       > house_exterior__houseexterior__status__first__bit)
  
  axiom house_exterior__houseexterior__status__position_axiom:
    (house_exterior__houseexterior__status__position >= (0 : int))
  
  val function user_eq (a: houseexterior) (b: houseexterior) : bool
  
  val function dummy : houseexterior
  
  type houseexterior__ref = {
                           mutable houseexterior__content : houseexterior
                           }
  
  function houseexterior__ref_houseexterior__content__projection (a: houseexterior__ref) : houseexterior =
    a.houseexterior__content
  
  meta "model_projection" function houseexterior__ref_houseexterior__content__projection
  
  meta "inline:no" function houseexterior__ref_houseexterior__content__projection
  
  val houseexterior__havoc (x: houseexterior__ref) : unit
    writes { x }
end

module Clean_air__carbon
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type carbon = <range 0 8>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (8 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = carbon,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type carbon__ref = { mutable carbon__content : carbon }
  
  function carbon__ref_carbon__content__projection (a: carbon__ref) : carbon =
    a.carbon__content
  
  meta "model_projection" function carbon__ref_carbon__content__projection
  
  meta "inline:no" function carbon__ref_carbon__content__projection
  
  val carbon__havoc (x: carbon__ref) : unit
    writes { x }
end

module Clean_air__carbon__rep
  use Clean_air__carbon as Clean_air__carbon
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Clean_air__carbon.carbon) : int =
    Clean_air__carbon.carbon'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Clean_air__carbon.carbon,
    predicate in_range = Clean_air__carbon.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Clean_air__aircon
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type aircon
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = aircon,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type aircon__ref = { mutable aircon__content : aircon }
  
  function aircon__ref_aircon__content__projection (a: aircon__ref) : aircon =
    a.aircon__content
  
  meta "model_projection" function aircon__ref_aircon__content__projection
  
  meta "inline:no" function aircon__ref_aircon__content__projection
  
  val aircon__havoc (x: aircon__ref) : unit
    writes { x }
end

module Clean_air__aircon__rep
  use Clean_air__aircon as Clean_air__aircon
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Clean_air__aircon.aircon,
    predicate in_range = Clean_air__aircon.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Clean_air__cleanair__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Clean_air__carbon as Clean_air__carbon
  use Clean_air__carbon__rep as Clean_air__carbon__rep
  use Clean_air__aircon as Clean_air__aircon
  use Clean_air__aircon__rep as Clean_air__aircon__rep
  
  type __split_fields = {
                       rec__clean_air__cleanair__carb :
                         Clean_air__carbon.carbon;
                       rec__clean_air__cleanair__status :
                         Clean_air__aircon.aircon;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__clean_air__cleanair__carb__projection (a: __split_fields) : 
    Clean_air__carbon.carbon =
    a.rec__clean_air__cleanair__carb
  
  meta "model_projection" function __split_fields_rec__clean_air__cleanair__carb__projection
  
  meta "inline:no" function __split_fields_rec__clean_air__cleanair__carb__projection
  
  function __split_fields_rec__clean_air__cleanair__status__projection (a: __split_fields) : 
    Clean_air__aircon.aircon =
    a.rec__clean_air__cleanair__status
  
  meta "model_projection" function __split_fields_rec__clean_air__cleanair__status__projection
  
  meta "inline:no" function __split_fields_rec__clean_air__cleanair__status__projection
  
  function __split_fields_rec__ext____3__projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____3__projection
  
  meta "inline:no" function __split_fields_rec__ext____3__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__3__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__3__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__3__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__3__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__3__projection
  
  meta "inline:no" function __rep___split_fields__3__projection
  
  function __rep_attr__tag__3__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__3__projection
  
  meta "inline:no" function __rep_attr__tag__3__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate clean_air__cleanair__carb__pred (a: __rep) = true
  
  val clean_air__cleanair__carb__pred (a: __rep) : bool
    ensures { result <-> (clean_air__cleanair__carb__pred (a : __rep)) }
  
  val rec__clean_air__cleanair__carb_ (a: __rep) : Clean_air__carbon.carbon
    requires { clean_air__cleanair__carb__pred a }
    ensures { (result = ((__split_fields a).rec__clean_air__cleanair__carb)) }
  
  predicate clean_air__cleanair__status__pred (a: __rep) = true
  
  val clean_air__cleanair__status__pred (a: __rep) : bool
    ensures { result <-> (clean_air__cleanair__status__pred (a : __rep)) }
  
  val rec__clean_air__cleanair__status_ (a: __rep) : Clean_air__aircon.aircon
    requires { clean_air__cleanair__status__pred a }
    ensures { (result
                 = ((__split_fields a).rec__clean_air__cleanair__status)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Clean_air__carbon__rep.to_rep
            ((__split_fields a).rec__clean_air__cleanair__carb))
           = (Clean_air__carbon__rep.to_rep
                ((__split_fields b).rec__clean_air__cleanair__carb))) /\
          ((Clean_air__aircon__rep.to_rep
              ((__split_fields a).rec__clean_air__cleanair__status))
             = (Clean_air__aircon__rep.to_rep
                  ((__split_fields b).rec__clean_air__cleanair__status)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module Clean_air__cleanair
  use export Clean_air__cleanair__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type cleanair = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function clean_air__cleanair__carb__first__bit : int
  
  val function clean_air__cleanair__carb__last__bit : int
  
  val function clean_air__cleanair__carb__position : int
  
  axiom clean_air__cleanair__carb__first__bit_axiom:
    (clean_air__cleanair__carb__first__bit >= (0 : int))
  
  axiom clean_air__cleanair__carb__last__bit_axiom:
    (clean_air__cleanair__carb__last__bit
       > clean_air__cleanair__carb__first__bit)
  
  axiom clean_air__cleanair__carb__position_axiom:
    (clean_air__cleanair__carb__position >= (0 : int))
  
  val function clean_air__cleanair__status__first__bit : int
  
  val function clean_air__cleanair__status__last__bit : int
  
  val function clean_air__cleanair__status__position : int
  
  axiom clean_air__cleanair__status__first__bit_axiom:
    (clean_air__cleanair__status__first__bit >= (0 : int))
  
  axiom clean_air__cleanair__status__last__bit_axiom:
    (clean_air__cleanair__status__last__bit
       > clean_air__cleanair__status__first__bit)
  
  axiom clean_air__cleanair__status__position_axiom:
    (clean_air__cleanair__status__position >= (0 : int))
  
  val function user_eq (a: cleanair) (b: cleanair) : bool
  
  val function dummy : cleanair
  
  type cleanair__ref = { mutable cleanair__content : cleanair }
  
  function cleanair__ref_cleanair__content__projection (a: cleanair__ref) : cleanair =
    a.cleanair__content
  
  meta "model_projection" function cleanair__ref_cleanair__content__projection
  
  meta "inline:no" function cleanair__ref_cleanair__content__projection
  
  val cleanair__havoc (x: cleanair__ref) : unit
    writes { x }
end

module House_appliances__unlocked
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type unlocked
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = unlocked,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type unlocked__ref = { mutable unlocked__content : unlocked }
  
  function unlocked__ref_unlocked__content__projection (a: unlocked__ref) : unlocked =
    a.unlocked__content
  
  meta "model_projection" function unlocked__ref_unlocked__content__projection
  
  meta "inline:no" function unlocked__ref_unlocked__content__projection
  
  val unlocked__havoc (x: unlocked__ref) : unit
    writes { x }
end

module House_appliances__unlocked__rep
  use House_appliances__unlocked as House_appliances__unlocked
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_appliances__unlocked.unlocked,
    predicate in_range = House_appliances__unlocked.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_appliances__locked
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type locked
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = locked,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type locked__ref = { mutable locked__content : locked }
  
  function locked__ref_locked__content__projection (a: locked__ref) : locked =
    a.locked__content
  
  meta "model_projection" function locked__ref_locked__content__projection
  
  meta "inline:no" function locked__ref_locked__content__projection
  
  val locked__havoc (x: locked__ref) : unit
    writes { x }
end

module House_appliances__locked__rep
  use House_appliances__locked as House_appliances__locked
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_appliances__locked.locked,
    predicate in_range = House_appliances__locked.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_appliances__houseappliances__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use House_appliances__unlocked as House_appliances__unlocked
  use House_appliances__unlocked__rep as House_appliances__unlocked__rep
  use House_appliances__locked as House_appliances__locked
  use House_appliances__locked__rep as House_appliances__locked__rep
  
  type __split_fields = {
                       rec__house_appliances__houseappliances__statusunlocked :
                         House_appliances__unlocked.unlocked;
                       rec__house_appliances__houseappliances__statuslocked :
                         House_appliances__locked.locked;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__house_appliances__houseappliances__statusunlocked__projection (a: __split_fields) : 
    House_appliances__unlocked.unlocked =
    a.rec__house_appliances__houseappliances__statusunlocked
  
  meta "model_projection" function __split_fields_rec__house_appliances__houseappliances__statusunlocked__projection
  
  meta "inline:no" function __split_fields_rec__house_appliances__houseappliances__statusunlocked__projection
  
  function __split_fields_rec__house_appliances__houseappliances__statuslocked__projection (a: __split_fields) : 
    House_appliances__locked.locked =
    a.rec__house_appliances__houseappliances__statuslocked
  
  meta "model_projection" function __split_fields_rec__house_appliances__houseappliances__statuslocked__projection
  
  meta "inline:no" function __split_fields_rec__house_appliances__houseappliances__statuslocked__projection
  
  function __split_fields_rec__ext____4__projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____4__projection
  
  meta "inline:no" function __split_fields_rec__ext____4__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__4__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__4__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__4__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__4__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__4__projection
  
  meta "inline:no" function __rep___split_fields__4__projection
  
  function __rep_attr__tag__4__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__4__projection
  
  meta "inline:no" function __rep_attr__tag__4__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate house_appliances__houseappliances__statusunlocked__pred (a: __rep) =
    true
  
  val house_appliances__houseappliances__statusunlocked__pred (a: __rep) : 
    bool
    ensures { result
                <->
                (house_appliances__houseappliances__statusunlocked__pred
                   (a : __rep)) }
  
  val rec__house_appliances__houseappliances__statusunlocked_ (a: __rep) : 
    House_appliances__unlocked.unlocked
    requires { house_appliances__houseappliances__statusunlocked__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_appliances__houseappliances__statusunlocked)) }
  
  predicate house_appliances__houseappliances__statuslocked__pred (a: __rep) =
    true
  
  val house_appliances__houseappliances__statuslocked__pred (a: __rep) : 
    bool
    ensures { result
                <->
                (house_appliances__houseappliances__statuslocked__pred
                   (a : __rep)) }
  
  val rec__house_appliances__houseappliances__statuslocked_ (a: __rep) : 
    House_appliances__locked.locked
    requires { house_appliances__houseappliances__statuslocked__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_appliances__houseappliances__statuslocked)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((House_appliances__unlocked__rep.to_rep
            ((__split_fields a).rec__house_appliances__houseappliances__statusunlocked))
           = (House_appliances__unlocked__rep.to_rep
                ((__split_fields b).rec__house_appliances__houseappliances__statusunlocked))) /\
          ((House_appliances__locked__rep.to_rep
              ((__split_fields a).rec__house_appliances__houseappliances__statuslocked))
             = (House_appliances__locked__rep.to_rep
                  ((__split_fields b).rec__house_appliances__houseappliances__statuslocked)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module House_appliances__houseappliances
  use export House_appliances__houseappliances__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type houseappliances = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function house_appliances__houseappliances__statusunlocked__first__bit : 
    int
  
  val function house_appliances__houseappliances__statusunlocked__last__bit : 
    int
  
  val function house_appliances__houseappliances__statusunlocked__position : 
    int
  
  axiom house_appliances__houseappliances__statusunlocked__first__bit_axiom:
    (house_appliances__houseappliances__statusunlocked__first__bit
       >= (0 : int))
  
  axiom house_appliances__houseappliances__statusunlocked__last__bit_axiom:
    (house_appliances__houseappliances__statusunlocked__last__bit
       > house_appliances__houseappliances__statusunlocked__first__bit)
  
  axiom house_appliances__houseappliances__statusunlocked__position_axiom:
    (house_appliances__houseappliances__statusunlocked__position
       >= (0 : int))
  
  val function house_appliances__houseappliances__statuslocked__first__bit : 
    int
  
  val function house_appliances__houseappliances__statuslocked__last__bit : 
    int
  
  val function house_appliances__houseappliances__statuslocked__position : 
    int
  
  axiom house_appliances__houseappliances__statuslocked__first__bit_axiom:
    (house_appliances__houseappliances__statuslocked__first__bit
       >= (0 : int))
  
  axiom house_appliances__houseappliances__statuslocked__last__bit_axiom:
    (house_appliances__houseappliances__statuslocked__last__bit
       > house_appliances__houseappliances__statuslocked__first__bit)
  
  axiom house_appliances__houseappliances__statuslocked__position_axiom:
    (house_appliances__houseappliances__statuslocked__position >= (0 : int))
  
  val function user_eq (a: houseappliances) (b: houseappliances) : bool
  
  val function dummy : houseappliances
  
  type houseappliances__ref = {
                             mutable houseappliances__content :
                               houseappliances
                             }
  
  function houseappliances__ref_houseappliances__content__projection (a: houseappliances__ref) : houseappliances =
    a.houseappliances__content
  
  meta "model_projection" function houseappliances__ref_houseappliances__content__projection
  
  meta "inline:no" function houseappliances__ref_houseappliances__content__projection
  
  val houseappliances__havoc (x: houseappliances__ref) : unit
    writes { x }
end

module House__house__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use House_heating__househeating as House_heating__househeating
  use House_exterior__houseexterior as House_exterior__houseexterior
  use Clean_air__cleanair as Clean_air__cleanair
  use House_appliances__houseappliances as House_appliances__houseappliances
  
  type __split_fields = {
                       rec__house__house__heating :
                         House_heating__househeating.househeating;
                       rec__house__house__exterior :
                         House_exterior__houseexterior.houseexterior;
                       rec__house__house__air : Clean_air__cleanair.cleanair;
                       rec__house__house__appliances :
                         House_appliances__houseappliances.houseappliances;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__house__house__heating__projection (a: __split_fields) : 
    House_heating__househeating.househeating =
    a.rec__house__house__heating
  
  meta "model_projection" function __split_fields_rec__house__house__heating__projection
  
  meta "inline:no" function __split_fields_rec__house__house__heating__projection
  
  function __split_fields_rec__house__house__exterior__projection (a: __split_fields) : 
    House_exterior__houseexterior.houseexterior =
    a.rec__house__house__exterior
  
  meta "model_projection" function __split_fields_rec__house__house__exterior__projection
  
  meta "inline:no" function __split_fields_rec__house__house__exterior__projection
  
  function __split_fields_rec__house__house__air__projection (a: __split_fields) : 
    Clean_air__cleanair.cleanair =
    a.rec__house__house__air
  
  meta "model_projection" function __split_fields_rec__house__house__air__projection
  
  meta "inline:no" function __split_fields_rec__house__house__air__projection
  
  function __split_fields_rec__house__house__appliances__projection (a: __split_fields) : 
    House_appliances__houseappliances.houseappliances =
    a.rec__house__house__appliances
  
  meta "model_projection" function __split_fields_rec__house__house__appliances__projection
  
  meta "inline:no" function __split_fields_rec__house__house__appliances__projection
  
  function __split_fields_rec__ext____5__projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____5__projection
  
  meta "inline:no" function __split_fields_rec__ext____5__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__5__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__5__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__5__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__5__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__5__projection
  
  meta "inline:no" function __rep___split_fields__5__projection
  
  function __rep_attr__tag__5__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__5__projection
  
  meta "inline:no" function __rep_attr__tag__5__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate house__house__heating__pred (a: __rep) = true
  
  val house__house__heating__pred (a: __rep) : bool
    ensures { result <-> (house__house__heating__pred (a : __rep)) }
  
  val rec__house__house__heating_ (a: __rep) : House_heating__househeating.househeating
    requires { house__house__heating__pred a }
    ensures { (result = ((__split_fields a).rec__house__house__heating)) }
  
  predicate house__house__exterior__pred (a: __rep) = true
  
  val house__house__exterior__pred (a: __rep) : bool
    ensures { result <-> (house__house__exterior__pred (a : __rep)) }
  
  val rec__house__house__exterior_ (a: __rep) : House_exterior__houseexterior.houseexterior
    requires { house__house__exterior__pred a }
    ensures { (result = ((__split_fields a).rec__house__house__exterior)) }
  
  predicate house__house__air__pred (a: __rep) = true
  
  val house__house__air__pred (a: __rep) : bool
    ensures { result <-> (house__house__air__pred (a : __rep)) }
  
  val rec__house__house__air_ (a: __rep) : Clean_air__cleanair.cleanair
    requires { house__house__air__pred a }
    ensures { (result = ((__split_fields a).rec__house__house__air)) }
  
  predicate house__house__appliances__pred (a: __rep) = true
  
  val house__house__appliances__pred (a: __rep) : bool
    ensures { result <-> (house__house__appliances__pred (a : __rep)) }
  
  val rec__house__house__appliances_ (a: __rep) : House_appliances__houseappliances.houseappliances
    requires { house__house__appliances__pred a }
    ensures { (result = ((__split_fields a).rec__house__house__appliances)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((((House_heating__househeating.bool_eq
             ((__split_fields a).rec__house__house__heating))
            ((__split_fields b).rec__house__house__heating)) /\
           ((House_exterior__houseexterior.bool_eq
               ((__split_fields a).rec__house__house__exterior))
              ((__split_fields b).rec__house__house__exterior))) /\
          (((Clean_air__cleanair.bool_eq
               ((__split_fields a).rec__house__house__air))
              ((__split_fields b).rec__house__house__air)) /\
             ((House_appliances__houseappliances.bool_eq
                 ((__split_fields a).rec__house__house__appliances))
                ((__split_fields b).rec__house__house__appliances)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module House__house
  use export House__house__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type house = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function house__house__heating__first__bit : int
  
  val function house__house__heating__last__bit : int
  
  val function house__house__heating__position : int
  
  axiom house__house__heating__first__bit_axiom:
    (house__house__heating__first__bit >= (0 : int))
  
  axiom house__house__heating__last__bit_axiom:
    (house__house__heating__last__bit > house__house__heating__first__bit)
  
  axiom house__house__heating__position_axiom:
    (house__house__heating__position >= (0 : int))
  
  val function house__house__exterior__first__bit : int
  
  val function house__house__exterior__last__bit : int
  
  val function house__house__exterior__position : int
  
  axiom house__house__exterior__first__bit_axiom:
    (house__house__exterior__first__bit >= (0 : int))
  
  axiom house__house__exterior__last__bit_axiom:
    (house__house__exterior__last__bit > house__house__exterior__first__bit)
  
  axiom house__house__exterior__position_axiom:
    (house__house__exterior__position >= (0 : int))
  
  val function house__house__air__first__bit : int
  
  val function house__house__air__last__bit : int
  
  val function house__house__air__position : int
  
  axiom house__house__air__first__bit_axiom:
    (house__house__air__first__bit >= (0 : int))
  
  axiom house__house__air__last__bit_axiom:
    (house__house__air__last__bit > house__house__air__first__bit)
  
  axiom house__house__air__position_axiom:
    (house__house__air__position >= (0 : int))
  
  val function house__house__appliances__first__bit : int
  
  val function house__house__appliances__last__bit : int
  
  val function house__house__appliances__position : int
  
  axiom house__house__appliances__first__bit_axiom:
    (house__house__appliances__first__bit >= (0 : int))
  
  axiom house__house__appliances__last__bit_axiom:
    (house__house__appliances__last__bit
       > house__house__appliances__first__bit)
  
  axiom house__house__appliances__position_axiom:
    (house__house__appliances__position >= (0 : int))
  
  val function user_eq (a: house) (b: house) : bool
  
  val function dummy : house
  
  type house__ref = { mutable house__content : house }
  
  function house__ref_house__content__projection (a: house__ref) : house =
    a.house__content
  
  meta "model_projection" function house__ref_house__content__projection
  
  meta "inline:no" function house__ref_house__content__projection
  
  val house__havoc (x: house__ref) : unit
    writes { x }
end

module House__update__this
  use _gnatprove_standard.Main
  use int.Int
  use House__house as House__house
  
  val this__split_fields : House__house.__split_fields__ref
  
  val function this__attr__tag : int
end

module House_heating__createheating
  use _gnatprove_standard.Main
  use int.Int
  use House_heating__househeating as House_heating__househeating
  
  val function createheating (__void_param: unit) : House_heating__househeating.househeating
  
  val predicate createheating__function_guard (temp___result_161: House_heating__househeating.househeating) (__void_param: unit)
  
  scope Dispatch
    val function createheating (attr__tag: int) (__void_param: unit) : 
      House_heating__househeating.househeating
    
    val predicate createheating__function_guard (temp___result_161: House_heating__househeating.househeating) (attr__tag: int) (__void_param: unit)
    end
end

module House_exterior__createexteriors
  use _gnatprove_standard.Main
  use int.Int
  use House_exterior__houseexterior as House_exterior__houseexterior
  
  val function createexteriors (__void_param: unit) : House_exterior__houseexterior.houseexterior
  
  val predicate createexteriors__function_guard (temp___result_162: House_exterior__houseexterior.houseexterior) (__void_param: unit)
  
  scope Dispatch
    val function createexteriors (attr__tag: int) (__void_param: unit) : 
      House_exterior__houseexterior.houseexterior
    
    val predicate createexteriors__function_guard (temp___result_162: 
      House_exterior__houseexterior.houseexterior) (attr__tag: int) (__void_param: unit)
    end
end

module Clean_air__createaircon
  use _gnatprove_standard.Main
  use int.Int
  use Clean_air__cleanair as Clean_air__cleanair
  
  val function createaircon (__void_param: unit) : Clean_air__cleanair.cleanair
  
  val predicate createaircon__function_guard (temp___result_163: Clean_air__cleanair.cleanair) (__void_param: unit)
  
  scope Dispatch
    val function createaircon (attr__tag: int) (__void_param: unit) : 
      Clean_air__cleanair.cleanair
    
    val predicate createaircon__function_guard (temp___result_163: Clean_air__cleanair.cleanair) (attr__tag: int) (__void_param: unit)
    end
end

module House_appliances__createfridge
  use _gnatprove_standard.Main
  use int.Int
  use House_appliances__houseappliances as House_appliances__houseappliances
  
  val function createfridge (__void_param: unit) : House_appliances__houseappliances.houseappliances
  
  val predicate createfridge__function_guard (temp___result_164: House_appliances__houseappliances.houseappliances) (__void_param: unit)
  
  scope Dispatch
    val function createfridge (attr__tag: int) (__void_param: unit) : 
      House_appliances__houseappliances.houseappliances
    
    val predicate createfridge__function_guard (temp___result_164: House_appliances__houseappliances.houseappliances) (attr__tag: int) (__void_param: unit)
    end
end

module House__house___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_heating__househeating as House_heating__househeating
  use House_heating__createheating as House_heating__createheating
  use House_exterior__houseexterior as House_exterior__houseexterior
  use House_exterior__createexteriors as House_exterior__createexteriors
  use Clean_air__cleanair as Clean_air__cleanair
  use Clean_air__createaircon as Clean_air__createaircon
  use House_appliances__houseappliances as House_appliances__houseappliances
  use House_appliances__createfridge as House_appliances__createfridge
  use House__house as House__house
  
  predicate dynamic_invariant (temp___expr_258: House__house.house) (temp___is_init_254: bool) (temp___skip_constant_255: bool) (temp___do_toplevel_256: bool) (temp___do_typ_inv_257: bool) =
    true
  
  val dynamic_invariant (temp___expr_258: House__house.house) (temp___is_init_254: bool) (temp___skip_constant_255: bool) (temp___do_toplevel_256: bool) (temp___do_typ_inv_257: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_258 : House__house.house))
                      (temp___is_init_254 : bool))
                     (temp___skip_constant_255 : bool))
                    (temp___do_toplevel_256 : bool))
                   (temp___do_typ_inv_257 : bool)) }
  
  predicate default_initial_assumption (temp___expr_259: House__house.house) (temp___skip_top_level_260: bool) =
    (((House__house.attr__tag temp___expr_259) = House__house.__tag) /\
       (((if (House__house.house__house__heating__pred temp___expr_259) then
            (((House__house.__split_fields temp___expr_259).House__house.rec__house__house__heating)
               = { (epsilon temp___result_261: House_heating__househeating.househeating.
                      ((temp___result_261
                          = (House_heating__createheating.createheating ())) /\
                         ((House_heating__createheating.createheating__function_guard
                             temp___result_261)
                            ()))) with
                   House_heating__househeating.attr__tag =
                     House_heating__househeating.__tag })
          else true) /\
           (if (House__house.house__house__exterior__pred temp___expr_259) then
              (((House__house.__split_fields temp___expr_259).House__house.rec__house__house__exterior)
                 = { (epsilon temp___result_262: House_exterior__houseexterior.houseexterior.
                        ((temp___result_262
                            = (House_exterior__createexteriors.createexteriors
                                 ())) /\
                           ((House_exterior__createexteriors.createexteriors__function_guard
                               temp___result_262)
                              ()))) with
                     House_exterior__houseexterior.attr__tag =
                       House_exterior__houseexterior.__tag })
            else true)) /\
          ((if (House__house.house__house__air__pred temp___expr_259) then
              (((House__house.__split_fields temp___expr_259).House__house.rec__house__house__air)
                 = { (epsilon temp___result_263: Clean_air__cleanair.cleanair.
                        ((temp___result_263
                            = (Clean_air__createaircon.createaircon ())) /\
                           ((Clean_air__createaircon.createaircon__function_guard
                               temp___result_263)
                              ()))) with
                     Clean_air__cleanair.attr__tag =
                       Clean_air__cleanair.__tag })
            else true) /\
             (if (House__house.house__house__appliances__pred temp___expr_259) then
                (((House__house.__split_fields temp___expr_259).House__house.rec__house__house__appliances)
                   = { (epsilon temp___result_264: House_appliances__houseappliances.houseappliances.
                          ((temp___result_264
                              = (House_appliances__createfridge.createfridge
                                   ())) /\
                             ((House_appliances__createfridge.createfridge__function_guard
                                 temp___result_264)
                                ()))) with
                       House_appliances__houseappliances.attr__tag =
                         House_appliances__houseappliances.__tag })
              else true))))
  
  val default_initial_assumption (temp___expr_259: House__house.house) (temp___skip_top_level_260: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_259 : House__house.house))
                   (temp___skip_top_level_260 : bool)) }
end

module House_heating__househeating___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_heating__househeating as House_heating__househeating
  
  predicate dynamic_invariant (temp___expr_184: House_heating__househeating.househeating) (temp___is_init_180: bool) (temp___skip_constant_181: bool) (temp___do_toplevel_182: bool) (temp___do_typ_inv_183: bool) =
    true
  
  val dynamic_invariant (temp___expr_184: House_heating__househeating.househeating) (temp___is_init_180: bool) (temp___skip_constant_181: bool) (temp___do_toplevel_182: bool) (temp___do_typ_inv_183: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_184 :
                          House_heating__househeating.househeating))
                      (temp___is_init_180 : bool))
                     (temp___skip_constant_181 : bool))
                    (temp___do_toplevel_182 : bool))
                   (temp___do_typ_inv_183 : bool)) }
  
  predicate default_initial_assumption (temp___expr_185: House_heating__househeating.househeating) (temp___skip_top_level_186: bool) =
    ((House_heating__househeating.attr__tag temp___expr_185)
       = House_heating__househeating.__tag)
  
  val default_initial_assumption (temp___expr_185: House_heating__househeating.househeating) (temp___skip_top_level_186: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_185 :
                       House_heating__househeating.househeating))
                   (temp___skip_top_level_186 : bool)) }
end

module House_heating__ThouseheatingC
  use export House_heating__househeating
  use _gnatprove_standard.Main
  use int.Int
end

module House_heating__update___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_heating__househeating as House_heating__househeating
  use House_heating__househeating___axiom as House_heating__househeating___axiom
  use House_heating__temperature as House_heating__temperature
  use House_heating__temperature__rep as House_heating__temperature__rep
  use House_heating__heatingstatus as House_heating__heatingstatus
  use House_heating__heatingstatus__rep as House_heating__heatingstatus__rep
  use House_heating__ThouseheatingC as House_heating__ThouseheatingC
  
  val update (this__split_fields: House_heating__househeating.__split_fields__ref) (this__attr__tag: int) : 
    unit
    requires { [@GP_Pretty_Ada:3720]
               (let temp___293 =
                  House_heating__temperature__rep.to_rep
                    ((House_heating__househeating.__split_fields
                         { House_heating__househeating.__split_fields =
                             (House_heating__househeating.__split_fields__content
                                 this__split_fields) ;
                           House_heating__househeating.attr__tag =
                             this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp) in
                (((17 : int) <= temp___293) /\ (temp___293 <= (19 : int))))
    }
    writes { this__split_fields }
    ensures { (([@GP_Pretty_Ada:3800]
                (((((((House_heating__heatingstatus__rep.to_rep
                         ((House_heating__househeating.__split_fields
                              { House_heating__househeating.__split_fields =
                                  (House_heating__househeating.__split_fields__content
                                      this__split_fields) ;
                                House_heating__househeating.attr__tag =
                                  this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__status))
                        = (0 : int)) /\
                       ((House_heating__temperature__rep.to_rep
                           (old ((House_heating__househeating.__split_fields
                                     { House_heating__househeating.__split_fields =
                                         (House_heating__househeating.__split_fields__content
                                             this__split_fields) ;
                                       House_heating__househeating.attr__tag =
                                         this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp)))
                          < (17 : int))) /\
                      ((House_heating__temperature__rep.to_rep
                          ((House_heating__househeating.__split_fields
                               { House_heating__househeating.__split_fields =
                                   (House_heating__househeating.__split_fields__content
                                       this__split_fields) ;
                                 House_heating__househeating.attr__tag =
                                   this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp))
                         = ((House_heating__temperature__rep.to_rep
                               (old ((House_heating__househeating.__split_fields
                                         { House_heating__househeating.__split_fields =
                                             (House_heating__househeating.__split_fields__content
                                                 this__split_fields) ;
                                           House_heating__househeating.attr__tag =
                                             this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp)))
                              + (1 : int)))) \/
                     ((((House_heating__heatingstatus__rep.to_rep
                           ((House_heating__househeating.__split_fields
                                { House_heating__househeating.__split_fields =
                                    (House_heating__househeating.__split_fields__content
                                        this__split_fields) ;
                                  House_heating__househeating.attr__tag =
                                    this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__status))
                          = (1 : int)) /\
                         ((House_heating__temperature__rep.to_rep
                             (old ((House_heating__househeating.__split_fields
                                       { House_heating__househeating.__split_fields =
                                           (House_heating__househeating.__split_fields__content
                                               this__split_fields) ;
                                         House_heating__househeating.attr__tag =
                                           this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp)))
                            > (19 : int))) /\
                        ((House_heating__temperature__rep.to_rep
                            ((House_heating__househeating.__split_fields
                                 { House_heating__househeating.__split_fields =
                                     (House_heating__househeating.__split_fields__content
                                         this__split_fields) ;
                                   House_heating__househeating.attr__tag =
                                     this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp))
                           = ((House_heating__temperature__rep.to_rep
                                 (old ((House_heating__househeating.__split_fields
                                           { House_heating__househeating.__split_fields =
                                               (House_heating__househeating.__split_fields__content
                                                   this__split_fields) ;
                                             House_heating__househeating.attr__tag =
                                               this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp)))
                                - (1 : int))))) \/
                    (((House_heating__heatingstatus__rep.to_rep
                         ((House_heating__househeating.__split_fields
                              { House_heating__househeating.__split_fields =
                                  (House_heating__househeating.__split_fields__content
                                      this__split_fields) ;
                                House_heating__househeating.attr__tag =
                                  this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__status))
                        = (1 : int)) /\
                       ((House_heating__temperature__rep.to_rep
                           (old ((House_heating__househeating.__split_fields
                                     { House_heating__househeating.__split_fields =
                                         (House_heating__househeating.__split_fields__content
                                             this__split_fields) ;
                                       House_heating__househeating.attr__tag =
                                         this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp)))
                          <= (19 : int)))) \/
                   (((House_heating__heatingstatus__rep.to_rep
                        ((House_heating__househeating.__split_fields
                             { House_heating__househeating.__split_fields =
                                 (House_heating__househeating.__split_fields__content
                                     this__split_fields) ;
                               House_heating__househeating.attr__tag =
                                 this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__status))
                       = (0 : int)) /\
                      ((House_heating__temperature__rep.to_rep
                          (old ((House_heating__househeating.__split_fields
                                    { House_heating__househeating.__split_fields =
                                        (House_heating__househeating.__split_fields__content
                                            this__split_fields) ;
                                      House_heating__househeating.attr__tag =
                                        this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp)))
                         >= (17 : int))))) /\
                 (((((House_heating__househeating___axiom.dynamic_invariant
                        { House_heating__househeating.__split_fields =
                            (House_heating__househeating.__split_fields__content
                                this__split_fields) ;
                          House_heating__househeating.attr__tag =
                            this__attr__tag })
                       True)
                      True)
                     True)
                    True)) }
  
  scope Dispatch
    val predicate update__specific_post (attr__tag: int) (this__split_fields: 
      House_heating__househeating.__split_fields) (this__attr__tag: int) (this__split_fields___old: 
      House_heating__househeating.__split_fields)
    
    val update (this__split_fields: House_heating__househeating.__split_fields__ref) (this__attr__tag: int) : 
      unit
      requires { [@GP_Pretty_Ada:4929]
                 (let temp___294 =
                    House_heating__temperature__rep.to_rep
                      ((House_heating__ThouseheatingC.__split_fields
                           { House_heating__househeating.__split_fields =
                               (House_heating__househeating.__split_fields__content
                                   this__split_fields) ;
                             House_heating__househeating.attr__tag =
                               this__attr__tag }).House_heating__ThouseheatingC.rec__house_heating__househeating__temp) in
                  (((17 : int) <= temp___294) /\ (temp___294 <= (19 : int))))
      }
      writes { this__split_fields }
      ensures { ((true /\
                    (((((House_heating__househeating___axiom.dynamic_invariant
                           { House_heating__househeating.__split_fields =
                               (House_heating__househeating.__split_fields__content
                                   this__split_fields) ;
                             House_heating__househeating.attr__tag =
                               this__attr__tag })
                          True)
                         True)
                        True)
                       True)) /\
                   ((((update__specific_post this__attr__tag)
                        (House_heating__househeating.__split_fields__content
                            this__split_fields))
                       this__attr__tag)
                      (old (House_heating__househeating.__split_fields__content
                               this__split_fields)))) }
    end
  
  axiom house_heating__househeating__compat_axiom:
    forall this__split_fields : House_heating__househeating.__split_fields, this__split_fields___old : 
          House_heating__househeating.__split_fields.
      forall this__attr__tag : int
            [(((Dispatch.update__specific_post
                  House_heating__househeating.__tag)
                 this__split_fields)
                this__attr__tag)
               this__split_fields___old].
        (((((Dispatch.update__specific_post House_heating__househeating.__tag)
              this__split_fields)
             this__attr__tag)
            this__split_fields___old) ->
           (let temp___this_295 =
              { House_heating__househeating.__split_fields =
                  this__split_fields___old ;
                House_heating__househeating.attr__tag = this__attr__tag } in
            let temp___old_301 =
              House_heating__temperature__rep.to_rep
                ((House_heating__househeating.__split_fields
                     { House_heating__househeating.__split_fields =
                         this__split_fields___old ;
                       House_heating__househeating.attr__tag =
                         this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp) in
            let temp___old_300 =
              House_heating__temperature__rep.to_rep
                ((House_heating__househeating.__split_fields
                     { House_heating__househeating.__split_fields =
                         this__split_fields___old ;
                       House_heating__househeating.attr__tag =
                         this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp) in
            let temp___old_299 =
              House_heating__temperature__rep.to_rep
                ((House_heating__househeating.__split_fields
                     { House_heating__househeating.__split_fields =
                         this__split_fields___old ;
                       House_heating__househeating.attr__tag =
                         this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp) in
            let temp___old_298 =
              House_heating__temperature__rep.to_rep
                ((House_heating__househeating.__split_fields
                     { House_heating__househeating.__split_fields =
                         this__split_fields___old ;
                       House_heating__househeating.attr__tag =
                         this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp) in
            let temp___old_297 =
              House_heating__temperature__rep.to_rep
                ((House_heating__househeating.__split_fields
                     { House_heating__househeating.__split_fields =
                         this__split_fields___old ;
                       House_heating__househeating.attr__tag =
                         this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp) in
            let temp___old_296 =
              House_heating__temperature__rep.to_rep
                ((House_heating__househeating.__split_fields
                     { House_heating__househeating.__split_fields =
                         this__split_fields___old ;
                       House_heating__househeating.attr__tag =
                         this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp) in
            let temp___this_295 =
              { House_heating__househeating.__split_fields =
                  this__split_fields ;
                House_heating__househeating.attr__tag = this__attr__tag } in
            [@GP_Pretty_Ada:3800]
            (((((((House_heating__heatingstatus__rep.to_rep
                     ((House_heating__househeating.__split_fields
                          { House_heating__househeating.__split_fields =
                              this__split_fields ;
                            House_heating__househeating.attr__tag =
                              this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__status))
                    = (0 : int)) /\
                   (temp___old_296 < (17 : int))) /\
                  ((House_heating__temperature__rep.to_rep
                      ((House_heating__househeating.__split_fields
                           { House_heating__househeating.__split_fields =
                               this__split_fields ;
                             House_heating__househeating.attr__tag =
                               this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp))
                     = (temp___old_297 + (1 : int)))) \/
                 ((((House_heating__heatingstatus__rep.to_rep
                       ((House_heating__househeating.__split_fields
                            { House_heating__househeating.__split_fields =
                                this__split_fields ;
                              House_heating__househeating.attr__tag =
                                this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__status))
                      = (1 : int)) /\
                     (temp___old_298 > (19 : int))) /\
                    ((House_heating__temperature__rep.to_rep
                        ((House_heating__househeating.__split_fields
                             { House_heating__househeating.__split_fields =
                                 this__split_fields ;
                               House_heating__househeating.attr__tag =
                                 this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__temp))
                       = (temp___old_299 - (1 : int))))) \/
                (((House_heating__heatingstatus__rep.to_rep
                     ((House_heating__househeating.__split_fields
                          { House_heating__househeating.__split_fields =
                              this__split_fields ;
                            House_heating__househeating.attr__tag =
                              this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__status))
                    = (1 : int)) /\
                   (temp___old_300 <= (19 : int)))) \/
               (((House_heating__heatingstatus__rep.to_rep
                    ((House_heating__househeating.__split_fields
                         { House_heating__househeating.__split_fields =
                             this__split_fields ;
                           House_heating__househeating.attr__tag =
                             this__attr__tag }).House_heating__househeating.rec__house_heating__househeating__status))
                   = (0 : int)) /\
                  (temp___old_301 >= (17 : int))))))
end

module House_exterior__houseexterior___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_exterior__houseexterior as House_exterior__houseexterior
  
  predicate dynamic_invariant (temp___expr_200: House_exterior__houseexterior.houseexterior) (temp___is_init_196: bool) (temp___skip_constant_197: bool) (temp___do_toplevel_198: bool) (temp___do_typ_inv_199: bool) =
    true
  
  val dynamic_invariant (temp___expr_200: House_exterior__houseexterior.houseexterior) (temp___is_init_196: bool) (temp___skip_constant_197: bool) (temp___do_toplevel_198: bool) (temp___do_typ_inv_199: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_200 :
                          House_exterior__houseexterior.houseexterior))
                      (temp___is_init_196 : bool))
                     (temp___skip_constant_197 : bool))
                    (temp___do_toplevel_198 : bool))
                   (temp___do_typ_inv_199 : bool)) }
  
  predicate default_initial_assumption (temp___expr_201: House_exterior__houseexterior.houseexterior) (temp___skip_top_level_202: bool) =
    ((House_exterior__houseexterior.attr__tag temp___expr_201)
       = House_exterior__houseexterior.__tag)
  
  val default_initial_assumption (temp___expr_201: House_exterior__houseexterior.houseexterior) (temp___skip_top_level_202: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_201 :
                       House_exterior__houseexterior.houseexterior))
                   (temp___skip_top_level_202 : bool)) }
end

module House_exterior__ThouseexteriorC
  use export House_exterior__houseexterior
  use _gnatprove_standard.Main
  use int.Int
end

module House_exterior__updatelocked___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_exterior__houseexterior as House_exterior__houseexterior
  use House_exterior__houseexterior___axiom as House_exterior__houseexterior___axiom
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  use House_exterior__exteriorstatus__rep as House_exterior__exteriorstatus__rep
  use House_exterior__ThouseexteriorC as House_exterior__ThouseexteriorC
  
  val updatelocked (this__split_fields: House_exterior__houseexterior.__split_fields__ref) (this__attr__tag: int) : 
    unit
    requires { [@GP_Pretty_Ada:3847]
               ((House_exterior__exteriorstatus__rep.to_rep
                   ((House_exterior__houseexterior.__split_fields
                        { House_exterior__houseexterior.__split_fields =
                            (House_exterior__houseexterior.__split_fields__content
                                this__split_fields) ;
                          House_exterior__houseexterior.attr__tag =
                            this__attr__tag }).House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
                  = (0 : int))
    }
    writes { this__split_fields }
    ensures { (([@GP_Pretty_Ada:3859]
                ((House_exterior__exteriorstatus__rep.to_rep
                    ((House_exterior__houseexterior.__split_fields
                         { House_exterior__houseexterior.__split_fields =
                             (House_exterior__houseexterior.__split_fields__content
                                 this__split_fields) ;
                           House_exterior__houseexterior.attr__tag =
                             this__attr__tag }).House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
                   = (1 : int))) /\
                 (((((House_exterior__houseexterior___axiom.dynamic_invariant
                        { House_exterior__houseexterior.__split_fields =
                            (House_exterior__houseexterior.__split_fields__content
                                this__split_fields) ;
                          House_exterior__houseexterior.attr__tag =
                            this__attr__tag })
                       True)
                      True)
                     True)
                    True)) }
  
  scope Dispatch
    val predicate updatelocked__specific_post (attr__tag: int) (this__split_fields: 
      House_exterior__houseexterior.__split_fields) (this__attr__tag: int) (this__split_fields___old: 
      House_exterior__houseexterior.__split_fields)
    
    val updatelocked (this__split_fields: House_exterior__houseexterior.__split_fields__ref) (this__attr__tag: int) : 
      unit
      requires { [@GP_Pretty_Ada:4940]
                 ((House_exterior__exteriorstatus__rep.to_rep
                     ((House_exterior__ThouseexteriorC.__split_fields
                          { House_exterior__houseexterior.__split_fields =
                              (House_exterior__houseexterior.__split_fields__content
                                  this__split_fields) ;
                            House_exterior__houseexterior.attr__tag =
                              this__attr__tag }).House_exterior__ThouseexteriorC.rec__house_exterior__houseexterior__status))
                    = (0 : int))
      }
      writes { this__split_fields }
      ensures { ((([@GP_Pretty_Ada:4949]
                   ((House_exterior__exteriorstatus__rep.to_rep
                       ((House_exterior__ThouseexteriorC.__split_fields
                            { House_exterior__houseexterior.__split_fields =
                                (House_exterior__houseexterior.__split_fields__content
                                    this__split_fields) ;
                              House_exterior__houseexterior.attr__tag =
                                this__attr__tag }).House_exterior__ThouseexteriorC.rec__house_exterior__houseexterior__status))
                      = (1 : int))) /\
                    (((((House_exterior__houseexterior___axiom.dynamic_invariant
                           { House_exterior__houseexterior.__split_fields =
                               (House_exterior__houseexterior.__split_fields__content
                                   this__split_fields) ;
                             House_exterior__houseexterior.attr__tag =
                               this__attr__tag })
                          True)
                         True)
                        True)
                       True)) /\
                   ((((updatelocked__specific_post this__attr__tag)
                        (House_exterior__houseexterior.__split_fields__content
                            this__split_fields))
                       this__attr__tag)
                      (old (House_exterior__houseexterior.__split_fields__content
                               this__split_fields)))) }
    end
  
  axiom house_exterior__houseexterior__compat_axiom:
    forall this__split_fields : House_exterior__houseexterior.__split_fields, this__split_fields___old : 
          House_exterior__houseexterior.__split_fields.
      forall this__attr__tag : int
            [(((Dispatch.updatelocked__specific_post
                  House_exterior__houseexterior.__tag)
                 this__split_fields)
                this__attr__tag)
               this__split_fields___old].
        (((((Dispatch.updatelocked__specific_post
               House_exterior__houseexterior.__tag)
              this__split_fields)
             this__attr__tag)
            this__split_fields___old) ->
           (let temp___this_307 =
              { House_exterior__houseexterior.__split_fields =
                  this__split_fields___old ;
                House_exterior__houseexterior.attr__tag = this__attr__tag } in
            let temp___this_307 =
              { House_exterior__houseexterior.__split_fields =
                  this__split_fields ;
                House_exterior__houseexterior.attr__tag = this__attr__tag } in
            [@GP_Pretty_Ada:3859]
            ((House_exterior__exteriorstatus__rep.to_rep
                ((House_exterior__houseexterior.__split_fields
                     { House_exterior__houseexterior.__split_fields =
                         this__split_fields ;
                       House_exterior__houseexterior.attr__tag =
                         this__attr__tag }).House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
               = (1 : int))))
end

module House_exterior__updateunlocked___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_exterior__houseexterior as House_exterior__houseexterior
  use House_exterior__houseexterior___axiom as House_exterior__houseexterior___axiom
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  use House_exterior__exteriorstatus__rep as House_exterior__exteriorstatus__rep
  use House_exterior__ThouseexteriorC as House_exterior__ThouseexteriorC
  
  val updateunlocked (this__split_fields: House_exterior__houseexterior.__split_fields__ref) (this__attr__tag: int) : 
    unit
    requires { [@GP_Pretty_Ada:3874]
               ((House_exterior__exteriorstatus__rep.to_rep
                   ((House_exterior__houseexterior.__split_fields
                        { House_exterior__houseexterior.__split_fields =
                            (House_exterior__houseexterior.__split_fields__content
                                this__split_fields) ;
                          House_exterior__houseexterior.attr__tag =
                            this__attr__tag }).House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
                  = (1 : int))
    }
    writes { this__split_fields }
    ensures { (([@GP_Pretty_Ada:3886]
                ((House_exterior__exteriorstatus__rep.to_rep
                    ((House_exterior__houseexterior.__split_fields
                         { House_exterior__houseexterior.__split_fields =
                             (House_exterior__houseexterior.__split_fields__content
                                 this__split_fields) ;
                           House_exterior__houseexterior.attr__tag =
                             this__attr__tag }).House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
                   = (0 : int))) /\
                 (((((House_exterior__houseexterior___axiom.dynamic_invariant
                        { House_exterior__houseexterior.__split_fields =
                            (House_exterior__houseexterior.__split_fields__content
                                this__split_fields) ;
                          House_exterior__houseexterior.attr__tag =
                            this__attr__tag })
                       True)
                      True)
                     True)
                    True)) }
  
  scope Dispatch
    val predicate updateunlocked__specific_post (attr__tag: int) (this__split_fields: 
      House_exterior__houseexterior.__split_fields) (this__attr__tag: int) (this__split_fields___old: 
      House_exterior__houseexterior.__split_fields)
    
    val updateunlocked (this__split_fields: House_exterior__houseexterior.__split_fields__ref) (this__attr__tag: int) : 
      unit
      requires { [@GP_Pretty_Ada:4958]
                 ((House_exterior__exteriorstatus__rep.to_rep
                     ((House_exterior__ThouseexteriorC.__split_fields
                          { House_exterior__houseexterior.__split_fields =
                              (House_exterior__houseexterior.__split_fields__content
                                  this__split_fields) ;
                            House_exterior__houseexterior.attr__tag =
                              this__attr__tag }).House_exterior__ThouseexteriorC.rec__house_exterior__houseexterior__status))
                    = (1 : int))
      }
      writes { this__split_fields }
      ensures { ((([@GP_Pretty_Ada:4967]
                   ((House_exterior__exteriorstatus__rep.to_rep
                       ((House_exterior__ThouseexteriorC.__split_fields
                            { House_exterior__houseexterior.__split_fields =
                                (House_exterior__houseexterior.__split_fields__content
                                    this__split_fields) ;
                              House_exterior__houseexterior.attr__tag =
                                this__attr__tag }).House_exterior__ThouseexteriorC.rec__house_exterior__houseexterior__status))
                      = (0 : int))) /\
                    (((((House_exterior__houseexterior___axiom.dynamic_invariant
                           { House_exterior__houseexterior.__split_fields =
                               (House_exterior__houseexterior.__split_fields__content
                                   this__split_fields) ;
                             House_exterior__houseexterior.attr__tag =
                               this__attr__tag })
                          True)
                         True)
                        True)
                       True)) /\
                   ((((updateunlocked__specific_post this__attr__tag)
                        (House_exterior__houseexterior.__split_fields__content
                            this__split_fields))
                       this__attr__tag)
                      (old (House_exterior__houseexterior.__split_fields__content
                               this__split_fields)))) }
    end
  
  axiom house_exterior__houseexterior__compat_axiom:
    forall this__split_fields : House_exterior__houseexterior.__split_fields, this__split_fields___old : 
          House_exterior__houseexterior.__split_fields.
      forall this__attr__tag : int
            [(((Dispatch.updateunlocked__specific_post
                  House_exterior__houseexterior.__tag)
                 this__split_fields)
                this__attr__tag)
               this__split_fields___old].
        (((((Dispatch.updateunlocked__specific_post
               House_exterior__houseexterior.__tag)
              this__split_fields)
             this__attr__tag)
            this__split_fields___old) ->
           (let temp___this_308 =
              { House_exterior__houseexterior.__split_fields =
                  this__split_fields___old ;
                House_exterior__houseexterior.attr__tag = this__attr__tag } in
            let temp___this_308 =
              { House_exterior__houseexterior.__split_fields =
                  this__split_fields ;
                House_exterior__houseexterior.attr__tag = this__attr__tag } in
            [@GP_Pretty_Ada:3886]
            ((House_exterior__exteriorstatus__rep.to_rep
                ((House_exterior__houseexterior.__split_fields
                     { House_exterior__houseexterior.__split_fields =
                         this__split_fields ;
                       House_exterior__houseexterior.attr__tag =
                         this__attr__tag }).House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
               = (0 : int))))
end

module Clean_air__cleanair___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Clean_air__cleanair as Clean_air__cleanair
  
  predicate dynamic_invariant (temp___expr_222: Clean_air__cleanair.cleanair) (temp___is_init_218: bool) (temp___skip_constant_219: bool) (temp___do_toplevel_220: bool) (temp___do_typ_inv_221: bool) =
    true
  
  val dynamic_invariant (temp___expr_222: Clean_air__cleanair.cleanair) (temp___is_init_218: bool) (temp___skip_constant_219: bool) (temp___do_toplevel_220: bool) (temp___do_typ_inv_221: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_222 : Clean_air__cleanair.cleanair))
                      (temp___is_init_218 : bool))
                     (temp___skip_constant_219 : bool))
                    (temp___do_toplevel_220 : bool))
                   (temp___do_typ_inv_221 : bool)) }
  
  predicate default_initial_assumption (temp___expr_223: Clean_air__cleanair.cleanair) (temp___skip_top_level_224: bool) =
    ((Clean_air__cleanair.attr__tag temp___expr_223)
       = Clean_air__cleanair.__tag)
  
  val default_initial_assumption (temp___expr_223: Clean_air__cleanair.cleanair) (temp___skip_top_level_224: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_223 : Clean_air__cleanair.cleanair))
                   (temp___skip_top_level_224 : bool)) }
end

module Clean_air__TcleanairC
  use export Clean_air__cleanair
  use _gnatprove_standard.Main
  use int.Int
end

module Clean_air__update___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Clean_air__cleanair as Clean_air__cleanair
  use Clean_air__cleanair___axiom as Clean_air__cleanair___axiom
  use Clean_air__carbon as Clean_air__carbon
  use Clean_air__carbon__rep as Clean_air__carbon__rep
  use Clean_air__aircon as Clean_air__aircon
  use Clean_air__aircon__rep as Clean_air__aircon__rep
  use Clean_air__TcleanairC as Clean_air__TcleanairC
  
  val update (this__split_fields: Clean_air__cleanair.__split_fields__ref) (this__attr__tag: int) : 
    unit
    requires { (([@GP_Pretty_Ada:1390]
                 (let temp___314 =
                    Clean_air__carbon__rep.to_rep
                      ((Clean_air__cleanair.__split_fields
                           { Clean_air__cleanair.__split_fields =
                               (Clean_air__cleanair.__split_fields__content
                                   this__split_fields) ;
                             Clean_air__cleanair.attr__tag = this__attr__tag }).
                         Clean_air__cleanair.rec__clean_air__cleanair__carb) in
                  (((0 : int) <= temp___314) /\ (temp___314 <= (8 : int))))) /\
                  ([@GP_Pretty_Ada:1397]
                   (let temp___315 =
                      Clean_air__aircon__rep.to_rep
                        ((Clean_air__cleanair.__split_fields
                             { Clean_air__cleanair.__split_fields =
                                 (Clean_air__cleanair.__split_fields__content
                                     this__split_fields) ;
                               Clean_air__cleanair.attr__tag =
                                 this__attr__tag }).Clean_air__cleanair.rec__clean_air__cleanair__status) in
                    Clean_air__aircon.in_range temp___315)))
    }
    writes { this__split_fields }
    ensures { ((([@GP_Pretty_Ada:1405]
                 (let temp___318 =
                    Clean_air__carbon__rep.to_rep
                      ((Clean_air__cleanair.__split_fields
                           { Clean_air__cleanair.__split_fields =
                               (Clean_air__cleanair.__split_fields__content
                                   this__split_fields) ;
                             Clean_air__cleanair.attr__tag = this__attr__tag }).
                         Clean_air__cleanair.rec__clean_air__cleanair__carb) in
                  (((0 : int) <= temp___318) /\ (temp___318 <= (8 : int))))) /\
                  ([@GP_Pretty_Ada:1423]
                   ((((Clean_air__aircon__rep.to_rep
                         ((Clean_air__cleanair.__split_fields
                              { Clean_air__cleanair.__split_fields =
                                  (Clean_air__cleanair.__split_fields__content
                                      this__split_fields) ;
                                Clean_air__cleanair.attr__tag =
                                  this__attr__tag }).Clean_air__cleanair.rec__clean_air__cleanair__status))
                        = (1 : int)) /\
                       ((Clean_air__carbon__rep.to_rep
                           ((Clean_air__cleanair.__split_fields
                                { Clean_air__cleanair.__split_fields =
                                    (Clean_air__cleanair.__split_fields__content
                                        this__split_fields) ;
                                  Clean_air__cleanair.attr__tag =
                                    this__attr__tag }).Clean_air__cleanair.rec__clean_air__cleanair__carb))
                          <= (4 : int))) \/
                      (((Clean_air__aircon__rep.to_rep
                           ((Clean_air__cleanair.__split_fields
                                { Clean_air__cleanair.__split_fields =
                                    (Clean_air__cleanair.__split_fields__content
                                        this__split_fields) ;
                                  Clean_air__cleanair.attr__tag =
                                    this__attr__tag }).Clean_air__cleanair.rec__clean_air__cleanair__status))
                          = (0 : int)) /\
                         ((Clean_air__carbon__rep.to_rep
                             ((Clean_air__cleanair.__split_fields
                                  { Clean_air__cleanair.__split_fields =
                                      (Clean_air__cleanair.__split_fields__content
                                          this__split_fields) ;
                                    Clean_air__cleanair.attr__tag =
                                      this__attr__tag }).Clean_air__cleanair.rec__clean_air__cleanair__carb))
                            <= (9 : int)))))) /\
                 (((((Clean_air__cleanair___axiom.dynamic_invariant
                        { Clean_air__cleanair.__split_fields =
                            (Clean_air__cleanair.__split_fields__content
                                this__split_fields) ;
                          Clean_air__cleanair.attr__tag = this__attr__tag })
                       True)
                      True)
                     True)
                    True)) }
  
  scope Dispatch
    val predicate update__specific_post (attr__tag: int) (this__split_fields: 
      Clean_air__cleanair.__split_fields) (this__attr__tag: int) (this__split_fields___old: 
      Clean_air__cleanair.__split_fields)
    
    val update (this__split_fields: Clean_air__cleanair.__split_fields__ref) (this__attr__tag: int) : 
      unit
      requires { (([@GP_Pretty_Ada:4977]
                   (let temp___316 =
                      Clean_air__carbon__rep.to_rep
                        ((Clean_air__TcleanairC.__split_fields
                             { Clean_air__cleanair.__split_fields =
                                 (Clean_air__cleanair.__split_fields__content
                                     this__split_fields) ;
                               Clean_air__cleanair.attr__tag =
                                 this__attr__tag }).Clean_air__TcleanairC.rec__clean_air__cleanair__carb) in
                    (((0 : int) <= temp___316) /\ (temp___316 <= (8 : int))))) /\
                    ([@GP_Pretty_Ada:4984]
                     (let temp___317 =
                        Clean_air__aircon__rep.to_rep
                          ((Clean_air__TcleanairC.__split_fields
                               { Clean_air__cleanair.__split_fields =
                                   (Clean_air__cleanair.__split_fields__content
                                       this__split_fields) ;
                                 Clean_air__cleanair.attr__tag =
                                   this__attr__tag }).Clean_air__TcleanairC.rec__clean_air__cleanair__status) in
                      Clean_air__aircon.in_range temp___317)))
      }
      writes { this__split_fields }
      ensures { ((true /\
                    (((((Clean_air__cleanair___axiom.dynamic_invariant
                           { Clean_air__cleanair.__split_fields =
                               (Clean_air__cleanair.__split_fields__content
                                   this__split_fields) ;
                             Clean_air__cleanair.attr__tag = this__attr__tag })
                          True)
                         True)
                        True)
                       True)) /\
                   ((((update__specific_post this__attr__tag)
                        (Clean_air__cleanair.__split_fields__content
                            this__split_fields))
                       this__attr__tag)
                      (old (Clean_air__cleanair.__split_fields__content
                               this__split_fields)))) }
    end
  
  axiom clean_air__cleanair__compat_axiom:
    forall this__split_fields : Clean_air__cleanair.__split_fields, this__split_fields___old : 
          Clean_air__cleanair.__split_fields.
      forall this__attr__tag : int
            [(((Dispatch.update__specific_post Clean_air__cleanair.__tag)
                 this__split_fields)
                this__attr__tag)
               this__split_fields___old].
        (((((Dispatch.update__specific_post Clean_air__cleanair.__tag)
              this__split_fields)
             this__attr__tag)
            this__split_fields___old) ->
           (let temp___this_319 =
              { Clean_air__cleanair.__split_fields = this__split_fields___old ;
                Clean_air__cleanair.attr__tag = this__attr__tag } in
            let temp___this_319 =
              { Clean_air__cleanair.__split_fields = this__split_fields ;
                Clean_air__cleanair.attr__tag = this__attr__tag } in
            (([@GP_Pretty_Ada:1405]
              (let temp___320 =
                 Clean_air__carbon__rep.to_rep
                   ((Clean_air__cleanair.__split_fields
                        { Clean_air__cleanair.__split_fields =
                            this__split_fields ;
                          Clean_air__cleanair.attr__tag = this__attr__tag }).
                      Clean_air__cleanair.rec__clean_air__cleanair__carb) in
               (((0 : int) <= temp___320) /\ (temp___320 <= (8 : int))))) /\
               ([@GP_Pretty_Ada:1423]
                ((((Clean_air__aircon__rep.to_rep
                      ((Clean_air__cleanair.__split_fields
                           { Clean_air__cleanair.__split_fields =
                               this__split_fields ;
                             Clean_air__cleanair.attr__tag = this__attr__tag }).
                         Clean_air__cleanair.rec__clean_air__cleanair__status))
                     = (1 : int)) /\
                    ((Clean_air__carbon__rep.to_rep
                        ((Clean_air__cleanair.__split_fields
                             { Clean_air__cleanair.__split_fields =
                                 this__split_fields ;
                               Clean_air__cleanair.attr__tag =
                                 this__attr__tag }).Clean_air__cleanair.rec__clean_air__cleanair__carb))
                       <= (4 : int))) \/
                   (((Clean_air__aircon__rep.to_rep
                        ((Clean_air__cleanair.__split_fields
                             { Clean_air__cleanair.__split_fields =
                                 this__split_fields ;
                               Clean_air__cleanair.attr__tag =
                                 this__attr__tag }).Clean_air__cleanair.rec__clean_air__cleanair__status))
                       = (0 : int)) /\
                      ((Clean_air__carbon__rep.to_rep
                          ((Clean_air__cleanair.__split_fields
                               { Clean_air__cleanair.__split_fields =
                                   this__split_fields ;
                                 Clean_air__cleanair.attr__tag =
                                   this__attr__tag }).Clean_air__cleanair.rec__clean_air__cleanair__carb))
                         <= (9 : int))))))))
end

module House_appliances__houseappliances___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_appliances__houseappliances as House_appliances__houseappliances
  
  predicate dynamic_invariant (temp___expr_245: House_appliances__houseappliances.houseappliances) (temp___is_init_241: bool) (temp___skip_constant_242: bool) (temp___do_toplevel_243: bool) (temp___do_typ_inv_244: bool) =
    true
  
  val dynamic_invariant (temp___expr_245: House_appliances__houseappliances.houseappliances) (temp___is_init_241: bool) (temp___skip_constant_242: bool) (temp___do_toplevel_243: bool) (temp___do_typ_inv_244: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_245 :
                          House_appliances__houseappliances.houseappliances))
                      (temp___is_init_241 : bool))
                     (temp___skip_constant_242 : bool))
                    (temp___do_toplevel_243 : bool))
                   (temp___do_typ_inv_244 : bool)) }
  
  predicate default_initial_assumption (temp___expr_246: House_appliances__houseappliances.houseappliances) (temp___skip_top_level_247: bool) =
    ((House_appliances__houseappliances.attr__tag temp___expr_246)
       = House_appliances__houseappliances.__tag)
  
  val default_initial_assumption (temp___expr_246: House_appliances__houseappliances.houseappliances) (temp___skip_top_level_247: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_246 :
                       House_appliances__houseappliances.houseappliances))
                   (temp___skip_top_level_247 : bool)) }
end

module House_appliances__ThouseappliancesC
  use export House_appliances__houseappliances
  use _gnatprove_standard.Main
  use int.Int
end

module House_appliances__unlocklock___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_appliances__houseappliances as House_appliances__houseappliances
  use House_appliances__houseappliances___axiom as House_appliances__houseappliances___axiom
  use House_appliances__unlocked as House_appliances__unlocked
  use House_appliances__unlocked__rep as House_appliances__unlocked__rep
  use House_appliances__locked as House_appliances__locked
  use House_appliances__locked__rep as House_appliances__locked__rep
  use House_appliances__ThouseappliancesC as House_appliances__ThouseappliancesC
  
  val unlocklock (this__split_fields: House_appliances__houseappliances.__split_fields__ref) (this__attr__tag: int) : 
    unit
    requires { [@GP_Pretty_Ada:4047]
               (((House_appliances__unlocked__rep.to_rep
                    ((House_appliances__houseappliances.__split_fields
                         { House_appliances__houseappliances.__split_fields =
                             (House_appliances__houseappliances.__split_fields__content
                                 this__split_fields) ;
                           House_appliances__houseappliances.attr__tag =
                             this__attr__tag }).House_appliances__houseappliances.rec__house_appliances__houseappliances__statusunlocked))
                   = (0 : int)) \/
                  ((House_appliances__unlocked__rep.to_rep
                      ((House_appliances__houseappliances.__split_fields
                           { House_appliances__houseappliances.__split_fields =
                               (House_appliances__houseappliances.__split_fields__content
                                   this__split_fields) ;
                             House_appliances__houseappliances.attr__tag =
                               this__attr__tag }).House_appliances__houseappliances.rec__house_appliances__houseappliances__statusunlocked))
                     = (1 : int)))
    }
    writes { this__split_fields }
    ensures { (([@GP_Pretty_Ada:4077]
                ((((House_appliances__unlocked__rep.to_rep
                      ((House_appliances__houseappliances.__split_fields
                           { House_appliances__houseappliances.__split_fields =
                               (House_appliances__houseappliances.__split_fields__content
                                   this__split_fields) ;
                             House_appliances__houseappliances.attr__tag =
                               this__attr__tag }).House_appliances__houseappliances.rec__house_appliances__houseappliances__statusunlocked))
                     = (0 : int)) /\
                    ((House_appliances__locked__rep.to_rep
                        ((House_appliances__houseappliances.__split_fields
                             { House_appliances__houseappliances.__split_fields =
                                 (House_appliances__houseappliances.__split_fields__content
                                     this__split_fields) ;
                               House_appliances__houseappliances.attr__tag =
                                 this__attr__tag }).House_appliances__houseappliances.rec__house_appliances__houseappliances__statuslocked))
                       = (1 : int))) \/
                   (((House_appliances__unlocked__rep.to_rep
                        ((House_appliances__houseappliances.__split_fields
                             { House_appliances__houseappliances.__split_fields =
                                 (House_appliances__houseappliances.__split_fields__content
                                     this__split_fields) ;
                               House_appliances__houseappliances.attr__tag =
                                 this__attr__tag }).House_appliances__houseappliances.rec__house_appliances__houseappliances__statusunlocked))
                       = (1 : int)) /\
                      ((House_appliances__locked__rep.to_rep
                          ((House_appliances__houseappliances.__split_fields
                               { House_appliances__houseappliances.__split_fields =
                                   (House_appliances__houseappliances.__split_fields__content
                                       this__split_fields) ;
                                 House_appliances__houseappliances.attr__tag =
                                   this__attr__tag }).House_appliances__houseappliances.rec__house_appliances__houseappliances__statuslocked))
                         = (0 : int))))) /\
                 (((((House_appliances__houseappliances___axiom.dynamic_invariant
                        { House_appliances__houseappliances.__split_fields =
                            (House_appliances__houseappliances.__split_fields__content
                                this__split_fields) ;
                          House_appliances__houseappliances.attr__tag =
                            this__attr__tag })
                       True)
                      True)
                     True)
                    True)) }
  
  scope Dispatch
    val predicate unlocklock__specific_post (attr__tag: int) (this__split_fields: 
      House_appliances__houseappliances.__split_fields) (this__attr__tag: int) (this__split_fields___old: 
      House_appliances__houseappliances.__split_fields)
    
    val unlocklock (this__split_fields: House_appliances__houseappliances.__split_fields__ref) (this__attr__tag: int) : 
      unit
      requires { [@GP_Pretty_Ada:4997]
                 (((House_appliances__unlocked__rep.to_rep
                      ((House_appliances__ThouseappliancesC.__split_fields
                           { House_appliances__houseappliances.__split_fields =
                               (House_appliances__houseappliances.__split_fields__content
                                   this__split_fields) ;
                             House_appliances__houseappliances.attr__tag =
                               this__attr__tag }).House_appliances__ThouseappliancesC.rec__house_appliances__houseappliances__statusunlocked))
                     = (0 : int)) \/
                    ((House_appliances__unlocked__rep.to_rep
                        ((House_appliances__ThouseappliancesC.__split_fields
                             { House_appliances__houseappliances.__split_fields =
                                 (House_appliances__houseappliances.__split_fields__content
                                     this__split_fields) ;
                               House_appliances__houseappliances.attr__tag =
                                 this__attr__tag }).House_appliances__ThouseappliancesC.rec__house_appliances__houseappliances__statusunlocked))
                       = (1 : int)))
      }
      writes { this__split_fields }
      ensures { ((true /\
                    (((((House_appliances__houseappliances___axiom.dynamic_invariant
                           { House_appliances__houseappliances.__split_fields =
                               (House_appliances__houseappliances.__split_fields__content
                                   this__split_fields) ;
                             House_appliances__houseappliances.attr__tag =
                               this__attr__tag })
                          True)
                         True)
                        True)
                       True)) /\
                   ((((unlocklock__specific_post this__attr__tag)
                        (House_appliances__houseappliances.__split_fields__content
                            this__split_fields))
                       this__attr__tag)
                      (old (House_appliances__houseappliances.__split_fields__content
                               this__split_fields)))) }
    end
  
  axiom house_appliances__houseappliances__compat_axiom:
    forall this__split_fields : House_appliances__houseappliances.__split_fields, this__split_fields___old : 
          House_appliances__houseappliances.__split_fields.
      forall this__attr__tag : int
            [(((Dispatch.unlocklock__specific_post
                  House_appliances__houseappliances.__tag)
                 this__split_fields)
                this__attr__tag)
               this__split_fields___old].
        (((((Dispatch.unlocklock__specific_post
               House_appliances__houseappliances.__tag)
              this__split_fields)
             this__attr__tag)
            this__split_fields___old) ->
           (let temp___this_326 =
              { House_appliances__houseappliances.__split_fields =
                  this__split_fields___old ;
                House_appliances__houseappliances.attr__tag = this__attr__tag } in
            let temp___this_326 =
              { House_appliances__houseappliances.__split_fields =
                  this__split_fields ;
                House_appliances__houseappliances.attr__tag = this__attr__tag } in
            [@GP_Pretty_Ada:4077]
            ((((House_appliances__unlocked__rep.to_rep
                  ((House_appliances__houseappliances.__split_fields
                       { House_appliances__houseappliances.__split_fields =
                           this__split_fields ;
                         House_appliances__houseappliances.attr__tag =
                           this__attr__tag }).House_appliances__houseappliances.rec__house_appliances__houseappliances__statusunlocked))
                 = (0 : int)) /\
                ((House_appliances__locked__rep.to_rep
                    ((House_appliances__houseappliances.__split_fields
                         { House_appliances__houseappliances.__split_fields =
                             this__split_fields ;
                           House_appliances__houseappliances.attr__tag =
                             this__attr__tag }).House_appliances__houseappliances.rec__house_appliances__houseappliances__statuslocked))
                   = (1 : int))) \/
               (((House_appliances__unlocked__rep.to_rep
                    ((House_appliances__houseappliances.__split_fields
                         { House_appliances__houseappliances.__split_fields =
                             this__split_fields ;
                           House_appliances__houseappliances.attr__tag =
                             this__attr__tag }).House_appliances__houseappliances.rec__house_appliances__houseappliances__statusunlocked))
                   = (1 : int)) /\
                  ((House_appliances__locked__rep.to_rep
                      ((House_appliances__houseappliances.__split_fields
                           { House_appliances__houseappliances.__split_fields =
                               this__split_fields ;
                             House_appliances__houseappliances.attr__tag =
                               this__attr__tag }).House_appliances__houseappliances.rec__house_appliances__houseappliances__statuslocked))
                     = (0 : int))))))
end

module House__update__this___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module House_heating__heatingstatus___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_heating__heatingstatus as House_heating__heatingstatus
  
  predicate dynamic_invariant (temp___expr_177: int) (temp___is_init_173: bool) (temp___skip_constant_174: bool) (temp___do_toplevel_175: bool) (temp___do_typ_inv_176: bool) =
    if ((temp___is_init_173 = True) \/
          (House_heating__heatingstatus.first
             <= House_heating__heatingstatus.last)) then
      (((House_heating__heatingstatus.dynamic_property
           House_heating__heatingstatus.first)
          House_heating__heatingstatus.last)
         temp___expr_177)
    else true
  
  val dynamic_invariant (temp___expr_177: int) (temp___is_init_173: bool) (temp___skip_constant_174: bool) (temp___do_toplevel_175: bool) (temp___do_typ_inv_176: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_177 : int))
                      (temp___is_init_173 : bool))
                     (temp___skip_constant_174 : bool))
                    (temp___do_toplevel_175 : bool))
                   (temp___do_typ_inv_176 : bool)) }
  
  predicate default_initial_assumption (temp___expr_178: int) (temp___skip_top_level_179: bool) =
    true
  
  val default_initial_assumption (temp___expr_178: int) (temp___skip_top_level_179: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_178 : int))
                   (temp___skip_top_level_179 : bool)) }
end

module House_heating__temperature___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_heating__temperature as House_heating__temperature
  
  predicate dynamic_invariant (temp___expr_170: int) (temp___is_init_166: bool) (temp___skip_constant_167: bool) (temp___do_toplevel_168: bool) (temp___do_typ_inv_169: bool) =
    if ((temp___is_init_166 = True) \/
          (House_heating__temperature.first
             <= House_heating__temperature.last)) then
      (((House_heating__temperature.dynamic_property
           House_heating__temperature.first)
          House_heating__temperature.last)
         temp___expr_170)
    else true
  
  val dynamic_invariant (temp___expr_170: int) (temp___is_init_166: bool) (temp___skip_constant_167: bool) (temp___do_toplevel_168: bool) (temp___do_typ_inv_169: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_170 : int))
                      (temp___is_init_166 : bool))
                     (temp___skip_constant_167 : bool))
                    (temp___do_toplevel_168 : bool))
                   (temp___do_typ_inv_169 : bool)) }
  
  predicate default_initial_assumption (temp___expr_171: int) (temp___skip_top_level_172: bool) =
    true
  
  val default_initial_assumption (temp___expr_171: int) (temp___skip_top_level_172: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_171 : int))
                   (temp___skip_top_level_172 : bool)) }
end

module House_heating__createheating___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_heating__househeating as House_heating__househeating
  use House_heating__createheating as House_heating__createheating
  use House_heating__househeating___axiom as House_heating__househeating___axiom
  
  val createheating (__void_param: unit) : House_heating__househeating.househeating
    requires { true }
    ensures { (((result = (House_heating__createheating.createheating ())) /\
                  ((House_heating__createheating.createheating__function_guard
                      result)
                     ())) /\
                 (((((House_heating__househeating___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  scope Dispatch
    val createheating (attr__tag: int) (__void_param: unit) : House_heating__househeating.househeating
      requires { true }
      ensures { (((result
                     = ((House_heating__createheating.Dispatch.createheating
                           attr__tag)
                          ())) /\
                    (((House_heating__createheating.Dispatch.createheating__function_guard
                         result)
                        attr__tag)
                       ())) /\
                   (((((House_heating__househeating___axiom.dynamic_invariant
                          result)
                         True)
                        False)
                       True)
                      True)) }
    end
  
  axiom createheating__post_axiom:
    forall __void_param : unit
          [House_heating__createheating.createheating __void_param].
      let result = House_heating__createheating.createheating __void_param in
      if ((House_heating__createheating.createheating__function_guard result)
            __void_param) then
        ((true /\
            (((((House_heating__househeating___axiom.dynamic_invariant result)
                  True)
                 False)
                True)
               True)) /\
           ((House_heating__househeating.attr__tag result)
              = House_heating__househeating.__tag))
      else true
  
  axiom createheating__post__dispatch_axiom:
    forall attr__tag : int.
      forall __void_param : unit
            [(House_heating__createheating.Dispatch.createheating attr__tag)
               __void_param].
        let result =
          (House_heating__createheating.Dispatch.createheating attr__tag)
            __void_param in
        if (((House_heating__createheating.Dispatch.createheating__function_guard
                result)
               attr__tag)
              __void_param) then
          ((true /\
              (((((House_heating__househeating___axiom.dynamic_invariant
                     result)
                    True)
                   False)
                  True)
                 True)) /\
             ((House_heating__househeating.attr__tag result) = attr__tag))
        else true
  
  axiom house_heating__househeating__compat_axiom:
    forall __void_param : unit
          [(House_heating__createheating.Dispatch.createheating
              House_heating__househeating.__tag)
             __void_param].
      ((((House_heating__createheating.Dispatch.createheating__function_guard
            ((House_heating__createheating.Dispatch.createheating
                House_heating__househeating.__tag)
               __void_param))
           House_heating__househeating.__tag)
          __void_param) ->
         ((epsilon temp___result_250: House_heating__househeating.househeating.
             ((temp___result_250
                 = (House_heating__createheating.createheating __void_param)) /\
                ((House_heating__createheating.createheating__function_guard
                    temp___result_250)
                   __void_param)))
            = ((House_heating__createheating.Dispatch.createheating
                  House_heating__househeating.__tag)
                 __void_param)))
end

module House_exterior__exteriorstatus___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  
  predicate dynamic_invariant (temp___expr_193: int) (temp___is_init_189: bool) (temp___skip_constant_190: bool) (temp___do_toplevel_191: bool) (temp___do_typ_inv_192: bool) =
    if ((temp___is_init_189 = True) \/
          (House_exterior__exteriorstatus.first
             <= House_exterior__exteriorstatus.last)) then
      (((House_exterior__exteriorstatus.dynamic_property
           House_exterior__exteriorstatus.first)
          House_exterior__exteriorstatus.last)
         temp___expr_193)
    else true
  
  val dynamic_invariant (temp___expr_193: int) (temp___is_init_189: bool) (temp___skip_constant_190: bool) (temp___do_toplevel_191: bool) (temp___do_typ_inv_192: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_193 : int))
                      (temp___is_init_189 : bool))
                     (temp___skip_constant_190 : bool))
                    (temp___do_toplevel_191 : bool))
                   (temp___do_typ_inv_192 : bool)) }
  
  predicate default_initial_assumption (temp___expr_194: int) (temp___skip_top_level_195: bool) =
    true
  
  val default_initial_assumption (temp___expr_194: int) (temp___skip_top_level_195: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_194 : int))
                   (temp___skip_top_level_195 : bool)) }
end

module House_exterior__createexteriors___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_exterior__houseexterior as House_exterior__houseexterior
  use House_exterior__createexteriors as House_exterior__createexteriors
  use House_exterior__houseexterior___axiom as House_exterior__houseexterior___axiom
  
  val createexteriors (__void_param: unit) : House_exterior__houseexterior.houseexterior
    requires { true }
    ensures { (((result
                   = (House_exterior__createexteriors.createexteriors ())) /\
                  ((House_exterior__createexteriors.createexteriors__function_guard
                      result)
                     ())) /\
                 (((((House_exterior__houseexterior___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  scope Dispatch
    val createexteriors (attr__tag: int) (__void_param: unit) : House_exterior__houseexterior.houseexterior
      requires { true }
      ensures { (((result
                     = ((House_exterior__createexteriors.Dispatch.createexteriors
                           attr__tag)
                          ())) /\
                    (((House_exterior__createexteriors.Dispatch.createexteriors__function_guard
                         result)
                        attr__tag)
                       ())) /\
                   (((((House_exterior__houseexterior___axiom.dynamic_invariant
                          result)
                         True)
                        False)
                       True)
                      True)) }
    end
  
  axiom createexteriors__post_axiom:
    forall __void_param : unit
          [House_exterior__createexteriors.createexteriors __void_param].
      let result =
        House_exterior__createexteriors.createexteriors __void_param in
      if ((House_exterior__createexteriors.createexteriors__function_guard
             result)
            __void_param) then
        ((true /\
            (((((House_exterior__houseexterior___axiom.dynamic_invariant
                   result)
                  True)
                 False)
                True)
               True)) /\
           ((House_exterior__houseexterior.attr__tag result)
              = House_exterior__houseexterior.__tag))
      else true
  
  axiom createexteriors__post__dispatch_axiom:
    forall attr__tag : int.
      forall __void_param : unit
            [(House_exterior__createexteriors.Dispatch.createexteriors
                attr__tag)
               __void_param].
        let result =
          (House_exterior__createexteriors.Dispatch.createexteriors attr__tag)
            __void_param in
        if (((House_exterior__createexteriors.Dispatch.createexteriors__function_guard
                result)
               attr__tag)
              __void_param) then
          ((true /\
              (((((House_exterior__houseexterior___axiom.dynamic_invariant
                     result)
                    True)
                   False)
                  True)
                 True)) /\
             ((House_exterior__houseexterior.attr__tag result) = attr__tag))
        else true
  
  axiom house_exterior__houseexterior__compat_axiom:
    forall __void_param : unit
          [(House_exterior__createexteriors.Dispatch.createexteriors
              House_exterior__houseexterior.__tag)
             __void_param].
      ((((House_exterior__createexteriors.Dispatch.createexteriors__function_guard
            ((House_exterior__createexteriors.Dispatch.createexteriors
                House_exterior__houseexterior.__tag)
               __void_param))
           House_exterior__houseexterior.__tag)
          __void_param) ->
         ((epsilon temp___result_251: House_exterior__houseexterior.houseexterior.
             ((temp___result_251
                 = (House_exterior__createexteriors.createexteriors
                      __void_param)) /\
                ((House_exterior__createexteriors.createexteriors__function_guard
                    temp___result_251)
                   __void_param)))
            = ((House_exterior__createexteriors.Dispatch.createexteriors
                  House_exterior__houseexterior.__tag)
                 __void_param)))
end

module Clean_air__carbon___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Clean_air__carbon as Clean_air__carbon
  
  predicate dynamic_invariant (temp___expr_208: int) (temp___is_init_204: bool) (temp___skip_constant_205: bool) (temp___do_toplevel_206: bool) (temp___do_typ_inv_207: bool) =
    if ((temp___is_init_204 = True) \/
          (Clean_air__carbon.first <= Clean_air__carbon.last)) then
      (((Clean_air__carbon.dynamic_property Clean_air__carbon.first)
          Clean_air__carbon.last)
         temp___expr_208)
    else true
  
  val dynamic_invariant (temp___expr_208: int) (temp___is_init_204: bool) (temp___skip_constant_205: bool) (temp___do_toplevel_206: bool) (temp___do_typ_inv_207: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_208 : int))
                      (temp___is_init_204 : bool))
                     (temp___skip_constant_205 : bool))
                    (temp___do_toplevel_206 : bool))
                   (temp___do_typ_inv_207 : bool)) }
  
  predicate default_initial_assumption (temp___expr_209: int) (temp___skip_top_level_210: bool) =
    true
  
  val default_initial_assumption (temp___expr_209: int) (temp___skip_top_level_210: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_209 : int))
                   (temp___skip_top_level_210 : bool)) }
end

module Clean_air__aircon___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Clean_air__aircon as Clean_air__aircon
  
  predicate dynamic_invariant (temp___expr_215: int) (temp___is_init_211: bool) (temp___skip_constant_212: bool) (temp___do_toplevel_213: bool) (temp___do_typ_inv_214: bool) =
    if ((temp___is_init_211 = True) \/
          (Clean_air__aircon.first <= Clean_air__aircon.last)) then
      (((Clean_air__aircon.dynamic_property Clean_air__aircon.first)
          Clean_air__aircon.last)
         temp___expr_215)
    else true
  
  val dynamic_invariant (temp___expr_215: int) (temp___is_init_211: bool) (temp___skip_constant_212: bool) (temp___do_toplevel_213: bool) (temp___do_typ_inv_214: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_215 : int))
                      (temp___is_init_211 : bool))
                     (temp___skip_constant_212 : bool))
                    (temp___do_toplevel_213 : bool))
                   (temp___do_typ_inv_214 : bool)) }
  
  predicate default_initial_assumption (temp___expr_216: int) (temp___skip_top_level_217: bool) =
    true
  
  val default_initial_assumption (temp___expr_216: int) (temp___skip_top_level_217: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_216 : int))
                   (temp___skip_top_level_217 : bool)) }
end

module Clean_air__createaircon___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Clean_air__cleanair as Clean_air__cleanair
  use Clean_air__createaircon as Clean_air__createaircon
  use Clean_air__cleanair___axiom as Clean_air__cleanair___axiom
  
  val createaircon (__void_param: unit) : Clean_air__cleanair.cleanair
    requires { true }
    ensures { (((result = (Clean_air__createaircon.createaircon ())) /\
                  ((Clean_air__createaircon.createaircon__function_guard
                      result)
                     ())) /\
                 (((((Clean_air__cleanair___axiom.dynamic_invariant result)
                       True)
                      False)
                     True)
                    True)) }
  
  scope Dispatch
    val createaircon (attr__tag: int) (__void_param: unit) : Clean_air__cleanair.cleanair
      requires { true }
      ensures { (((result
                     = ((Clean_air__createaircon.Dispatch.createaircon
                           attr__tag)
                          ())) /\
                    (((Clean_air__createaircon.Dispatch.createaircon__function_guard
                         result)
                        attr__tag)
                       ())) /\
                   (((((Clean_air__cleanair___axiom.dynamic_invariant result)
                         True)
                        False)
                       True)
                      True)) }
    end
  
  axiom createaircon__post_axiom:
    forall __void_param : unit
          [Clean_air__createaircon.createaircon __void_param].
      let result = Clean_air__createaircon.createaircon __void_param in
      if ((Clean_air__createaircon.createaircon__function_guard result)
            __void_param) then
        ((true /\
            (((((Clean_air__cleanair___axiom.dynamic_invariant result) True)
                 False)
                True)
               True)) /\
           ((Clean_air__cleanair.attr__tag result)
              = Clean_air__cleanair.__tag))
      else true
  
  axiom createaircon__post__dispatch_axiom:
    forall attr__tag : int.
      forall __void_param : unit
            [(Clean_air__createaircon.Dispatch.createaircon attr__tag)
               __void_param].
        let result =
          (Clean_air__createaircon.Dispatch.createaircon attr__tag)
            __void_param in
        if (((Clean_air__createaircon.Dispatch.createaircon__function_guard
                result)
               attr__tag)
              __void_param) then
          ((true /\
              (((((Clean_air__cleanair___axiom.dynamic_invariant result) True)
                   False)
                  True)
                 True)) /\
             ((Clean_air__cleanair.attr__tag result) = attr__tag))
        else true
  
  axiom clean_air__cleanair__compat_axiom:
    forall __void_param : unit
          [(Clean_air__createaircon.Dispatch.createaircon
              Clean_air__cleanair.__tag)
             __void_param].
      ((((Clean_air__createaircon.Dispatch.createaircon__function_guard
            ((Clean_air__createaircon.Dispatch.createaircon
                Clean_air__cleanair.__tag)
               __void_param))
           Clean_air__cleanair.__tag)
          __void_param) ->
         ((epsilon temp___result_252: Clean_air__cleanair.cleanair.
             ((temp___result_252
                 = (Clean_air__createaircon.createaircon __void_param)) /\
                ((Clean_air__createaircon.createaircon__function_guard
                    temp___result_252)
                   __void_param)))
            = ((Clean_air__createaircon.Dispatch.createaircon
                  Clean_air__cleanair.__tag)
                 __void_param)))
end

module House_appliances__unlocked___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_appliances__unlocked as House_appliances__unlocked
  
  predicate dynamic_invariant (temp___expr_231: int) (temp___is_init_227: bool) (temp___skip_constant_228: bool) (temp___do_toplevel_229: bool) (temp___do_typ_inv_230: bool) =
    if ((temp___is_init_227 = True) \/
          (House_appliances__unlocked.first
             <= House_appliances__unlocked.last)) then
      (((House_appliances__unlocked.dynamic_property
           House_appliances__unlocked.first)
          House_appliances__unlocked.last)
         temp___expr_231)
    else true
  
  val dynamic_invariant (temp___expr_231: int) (temp___is_init_227: bool) (temp___skip_constant_228: bool) (temp___do_toplevel_229: bool) (temp___do_typ_inv_230: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_231 : int))
                      (temp___is_init_227 : bool))
                     (temp___skip_constant_228 : bool))
                    (temp___do_toplevel_229 : bool))
                   (temp___do_typ_inv_230 : bool)) }
  
  predicate default_initial_assumption (temp___expr_232: int) (temp___skip_top_level_233: bool) =
    true
  
  val default_initial_assumption (temp___expr_232: int) (temp___skip_top_level_233: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_232 : int))
                   (temp___skip_top_level_233 : bool)) }
end

module House_appliances__locked___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_appliances__locked as House_appliances__locked
  
  predicate dynamic_invariant (temp___expr_238: int) (temp___is_init_234: bool) (temp___skip_constant_235: bool) (temp___do_toplevel_236: bool) (temp___do_typ_inv_237: bool) =
    if ((temp___is_init_234 = True) \/
          (House_appliances__locked.first <= House_appliances__locked.last)) then
      (((House_appliances__locked.dynamic_property
           House_appliances__locked.first)
          House_appliances__locked.last)
         temp___expr_238)
    else true
  
  val dynamic_invariant (temp___expr_238: int) (temp___is_init_234: bool) (temp___skip_constant_235: bool) (temp___do_toplevel_236: bool) (temp___do_typ_inv_237: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_238 : int))
                      (temp___is_init_234 : bool))
                     (temp___skip_constant_235 : bool))
                    (temp___do_toplevel_236 : bool))
                   (temp___do_typ_inv_237 : bool)) }
  
  predicate default_initial_assumption (temp___expr_239: int) (temp___skip_top_level_240: bool) =
    true
  
  val default_initial_assumption (temp___expr_239: int) (temp___skip_top_level_240: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_239 : int))
                   (temp___skip_top_level_240 : bool)) }
end

module House_appliances__createfridge___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_appliances__houseappliances as House_appliances__houseappliances
  use House_appliances__createfridge as House_appliances__createfridge
  use House_appliances__houseappliances___axiom as House_appliances__houseappliances___axiom
  
  val createfridge (__void_param: unit) : House_appliances__houseappliances.houseappliances
    requires { true }
    ensures { (((result = (House_appliances__createfridge.createfridge ())) /\
                  ((House_appliances__createfridge.createfridge__function_guard
                      result)
                     ())) /\
                 (((((House_appliances__houseappliances___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  scope Dispatch
    val createfridge (attr__tag: int) (__void_param: unit) : House_appliances__houseappliances.houseappliances
      requires { true }
      ensures { (((result
                     = ((House_appliances__createfridge.Dispatch.createfridge
                           attr__tag)
                          ())) /\
                    (((House_appliances__createfridge.Dispatch.createfridge__function_guard
                         result)
                        attr__tag)
                       ())) /\
                   (((((House_appliances__houseappliances___axiom.dynamic_invariant
                          result)
                         True)
                        False)
                       True)
                      True)) }
    end
  
  axiom createfridge__post_axiom:
    forall __void_param : unit
          [House_appliances__createfridge.createfridge __void_param].
      let result = House_appliances__createfridge.createfridge __void_param in
      if ((House_appliances__createfridge.createfridge__function_guard result)
            __void_param) then
        ((true /\
            (((((House_appliances__houseappliances___axiom.dynamic_invariant
                   result)
                  True)
                 False)
                True)
               True)) /\
           ((House_appliances__houseappliances.attr__tag result)
              = House_appliances__houseappliances.__tag))
      else true
  
  axiom createfridge__post__dispatch_axiom:
    forall attr__tag : int.
      forall __void_param : unit
            [(House_appliances__createfridge.Dispatch.createfridge attr__tag)
               __void_param].
        let result =
          (House_appliances__createfridge.Dispatch.createfridge attr__tag)
            __void_param in
        if (((House_appliances__createfridge.Dispatch.createfridge__function_guard
                result)
               attr__tag)
              __void_param) then
          ((true /\
              (((((House_appliances__houseappliances___axiom.dynamic_invariant
                     result)
                    True)
                   False)
                  True)
                 True)) /\
             ((House_appliances__houseappliances.attr__tag result)
                = attr__tag))
        else true
  
  axiom house_appliances__houseappliances__compat_axiom:
    forall __void_param : unit
          [(House_appliances__createfridge.Dispatch.createfridge
              House_appliances__houseappliances.__tag)
             __void_param].
      ((((House_appliances__createfridge.Dispatch.createfridge__function_guard
            ((House_appliances__createfridge.Dispatch.createfridge
                House_appliances__houseappliances.__tag)
               __void_param))
           House_appliances__houseappliances.__tag)
          __void_param) ->
         ((epsilon temp___result_253: House_appliances__houseappliances.houseappliances.
             ((temp___result_253
                 = (House_appliances__createfridge.createfridge __void_param)) /\
                ((House_appliances__createfridge.createfridge__function_guard
                    temp___result_253)
                   __void_param)))
            = ((House_appliances__createfridge.Dispatch.createfridge
                  House_appliances__houseappliances.__tag)
                 __void_param)))
end

module House_heating__ThouseheatingC___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_heating__househeating as House_heating__househeating
  
  predicate dynamic_invariant (temp___expr_292: House_heating__househeating.househeating) (temp___is_init_288: bool) (temp___skip_constant_289: bool) (temp___do_toplevel_290: bool) (temp___do_typ_inv_291: bool) =
    true
  
  val dynamic_invariant (temp___expr_292: House_heating__househeating.househeating) (temp___is_init_288: bool) (temp___skip_constant_289: bool) (temp___do_toplevel_290: bool) (temp___do_typ_inv_291: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_292 :
                          House_heating__househeating.househeating))
                      (temp___is_init_288 : bool))
                     (temp___skip_constant_289 : bool))
                    (temp___do_toplevel_290 : bool))
                   (temp___do_typ_inv_291 : bool)) }
end

module House_exterior__ThouseexteriorC___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_exterior__houseexterior as House_exterior__houseexterior
  
  predicate dynamic_invariant (temp___expr_306: House_exterior__houseexterior.houseexterior) (temp___is_init_302: bool) (temp___skip_constant_303: bool) (temp___do_toplevel_304: bool) (temp___do_typ_inv_305: bool) =
    true
  
  val dynamic_invariant (temp___expr_306: House_exterior__houseexterior.houseexterior) (temp___is_init_302: bool) (temp___skip_constant_303: bool) (temp___do_toplevel_304: bool) (temp___do_typ_inv_305: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_306 :
                          House_exterior__houseexterior.houseexterior))
                      (temp___is_init_302 : bool))
                     (temp___skip_constant_303 : bool))
                    (temp___do_toplevel_304 : bool))
                   (temp___do_typ_inv_305 : bool)) }
end

module Clean_air__TcleanairC___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Clean_air__cleanair as Clean_air__cleanair
  
  predicate dynamic_invariant (temp___expr_313: Clean_air__cleanair.cleanair) (temp___is_init_309: bool) (temp___skip_constant_310: bool) (temp___do_toplevel_311: bool) (temp___do_typ_inv_312: bool) =
    true
  
  val dynamic_invariant (temp___expr_313: Clean_air__cleanair.cleanair) (temp___is_init_309: bool) (temp___skip_constant_310: bool) (temp___do_toplevel_311: bool) (temp___do_typ_inv_312: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_313 : Clean_air__cleanair.cleanair))
                      (temp___is_init_309 : bool))
                     (temp___skip_constant_310 : bool))
                    (temp___do_toplevel_311 : bool))
                   (temp___do_typ_inv_312 : bool)) }
end

module House_appliances__ThouseappliancesC___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_appliances__houseappliances as House_appliances__houseappliances
  
  predicate dynamic_invariant (temp___expr_325: House_appliances__houseappliances.houseappliances) (temp___is_init_321: bool) (temp___skip_constant_322: bool) (temp___do_toplevel_323: bool) (temp___do_typ_inv_324: bool) =
    true
  
  val dynamic_invariant (temp___expr_325: House_appliances__houseappliances.houseappliances) (temp___is_init_321: bool) (temp___skip_constant_322: bool) (temp___do_toplevel_323: bool) (temp___do_typ_inv_324: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_325 :
                          House_appliances__houseappliances.houseappliances))
                      (temp___is_init_321 : bool))
                     (temp___skip_constant_322 : bool))
                    (temp___do_toplevel_323 : bool))
                   (temp___do_typ_inv_324 : bool)) }
end

module House__update__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Boolean as Boolean
  use House_heating__househeating as House_heating__househeating
  use House_exterior__houseexterior as House_exterior__houseexterior
  use Clean_air__cleanair as Clean_air__cleanair
  use House_appliances__houseappliances as House_appliances__houseappliances
  use House__house as House__house
  use House__update__this as House__update__this
  use House__house___axiom as House__house___axiom
  use House_heating__update___axiom as House_heating__update___axiom
  use House_exterior__updatelocked___axiom as House_exterior__updatelocked___axiom
  use House_exterior__updateunlocked___axiom as House_exterior__updateunlocked___axiom
  use Clean_air__update___axiom as Clean_air__update___axiom
  use House_appliances__unlocklock___axiom as House_appliances__unlocklock___axiom
  use House_heating__temperature as House_heating__temperature
  use House_heating__temperature__rep as House_heating__temperature__rep
  use House_heating__heatingstatus as House_heating__heatingstatus
  use House_heating__heatingstatus__rep as House_heating__heatingstatus__rep
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  use House_exterior__exteriorstatus__rep as House_exterior__exteriorstatus__rep
  use Clean_air__carbon as Clean_air__carbon
  use Clean_air__carbon__rep as Clean_air__carbon__rep
  use Clean_air__aircon as Clean_air__aircon
  use Clean_air__aircon__rep as Clean_air__aircon__rep
  use House_appliances__unlocked as House_appliances__unlocked
  use House_appliances__unlocked__rep as House_appliances__unlocked__rep
  use House_appliances__locked as House_appliances__locked
  use House_appliances__locked__rep as House_appliances__locked__rep
  use House__house___axiom as House__house___axiom
  use House__update__this___axiom as House__update__this___axiom
  use House_heating__heatingstatus___axiom as House_heating__heatingstatus___axiom
  use House_heating__temperature___axiom as House_heating__temperature___axiom
  use House_heating__househeating___axiom as House_heating__househeating___axiom
  use House_heating__update___axiom as House_heating__update___axiom
  use House_heating__createheating___axiom as House_heating__createheating___axiom
  use House_exterior__exteriorstatus___axiom as House_exterior__exteriorstatus___axiom
  use House_exterior__houseexterior___axiom as House_exterior__houseexterior___axiom
  use House_exterior__updatelocked___axiom as House_exterior__updatelocked___axiom
  use House_exterior__updateunlocked___axiom as House_exterior__updateunlocked___axiom
  use House_exterior__createexteriors___axiom as House_exterior__createexteriors___axiom
  use Clean_air__carbon___axiom as Clean_air__carbon___axiom
  use Clean_air__aircon___axiom as Clean_air__aircon___axiom
  use Clean_air__cleanair___axiom as Clean_air__cleanair___axiom
  use Clean_air__update___axiom as Clean_air__update___axiom
  use Clean_air__createaircon___axiom as Clean_air__createaircon___axiom
  use House_appliances__unlocked___axiom as House_appliances__unlocked___axiom
  use House_appliances__locked___axiom as House_appliances__locked___axiom
  use House_appliances__houseappliances___axiom as House_appliances__houseappliances___axiom
  use House_appliances__unlocklock___axiom as House_appliances__unlocklock___axiom
  use House_appliances__createfridge___axiom as House_appliances__createfridge___axiom
  use House_heating__ThouseheatingC___axiom as House_heating__ThouseheatingC___axiom
  use House_exterior__ThouseexteriorC___axiom as House_exterior__ThouseexteriorC___axiom
  use Clean_air__TcleanairC___axiom as Clean_air__TcleanairC___axiom
  use House_appliances__ThouseappliancesC___axiom as House_appliances__ThouseappliancesC___axiom
  
  let def (__void_param : unit)
    requires { [#"house.ads" 20 0 0] true }
    ensures { [#"house.ads" 20 0 0]
              [#"house.ads" 33 0 0]
              [@comment:      ((This.heating.status = On and This.exterior.status = Shut) or        ^ house.ads:33:7:VC_POSTCONDITION]
              [@GP_Reason:VC_POSTCONDITION]
              [@model_vc_post]
              [@GP_Shape:pragargs__and]
              [@GP_Id:5]
              [@GP_Sloc:house.ads:33:7]
              (([@GP_Pretty_Ada:1066]
                [@GP_Sloc:house.ads:33:7]
                ((((House_heating__heatingstatus__rep.to_rep
                      ((House_heating__househeating.__split_fields
                           ((House__house.__split_fields
                                { House__house.__split_fields =
                                    (House__house.__split_fields__content
                                        House__update__this.this__split_fields) ;
                                  House__house.attr__tag =
                                    House__update__this.this__attr__tag }).
                              House__house.rec__house__house__heating)).
                         House_heating__househeating.rec__house_heating__househeating__status))
                     = (0 : int)) /\
                    ((House_exterior__exteriorstatus__rep.to_rep
                        ((House_exterior__houseexterior.__split_fields
                             ((House__house.__split_fields
                                  { House__house.__split_fields =
                                      (House__house.__split_fields__content
                                          House__update__this.this__split_fields) ;
                                    House__house.attr__tag =
                                      House__update__this.this__attr__tag }).
                                House__house.rec__house__house__exterior)).
                           House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
                       = (1 : int))) \/
                   (((House_heating__heatingstatus__rep.to_rep
                        ((House_heating__househeating.__split_fields
                             ((House__house.__split_fields
                                  { House__house.__split_fields =
                                      (House__house.__split_fields__content
                                          House__update__this.this__split_fields) ;
                                    House__house.attr__tag =
                                      House__update__this.this__attr__tag }).
                                House__house.rec__house__house__heating)).
                           House_heating__househeating.rec__house_heating__househeating__status))
                       = (1 : int)) /\
                      ((House_exterior__exteriorstatus__rep.to_rep
                          ((House_exterior__houseexterior.__split_fields
                               ((House__house.__split_fields
                                    { House__house.__split_fields =
                                        (House__house.__split_fields__content
                                            House__update__this.this__split_fields) ;
                                      House__house.attr__tag =
                                        House__update__this.this__attr__tag }).
                                  House__house.rec__house__house__exterior)).
                             House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
                         = (0 : int))))) /\
                 ([@GP_Pretty_Ada:1089]
                  [@GP_Sloc:house.ads:36:6]
                  (let temp___352 =
                     Clean_air__carbon__rep.to_rep
                       ((Clean_air__cleanair.__split_fields
                            ((House__house.__split_fields
                                 { House__house.__split_fields =
                                     (House__house.__split_fields__content
                                         House__update__this.this__split_fields) ;
                                   House__house.attr__tag =
                                     House__update__this.this__attr__tag }).
                               House__house.rec__house__house__air)).
                          Clean_air__cleanair.rec__clean_air__cleanair__carb) in
                   (((0 : int) <= temp___352) /\ (temp___352 <= (8 : int)))))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram house.ads:20]
      ());
     assume {
       ((((House__house___axiom.dynamic_invariant
             { House__house.__split_fields =
                 (House__house.__split_fields__content
                     House__update__this.this__split_fields) ;
               House__house.attr__tag = House__update__this.this__attr__tag })
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram house.ads:20]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram house.ads:20]
      ());
     ([@GNAT-comment:Assume Pre of the subprogram house.ads:20] ());
     assume {
       ((((((([@GP_Pretty_Ada:993]
              (let temp___345 =
                 House_heating__temperature__rep.to_rep
                   ((House_heating__househeating.__split_fields
                        ((House__house.__split_fields
                             { House__house.__split_fields =
                                 (House__house.__split_fields__content
                                     House__update__this.this__split_fields) ;
                               House__house.attr__tag =
                                 House__update__this.this__attr__tag }).
                           House__house.rec__house__house__heating)).
                      House_heating__househeating.rec__house_heating__househeating__temp) in
               (((17 : int) <= temp___345) /\ (temp___345 <= (19 : int))))) /\
               ([@GP_Pretty_Ada:1002]
                (let temp___346 =
                   House_heating__heatingstatus__rep.to_rep
                     ((House_heating__househeating.__split_fields
                          ((House__house.__split_fields
                               { House__house.__split_fields =
                                   (House__house.__split_fields__content
                                       House__update__this.this__split_fields) ;
                                 House__house.attr__tag =
                                   House__update__this.this__attr__tag }).
                             House__house.rec__house__house__heating)).
                        House_heating__househeating.rec__house_heating__househeating__status) in
                 (((0 : int) <= temp___346) /\ (temp___346 <= (1 : int)))))) /\
              ([@GP_Pretty_Ada:1011]
               (let temp___347 =
                  House_exterior__exteriorstatus__rep.to_rep
                    ((House_exterior__houseexterior.__split_fields
                         ((House__house.__split_fields
                              { House__house.__split_fields =
                                  (House__house.__split_fields__content
                                      House__update__this.this__split_fields) ;
                                House__house.attr__tag =
                                  House__update__this.this__attr__tag }).
                            House__house.rec__house__house__exterior)).
                       House_exterior__houseexterior.rec__house_exterior__houseexterior__status) in
                (((0 : int) <= temp___347) /\ (temp___347 <= (1 : int)))))) /\
             ([@GP_Pretty_Ada:1020]
              (let temp___348 =
                 House_appliances__unlocked__rep.to_rep
                   ((House_appliances__houseappliances.__split_fields
                        ((House__house.__split_fields
                             { House__house.__split_fields =
                                 (House__house.__split_fields__content
                                     House__update__this.this__split_fields) ;
                               House__house.attr__tag =
                                 House__update__this.this__attr__tag }).
                           House__house.rec__house__house__appliances)).
                      House_appliances__houseappliances.rec__house_appliances__houseappliances__statusunlocked) in
               (((0 : int) <= temp___348) /\ (temp___348 <= (1 : int)))))) /\
            ([@GP_Pretty_Ada:1029]
             (let temp___349 =
                House_appliances__locked__rep.to_rep
                  ((House_appliances__houseappliances.__split_fields
                       ((House__house.__split_fields
                            { House__house.__split_fields =
                                (House__house.__split_fields__content
                                    House__update__this.this__split_fields) ;
                              House__house.attr__tag =
                                House__update__this.this__attr__tag }).
                          House__house.rec__house__house__appliances)).
                     House_appliances__houseappliances.rec__house_appliances__houseappliances__statuslocked) in
              (((0 : int) <= temp___349) /\ (temp___349 <= (1 : int)))))) /\
           ([@GP_Pretty_Ada:1038]
            (let temp___350 =
               Clean_air__carbon__rep.to_rep
                 ((Clean_air__cleanair.__split_fields
                      ((House__house.__split_fields
                           { House__house.__split_fields =
                               (House__house.__split_fields__content
                                   House__update__this.this__split_fields) ;
                             House__house.attr__tag =
                               House__update__this.this__attr__tag }).
                         House__house.rec__house__house__air)).Clean_air__cleanair.rec__clean_air__cleanair__carb) in
             (((0 : int) <= temp___350) /\ (temp___350 <= (8 : int)))))) /\
          ([@GP_Pretty_Ada:1047]
           (let temp___351 =
              Clean_air__aircon__rep.to_rep
                ((Clean_air__cleanair.__split_fields
                     ((House__house.__split_fields
                          { House__house.__split_fields =
                              (House__house.__split_fields__content
                                  House__update__this.this__split_fields) ;
                            House__house.attr__tag =
                              House__update__this.this__attr__tag }).
                        House__house.rec__house__house__air)).Clean_air__cleanair.rec__clean_air__cleanair__status) in
            (((0 : int) <= temp___351) /\ (temp___351 <= (1 : int)))))) };
     (try
        ([@GP_Sloc:house.adb:14:19] [#"house.adb" 14 0 0] ());
        ([@GP_Sloc:house.adb:14:19]
         [#"house.adb" 14 0 0]
         (let temp___compl_329 =
            (House__house.__split_fields
                { House__house.__split_fields =
                    (House__house.__split_fields__content
                        House__update__this.this__split_fields) ;
                  House__house.attr__tag =
                    House__update__this.this__attr__tag }).House__house.rec__house__house__heating in
          [#"house.adb" 14 0 0]
          (let this__split_fields =
             { House_heating__househeating.__split_fields__content =
                 (House_heating__househeating.__split_fields temp___compl_329) } in
           ([#"house.adb" 14 0 0] (val _f : unit in
                                   _f));
           ([#"house.adb" 14 0 0]
            [@GP_Reason:VC_PRECONDITION]
            [@GP_Sloc:house.adb:14:19]
            [@comment:      This.heating.Update;                   ^ house.adb:14:19:VC_PRECONDITION]
            [@vc:annotation]
            [@GP_Id:0]
            [@GP_Shape:call_update]
            ((House_heating__update___axiom.update this__split_fields)
               (House_heating__househeating.attr__tag temp___compl_329)));
           (let temp___331 =
              let temp___330 =
                { House__house.__split_fields =
                    (House__house.__split_fields__content
                        House__update__this.this__split_fields) ;
                  House__house.attr__tag =
                    House__update__this.this__attr__tag } in
              (begin
                 ensures { true }
                 let _ =
                   let _ =
                     (House__house.__split_fields temp___330).House__house.rec__house__house__heating in
                   () in
                 ()
               end);
              ({ temp___330 with
                 House__house.__split_fields =
                   ({ (House__house.__split_fields temp___330) with
                      House__house.rec__house__house__heating =
                        ({ { House_heating__househeating.__split_fields =
                               (House_heating__househeating.__split_fields__content
                                   this__split_fields) ;
                             House_heating__househeating.attr__tag =
                               (House_heating__househeating.attr__tag
                                  temp___compl_329) } with
                           House_heating__househeating.attr__tag =
                             (House_heating__househeating.attr__tag
                                ((House__house.__split_fields
                                     { House__house.__split_fields =
                                         (House__house.__split_fields__content
                                             House__update__this.this__split_fields) ;
                                       House__house.attr__tag =
                                         House__update__this.this__attr__tag }).
                                   House__house.rec__house__house__heating)) }) }) }) in
            House__update__this.this__split_fields.House__house.__split_fields__content <-
              (House__house.__split_fields temp___331)))));
        ([@GP_Sloc:house.adb:17:7]
         [#"house.adb" 17 0 0]
         (if (([#"house.adb" 17 0 0]
               [#"house.adb" 17 0 0]
               (([@branch_id=858] Main.spark__branch).bool__content <-
                  ((House_heating__heatingstatus__rep.to_rep
                      ((House_heating__househeating.__split_fields
                           ((House__house.__split_fields
                                { House__house.__split_fields =
                                    (House__house.__split_fields__content
                                        House__update__this.this__split_fields) ;
                                  House__house.attr__tag =
                                    House__update__this.this__attr__tag }).
                              House__house.rec__house__house__heating)).
                         House_heating__househeating.rec__house_heating__househeating__status))
                     = (0 : int))));
              (([@branch_id=858] Main.spark__branch).bool__content)) then
            ([@GP_Sloc:house.adb:19:10]
             [#"house.adb" 19 0 0]
             (if (([#"house.adb" 19 0 0]
                   [#"house.adb" 19 0 0]
                   (([@branch_id=866] Main.spark__branch).bool__content <-
                      ((House_exterior__exteriorstatus__rep.to_rep
                          ((House_exterior__houseexterior.__split_fields
                               ((House__house.__split_fields
                                    { House__house.__split_fields =
                                        (House__house.__split_fields__content
                                            House__update__this.this__split_fields) ;
                                      House__house.attr__tag =
                                        House__update__this.this__attr__tag }).
                                  House__house.rec__house__house__exterior)).
                             House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
                         = (0 : int))));
                  (([@branch_id=866] Main.spark__branch).bool__content)) then
                (([@GP_Sloc:house.adb:20:13] [#"house.adb" 20 0 0] ());
                 ([@GP_Sloc:house.adb:20:13]
                  [#"house.adb" 20 0 0]
                  (let temp___compl_332 =
                     (House__house.__split_fields
                         { House__house.__split_fields =
                             (House__house.__split_fields__content
                                 House__update__this.this__split_fields) ;
                           House__house.attr__tag =
                             House__update__this.this__attr__tag }).House__house.rec__house__house__exterior in
                   [#"house.adb" 20 0 0]
                   (let this__split_fields =
                      { House_exterior__houseexterior.__split_fields__content =
                          (House_exterior__houseexterior.__split_fields
                              temp___compl_332) } in
                    ([#"house.adb" 20 0 0] (val _f : unit in
                                            _f));
                    ([#"house.adb" 20 0 0]
                     [@GP_Reason:VC_PRECONDITION]
                     [@vc:annotation]
                     [@GP_Sloc:house.adb:20:13]
                     [@GP_Shape:if__if__call_updatelocked]
                     [@comment:            UpdateLocked(This.exterior);             ^ house.adb:20:13:VC_PRECONDITION]
                     [@GP_Id:1]
                     ((House_exterior__updatelocked___axiom.updatelocked
                         this__split_fields)
                        (House_exterior__houseexterior.attr__tag
                           temp___compl_332)));
                    (let temp___334 =
                       let temp___333 =
                         { House__house.__split_fields =
                             (House__house.__split_fields__content
                                 House__update__this.this__split_fields) ;
                           House__house.attr__tag =
                             House__update__this.this__attr__tag } in
                       (begin
                          ensures { true }
                          let _ =
                            let _ =
                              (House__house.__split_fields temp___333).
                                House__house.rec__house__house__exterior in
                            () in
                          ()
                        end);
                       ({ temp___333 with
                          House__house.__split_fields =
                            ({ (House__house.__split_fields temp___333) with
                               House__house.rec__house__house__exterior =
                                 ({ { House_exterior__houseexterior.__split_fields =
                                        (House_exterior__houseexterior.__split_fields__content
                                            this__split_fields) ;
                                      House_exterior__houseexterior.attr__tag =
                                        (House_exterior__houseexterior.attr__tag
                                           temp___compl_332) } with
                                    House_exterior__houseexterior.attr__tag =
                                      (House_exterior__houseexterior.attr__tag
                                         ((House__house.__split_fields
                                              { House__house.__split_fields =
                                                  (House__house.__split_fields__content
                                                      House__update__this.this__split_fields) ;
                                                House__house.attr__tag =
                                                  House__update__this.this__attr__tag }).
                                            House__house.rec__house__house__exterior)) }) }) }) in
                     House__update__this.this__split_fields.House__house.__split_fields__content <-
                       (House__house.__split_fields temp___334))))))
              else ()))
          else
            ([@GP_Sloc:house.adb:22:7]
             (if (([#"house.adb" 22 0 0]
                   [#"house.adb" 22 0 0]
                   (([@branch_id=880] Main.spark__branch).bool__content <-
                      ((House_heating__heatingstatus__rep.to_rep
                          ((House_heating__househeating.__split_fields
                               ((House__house.__split_fields
                                    { House__house.__split_fields =
                                        (House__house.__split_fields__content
                                            House__update__this.this__split_fields) ;
                                      House__house.attr__tag =
                                        House__update__this.this__attr__tag }).
                                  House__house.rec__house__house__heating)).
                             House_heating__househeating.rec__house_heating__househeating__status))
                         = (1 : int))));
                  (([@branch_id=880] Main.spark__branch).bool__content)) then
                ([@GP_Sloc:house.adb:24:10]
                 [#"house.adb" 24 0 0]
                 (if (([#"house.adb" 24 0 0]
                       [#"house.adb" 24 0 0]
                       (([@branch_id=887] Main.spark__branch).bool__content <-
                          ((House_exterior__exteriorstatus__rep.to_rep
                              ((House_exterior__houseexterior.__split_fields
                                   ((House__house.__split_fields
                                        { House__house.__split_fields =
                                            (House__house.__split_fields__content
                                                House__update__this.this__split_fields) ;
                                          House__house.attr__tag =
                                            House__update__this.this__attr__tag }).
                                      House__house.rec__house__house__exterior)).
                                 House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
                             = (1 : int))));
                      (([@branch_id=887] Main.spark__branch).bool__content)) then
                    (([@GP_Sloc:house.adb:25:13] [#"house.adb" 25 0 0] ());
                     ([@GP_Sloc:house.adb:25:13]
                      [#"house.adb" 25 0 0]
                      (let temp___compl_335 =
                         (House__house.__split_fields
                             { House__house.__split_fields =
                                 (House__house.__split_fields__content
                                     House__update__this.this__split_fields) ;
                               House__house.attr__tag =
                                 House__update__this.this__attr__tag }).
                           House__house.rec__house__house__exterior in
                       [#"house.adb" 25 0 0]
                       (let this__split_fields =
                          { House_exterior__houseexterior.__split_fields__content =
                              (House_exterior__houseexterior.__split_fields
                                  temp___compl_335) } in
                        ([#"house.adb" 25 0 0] (val _f : unit in
                                                _f));
                        ([#"house.adb" 25 0 0]
                         [@comment:            UpdateUnlocked(This.exterior);             ^ house.adb:25:13:VC_PRECONDITION]
                         [@GP_Reason:VC_PRECONDITION]
                         [@vc:annotation]
                         [@GP_Sloc:house.adb:25:13]
                         [@GP_Shape:if__if__call_updateunlocked]
                         [@GP_Id:2]
                         ((House_exterior__updateunlocked___axiom.updateunlocked
                             this__split_fields)
                            (House_exterior__houseexterior.attr__tag
                               temp___compl_335)));
                        (let temp___337 =
                           let temp___336 =
                             { House__house.__split_fields =
                                 (House__house.__split_fields__content
                                     House__update__this.this__split_fields) ;
                               House__house.attr__tag =
                                 House__update__this.this__attr__tag } in
                           (begin
                              ensures { true }
                              let _ =
                                let _ =
                                  (House__house.__split_fields temp___336).
                                    House__house.rec__house__house__exterior in
                                () in
                              ()
                            end);
                           ({ temp___336 with
                              House__house.__split_fields =
                                ({ (House__house.__split_fields temp___336) with
                                   House__house.rec__house__house__exterior =
                                     ({ { House_exterior__houseexterior.__split_fields =
                                            (House_exterior__houseexterior.__split_fields__content
                                                this__split_fields) ;
                                          House_exterior__houseexterior.attr__tag =
                                            (House_exterior__houseexterior.attr__tag
                                               temp___compl_335) } with
                                        House_exterior__houseexterior.attr__tag =
                                          (House_exterior__houseexterior.attr__tag
                                             ((House__house.__split_fields
                                                  { House__house.__split_fields =
                                                      (House__house.__split_fields__content
                                                          House__update__this.this__split_fields) ;
                                                    House__house.attr__tag =
                                                      House__update__this.this__attr__tag }).
                                                House__house.rec__house__house__exterior)) }) }) }) in
                         House__update__this.this__split_fields.House__house.__split_fields__content <-
                           (House__house.__split_fields temp___337))))))
                  else ()))
              else ()))));
        ([@GP_Sloc:house.adb:29:15] [#"house.adb" 29 0 0] ());
        ([@GP_Sloc:house.adb:29:15]
         [#"house.adb" 29 0 0]
         (let temp___compl_338 =
            (House__house.__split_fields
                { House__house.__split_fields =
                    (House__house.__split_fields__content
                        House__update__this.this__split_fields) ;
                  House__house.attr__tag =
                    House__update__this.this__attr__tag }).House__house.rec__house__house__air in
          [#"house.adb" 29 0 0]
          (let this__split_fields =
             { Clean_air__cleanair.__split_fields__content =
                 (Clean_air__cleanair.__split_fields temp___compl_338) } in
           ([#"house.adb" 29 0 0] (val _f : unit in
                                   _f));
           ([#"house.adb" 29 0 0]
            [@GP_Sloc:house.adb:29:15]
            [@GP_Reason:VC_PRECONDITION]
            [@vc:annotation]
            [@comment:      This.air.Update;               ^ house.adb:29:15:VC_PRECONDITION]
            [@GP_Id:3]
            [@GP_Shape:call_update]
            ((Clean_air__update___axiom.update this__split_fields)
               (Clean_air__cleanair.attr__tag temp___compl_338)));
           (let temp___340 =
              let temp___339 =
                { House__house.__split_fields =
                    (House__house.__split_fields__content
                        House__update__this.this__split_fields) ;
                  House__house.attr__tag =
                    House__update__this.this__attr__tag } in
              (begin
                 ensures { true }
                 let _ =
                   let _ =
                     (House__house.__split_fields temp___339).House__house.rec__house__house__air in
                   () in
                 ()
               end);
              ({ temp___339 with
                 House__house.__split_fields =
                   ({ (House__house.__split_fields temp___339) with
                      House__house.rec__house__house__air =
                        ({ { Clean_air__cleanair.__split_fields =
                               (Clean_air__cleanair.__split_fields__content
                                   this__split_fields) ;
                             Clean_air__cleanair.attr__tag =
                               (Clean_air__cleanair.attr__tag
                                  temp___compl_338) } with
                           Clean_air__cleanair.attr__tag =
                             (Clean_air__cleanair.attr__tag
                                ((House__house.__split_fields
                                     { House__house.__split_fields =
                                         (House__house.__split_fields__content
                                             House__update__this.this__split_fields) ;
                                       House__house.attr__tag =
                                         House__update__this.this__attr__tag }).
                                   House__house.rec__house__house__air)) }) }) }) in
            House__update__this.this__split_fields.House__house.__split_fields__content <-
              (House__house.__split_fields temp___340)))));
        ([@GP_Sloc:house.adb:30:22] [#"house.adb" 30 0 0] ());
        ([@GP_Sloc:house.adb:30:22]
         [#"house.adb" 30 0 0]
         (let temp___compl_341 =
            (House__house.__split_fields
                { House__house.__split_fields =
                    (House__house.__split_fields__content
                        House__update__this.this__split_fields) ;
                  House__house.attr__tag =
                    House__update__this.this__attr__tag }).House__house.rec__house__house__appliances in
          [#"house.adb" 30 0 0]
          (let this__split_fields =
             { House_appliances__houseappliances.__split_fields__content =
                 (House_appliances__houseappliances.__split_fields
                     temp___compl_341) } in
           ([#"house.adb" 30 0 0] (val _f : unit in
                                   _f));
           ([#"house.adb" 30 0 0]
            [@GP_Reason:VC_PRECONDITION]
            [@comment:      This.appliances.UnlockLock;                      ^ house.adb:30:22:VC_PRECONDITION]
            [@GP_Sloc:house.adb:30:22]
            [@vc:annotation]
            [@GP_Shape:call_unlocklock]
            [@GP_Id:4]
            ((House_appliances__unlocklock___axiom.unlocklock
                this__split_fields)
               (House_appliances__houseappliances.attr__tag temp___compl_341)));
           (let temp___343 =
              let temp___342 =
                { House__house.__split_fields =
                    (House__house.__split_fields__content
                        House__update__this.this__split_fields) ;
                  House__house.attr__tag =
                    House__update__this.this__attr__tag } in
              (begin
                 ensures { true }
                 let _ =
                   let _ =
                     (House__house.__split_fields temp___342).House__house.rec__house__house__appliances in
                   () in
                 ()
               end);
              ({ temp___342 with
                 House__house.__split_fields =
                   ({ (House__house.__split_fields temp___342) with
                      House__house.rec__house__house__appliances =
                        ({ { House_appliances__houseappliances.__split_fields =
                               (House_appliances__houseappliances.__split_fields__content
                                   this__split_fields) ;
                             House_appliances__houseappliances.attr__tag =
                               (House_appliances__houseappliances.attr__tag
                                  temp___compl_341) } with
                           House_appliances__houseappliances.attr__tag =
                             (House_appliances__houseappliances.attr__tag
                                ((House__house.__split_fields
                                     { House__house.__split_fields =
                                         (House__house.__split_fields__content
                                             House__update__this.this__split_fields) ;
                                       House__house.attr__tag =
                                         House__update__this.this__attr__tag }).
                                   House__house.rec__house__house__appliances)) }) }) }) in
            House__update__this.this__split_fields.House__house.__split_fields__content <-
              (House__house.__split_fields temp___343)))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            (Boolean.andb
               ((Boolean.orb
                   ((Boolean.andb
                       ((House_heating__heatingstatus__rep.to_rep
                           ((House_heating__househeating.__split_fields
                                ((House__house.__split_fields
                                     { House__house.__split_fields =
                                         (House__house.__split_fields__content
                                             House__update__this.this__split_fields) ;
                                       House__house.attr__tag =
                                         House__update__this.this__attr__tag }).
                                   House__house.rec__house__house__heating)).
                              House_heating__househeating.rec__house_heating__househeating__status))
                          = (0 : int)))
                      ((House_exterior__exteriorstatus__rep.to_rep
                          ((House_exterior__houseexterior.__split_fields
                               ((House__house.__split_fields
                                    { House__house.__split_fields =
                                        (House__house.__split_fields__content
                                            House__update__this.this__split_fields) ;
                                      House__house.attr__tag =
                                        House__update__this.this__attr__tag }).
                                  House__house.rec__house__house__exterior)).
                             House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
                         = (1 : int))))
                  ((Boolean.andb
                      ((House_heating__heatingstatus__rep.to_rep
                          ((House_heating__househeating.__split_fields
                               ((House__house.__split_fields
                                    { House__house.__split_fields =
                                        (House__house.__split_fields__content
                                            House__update__this.this__split_fields) ;
                                      House__house.attr__tag =
                                        House__update__this.this__attr__tag }).
                                  House__house.rec__house__house__heating)).
                             House_heating__househeating.rec__house_heating__househeating__status))
                         = (1 : int)))
                     ((House_exterior__exteriorstatus__rep.to_rep
                         ((House_exterior__houseexterior.__split_fields
                              ((House__house.__split_fields
                                   { House__house.__split_fields =
                                       (House__house.__split_fields__content
                                           House__update__this.this__split_fields) ;
                                     House__house.attr__tag =
                                       House__update__this.this__attr__tag }).
                                 House__house.rec__house__house__exterior)).
                            House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
                        = (0 : int)))))
              (let temp___344 =
                 Clean_air__carbon__rep.to_rep
                   ((Clean_air__cleanair.__split_fields
                        ((House__house.__split_fields
                             { House__house.__split_fields =
                                 (House__house.__split_fields__content
                                     House__update__this.this__split_fields) ;
                               House__house.attr__tag =
                                 House__update__this.this__attr__tag }).
                           House__house.rec__house__house__air)).Clean_air__cleanair.rec__clean_air__cleanair__carb) in
               (Boolean.andb ((0 : int) <= temp___344))
                 (temp___344 <= (8 : int))) in
          () in
        ()
      end))
end

module House__update__subprogram_lsp
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use House_heating__househeating as House_heating__househeating
  use House_exterior__houseexterior as House_exterior__houseexterior
  use Clean_air__cleanair as Clean_air__cleanair
  use House_appliances__houseappliances as House_appliances__houseappliances
  use House__house as House__house
  use House__update__this as House__update__this
  use House__house___axiom as House__house___axiom
  use House_heating__temperature as House_heating__temperature
  use House_heating__temperature__rep as House_heating__temperature__rep
  use House_heating__heatingstatus as House_heating__heatingstatus
  use House_heating__heatingstatus__rep as House_heating__heatingstatus__rep
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  use House_exterior__exteriorstatus__rep as House_exterior__exteriorstatus__rep
  use Clean_air__carbon as Clean_air__carbon
  use Clean_air__carbon__rep as Clean_air__carbon__rep
  use Clean_air__aircon as Clean_air__aircon
  use Clean_air__aircon__rep as Clean_air__aircon__rep
  use House_appliances__unlocked as House_appliances__unlocked
  use House_appliances__unlocked__rep as House_appliances__unlocked__rep
  use House_appliances__locked as House_appliances__locked
  use House_appliances__locked__rep as House_appliances__locked__rep
  use House__house___axiom as House__house___axiom
  use House__update__this___axiom as House__update__this___axiom
  use House_heating__heatingstatus___axiom as House_heating__heatingstatus___axiom
  use House_heating__temperature___axiom as House_heating__temperature___axiom
  use House_heating__househeating___axiom as House_heating__househeating___axiom
  use House_heating__createheating___axiom as House_heating__createheating___axiom
  use House_exterior__exteriorstatus___axiom as House_exterior__exteriorstatus___axiom
  use House_exterior__houseexterior___axiom as House_exterior__houseexterior___axiom
  use House_exterior__createexteriors___axiom as House_exterior__createexteriors___axiom
  use Clean_air__carbon___axiom as Clean_air__carbon___axiom
  use Clean_air__aircon___axiom as Clean_air__aircon___axiom
  use Clean_air__cleanair___axiom as Clean_air__cleanair___axiom
  use Clean_air__createaircon___axiom as Clean_air__createaircon___axiom
  use House_appliances__unlocked___axiom as House_appliances__unlocked___axiom
  use House_appliances__locked___axiom as House_appliances__locked___axiom
  use House_appliances__houseappliances___axiom as House_appliances__houseappliances___axiom
  use House_appliances__createfridge___axiom as House_appliances__createfridge___axiom
  
  let def (__void_param : unit)
    requires { [#"house.ads" 20 0 0] true }
    ensures { [#"house.ads" 20 0 0] true }
  = [@vc:divergent]
    (([#"house.ads" 20 0 0]
      assume {
        [#"house.ads" 20 0 0]
        (((((House__house___axiom.dynamic_invariant
               { House__house.__split_fields =
                   (House__house.__split_fields__content
                       House__update__this.this__split_fields) ;
                 House__house.attr__tag = House__update__this.this__attr__tag })
              True)
             False)
            True)
           True) });
     ([#"house.ads" 20 0 0]
      (begin
         ensures { true }
         let _ =
           let _ =
             (Boolean.andb
                ((Boolean.andb
                    ((Boolean.andb
                        ((Boolean.andb
                            ((Boolean.andb
                                ((Boolean.andb
                                    (let temp___361 =
                                       House_heating__temperature__rep.to_rep
                                         ((House_heating__househeating.__split_fields
                                              ((House__house.__split_fields
                                                   { House__house.__split_fields =
                                                       (House__house.__split_fields__content
                                                           House__update__this.this__split_fields) ;
                                                     House__house.attr__tag =
                                                       House__update__this.this__attr__tag }).
                                                 House__house.rec__house__house__heating)).
                                            House_heating__househeating.rec__house_heating__househeating__temp) in
                                     (Boolean.andb ((17 : int) <= temp___361))
                                       (temp___361 <= (19 : int))))
                                   (let temp___362 =
                                      House_heating__heatingstatus__rep.to_rep
                                        ((House_heating__househeating.__split_fields
                                             ((House__house.__split_fields
                                                  { House__house.__split_fields =
                                                      (House__house.__split_fields__content
                                                          House__update__this.this__split_fields) ;
                                                    House__house.attr__tag =
                                                      House__update__this.this__attr__tag }).
                                                House__house.rec__house__house__heating)).
                                           House_heating__househeating.rec__house_heating__househeating__status) in
                                    (Boolean.andb ((0 : int) <= temp___362))
                                      (temp___362 <= (1 : int)))))
                               (let temp___363 =
                                  House_exterior__exteriorstatus__rep.to_rep
                                    ((House_exterior__houseexterior.__split_fields
                                         ((House__house.__split_fields
                                              { House__house.__split_fields =
                                                  (House__house.__split_fields__content
                                                      House__update__this.this__split_fields) ;
                                                House__house.attr__tag =
                                                  House__update__this.this__attr__tag }).
                                            House__house.rec__house__house__exterior)).
                                       House_exterior__houseexterior.rec__house_exterior__houseexterior__status) in
                                (Boolean.andb ((0 : int) <= temp___363))
                                  (temp___363 <= (1 : int)))))
                           (let temp___364 =
                              House_appliances__unlocked__rep.to_rep
                                ((House_appliances__houseappliances.__split_fields
                                     ((House__house.__split_fields
                                          { House__house.__split_fields =
                                              (House__house.__split_fields__content
                                                  House__update__this.this__split_fields) ;
                                            House__house.attr__tag =
                                              House__update__this.this__attr__tag }).
                                        House__house.rec__house__house__appliances)).
                                   House_appliances__houseappliances.rec__house_appliances__houseappliances__statusunlocked) in
                            (Boolean.andb ((0 : int) <= temp___364))
                              (temp___364 <= (1 : int)))))
                       (let temp___365 =
                          House_appliances__locked__rep.to_rep
                            ((House_appliances__houseappliances.__split_fields
                                 ((House__house.__split_fields
                                      { House__house.__split_fields =
                                          (House__house.__split_fields__content
                                              House__update__this.this__split_fields) ;
                                        House__house.attr__tag =
                                          House__update__this.this__attr__tag }).
                                    House__house.rec__house__house__appliances)).
                               House_appliances__houseappliances.rec__house_appliances__houseappliances__statuslocked) in
                        (Boolean.andb ((0 : int) <= temp___365))
                          (temp___365 <= (1 : int)))))
                   (let temp___366 =
                      Clean_air__carbon__rep.to_rep
                        ((Clean_air__cleanair.__split_fields
                             ((House__house.__split_fields
                                  { House__house.__split_fields =
                                      (House__house.__split_fields__content
                                          House__update__this.this__split_fields) ;
                                    House__house.attr__tag =
                                      House__update__this.this__attr__tag }).
                                House__house.rec__house__house__air)).
                           Clean_air__cleanair.rec__clean_air__cleanair__carb) in
                    (Boolean.andb ((0 : int) <= temp___366))
                      (temp___366 <= (8 : int)))))
               (let temp___367 =
                  Clean_air__aircon__rep.to_rep
                    ((Clean_air__cleanair.__split_fields
                         ((House__house.__split_fields
                              { House__house.__split_fields =
                                  (House__house.__split_fields__content
                                      House__update__this.this__split_fields) ;
                                House__house.attr__tag =
                                  House__update__this.this__attr__tag }).
                            House__house.rec__house__house__air)).Clean_air__cleanair.rec__clean_air__cleanair__status) in
                (Boolean.andb ((0 : int) <= temp___367))
                  (temp___367 <= (1 : int))) in
           () in
         ()
       end)))
end
