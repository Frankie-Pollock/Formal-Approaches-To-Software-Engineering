module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__positive
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type positive = <range 1 2147483647>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = positive,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type positive__ref = { mutable positive__content : positive }
  
  function positive__ref_positive__content__projection (a: positive__ref) : positive =
    a.positive__content
  
  meta "model_projection" function positive__ref_positive__content__projection
  
  meta "inline:no" function positive__ref_positive__content__projection
  
  val positive__havoc (x: positive__ref) : unit
    writes { x }
end

module Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type character
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (255 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = character,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type character__ref = { mutable character__content : character }
  
  function character__ref_character__content__projection (a: character__ref) : character =
    a.character__content
  
  meta "model_projection" function character__ref_character__content__projection
  
  meta "inline:no" function character__ref_character__content__projection
  
  val character__havoc (x: character__ref) : unit
    writes { x }
end

module Standard__character__rep
  use Standard__character as Standard__character
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Standard__character.character
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_98 : int.
          if ((a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last)) then
            ((Standard__character__rep.to_rep ((get a) temp___idx_98))
               = (Standard__character__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_98))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_98 : int.
                 if ((a__first <= temp___idx_98) /\
                       (temp___idx_98 <= a__last)) then
                   ((Standard__character__rep.to_rep ((get a) temp___idx_98))
                      = (Standard__character__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_98))))
                 else true)))
end

module Standard__integer__rep
  use Standard__integer as Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__integer.integer) : int =
    Standard__integer.integer'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__string
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__positive as Standard__positive
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer__rep as Standard__integer__rep
  
  type component_type = Standard__character.character
  
  function index_1_id (x: int) : int = x
  
  clone export ada__model.Unconstr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = Int.( <= )
  
  type string__ = __t
  
  meta "model_projection" function to_array
  
  meta "inline:no" function to_array
  
  meta "model_projection" function first
  
  meta "inline:no" function first
  
  meta "model_projection" function last
  
  meta "inline:no" function last
  
  type string____ref = { mutable string____content : string__ }
  
  function string____ref_string____content__projection (a: string____ref) : string__ =
    a.string____content
  
  meta "model_projection" function string____ref_string____content__projection
  
  meta "inline:no" function string____ref_string____content__projection
  
  val string____havoc (x: string____ref) : unit
    writes { x }
end

module Standard_String__Img
  use int.Int
  use Standard__string as Standard__string
  use _gnatprove_standard.Main
  use int.Int
  
  val function to_string (x: Main.__image) (s: int) : Standard__string.string__
  
  val function from_string (x: Standard__string.string__) : Main.__image
  
  axiom to_string__first:
    forall x : Main.__image.
      forall s : int [(to_string x) s].
        ((Standard__string.first ((to_string x) s)) = (1 : int))
  
  axiom to_string__length:
    forall x : Main.__image.
      forall s : int [(to_string x) s].
        ((s >= (0 : int)) ->
           ((Standard__string.length ((to_string x) s)) <= s))
end

module Array__Int__Standard__character__Concat
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  function index_Index_one : int = 1 : int
  
  clone export _gnatprove_standard.Array__1__Concat with
    axiom .,
    type component_type = Array__Int__Standard__character.component_type,
    type map = Array__Int__Standard__character.map,
    type Index.t = int,
    predicate Index.le = Int.( <= ),
    predicate Index.lt = Int.( < ),
    predicate Index.gt = Int.( > ),
    function Index.add = Int.( + ),
    function Index.sub = Int.( - ),
    function Index.one = index_Index_one,
    function get = Array__Int__Standard__character.get
end

module House_heating__temperature
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type temperature = <range 17 19>
  
  val function first : int
    ensures { result = (17 : int) }
  
  val function last : int
    ensures { result = (19 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = temperature,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type temperature__ref = { mutable temperature__content : temperature }
  
  function temperature__ref_temperature__content__projection (a: temperature__ref) : temperature =
    a.temperature__content
  
  meta "model_projection" function temperature__ref_temperature__content__projection
  
  meta "inline:no" function temperature__ref_temperature__content__projection
  
  val temperature__havoc (x: temperature__ref) : unit
    writes { x }
end

module House_heating__temperature__rep
  use House_heating__temperature as House_heating__temperature
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: House_heating__temperature.temperature) : int =
    House_heating__temperature.temperature'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_heating__temperature.temperature,
    predicate in_range = House_heating__temperature.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_heating__heatingstatus
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type heatingstatus
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = heatingstatus,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type heatingstatus__ref = {
                           mutable heatingstatus__content : heatingstatus
                           }
  
  function heatingstatus__ref_heatingstatus__content__projection (a: heatingstatus__ref) : heatingstatus =
    a.heatingstatus__content
  
  meta "model_projection" function heatingstatus__ref_heatingstatus__content__projection
  
  meta "inline:no" function heatingstatus__ref_heatingstatus__content__projection
  
  val heatingstatus__havoc (x: heatingstatus__ref) : unit
    writes { x }
end

module House_heating__heatingstatus__rep
  use House_heating__heatingstatus as House_heating__heatingstatus
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_heating__heatingstatus.heatingstatus,
    predicate in_range = House_heating__heatingstatus.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_heating__househeating__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use House_heating__temperature as House_heating__temperature
  use House_heating__temperature__rep as House_heating__temperature__rep
  use House_heating__heatingstatus as House_heating__heatingstatus
  use House_heating__heatingstatus__rep as House_heating__heatingstatus__rep
  
  type __split_fields = {
                       rec__house_heating__househeating__temp :
                         House_heating__temperature.temperature;
                       rec__house_heating__househeating__status :
                         House_heating__heatingstatus.heatingstatus;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__house_heating__househeating__temp__projection (a: __split_fields) : 
    House_heating__temperature.temperature =
    a.rec__house_heating__househeating__temp
  
  meta "model_projection" function __split_fields_rec__house_heating__househeating__temp__projection
  
  meta "inline:no" function __split_fields_rec__house_heating__househeating__temp__projection
  
  function __split_fields_rec__house_heating__househeating__status__projection (a: __split_fields) : 
    House_heating__heatingstatus.heatingstatus =
    a.rec__house_heating__househeating__status
  
  meta "model_projection" function __split_fields_rec__house_heating__househeating__status__projection
  
  meta "inline:no" function __split_fields_rec__house_heating__househeating__status__projection
  
  function __split_fields_rec__ext____projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____projection
  
  meta "inline:no" function __split_fields_rec__ext____projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function __rep_attr__tag__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__projection
  
  meta "inline:no" function __rep_attr__tag__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate house_heating__househeating__temp__pred (a: __rep) = true
  
  val house_heating__househeating__temp__pred (a: __rep) : bool
    ensures { result
                <->
                (house_heating__househeating__temp__pred (a : __rep)) }
  
  val rec__house_heating__househeating__temp_ (a: __rep) : House_heating__temperature.temperature
    requires { house_heating__househeating__temp__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_heating__househeating__temp)) }
  
  predicate house_heating__househeating__status__pred (a: __rep) = true
  
  val house_heating__househeating__status__pred (a: __rep) : bool
    ensures { result
                <->
                (house_heating__househeating__status__pred (a : __rep)) }
  
  val rec__house_heating__househeating__status_ (a: __rep) : House_heating__heatingstatus.heatingstatus
    requires { house_heating__househeating__status__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_heating__househeating__status)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((House_heating__temperature__rep.to_rep
            ((__split_fields a).rec__house_heating__househeating__temp))
           = (House_heating__temperature__rep.to_rep
                ((__split_fields b).rec__house_heating__househeating__temp))) /\
          ((House_heating__heatingstatus__rep.to_rep
              ((__split_fields a).rec__house_heating__househeating__status))
             = (House_heating__heatingstatus__rep.to_rep
                  ((__split_fields b).rec__house_heating__househeating__status)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module House_heating__househeating
  use export House_heating__househeating__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type househeating = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function house_heating__househeating__temp__first__bit : int
  
  val function house_heating__househeating__temp__last__bit : int
  
  val function house_heating__househeating__temp__position : int
  
  axiom house_heating__househeating__temp__first__bit_axiom:
    (house_heating__househeating__temp__first__bit >= (0 : int))
  
  axiom house_heating__househeating__temp__last__bit_axiom:
    (house_heating__househeating__temp__last__bit
       > house_heating__househeating__temp__first__bit)
  
  axiom house_heating__househeating__temp__position_axiom:
    (house_heating__househeating__temp__position >= (0 : int))
  
  val function house_heating__househeating__status__first__bit : int
  
  val function house_heating__househeating__status__last__bit : int
  
  val function house_heating__househeating__status__position : int
  
  axiom house_heating__househeating__status__first__bit_axiom:
    (house_heating__househeating__status__first__bit >= (0 : int))
  
  axiom house_heating__househeating__status__last__bit_axiom:
    (house_heating__househeating__status__last__bit
       > house_heating__househeating__status__first__bit)
  
  axiom house_heating__househeating__status__position_axiom:
    (house_heating__househeating__status__position >= (0 : int))
  
  val function user_eq (a: househeating) (b: househeating) : bool
  
  val function dummy : househeating
  
  type househeating__ref = { mutable househeating__content : househeating }
  
  function househeating__ref_househeating__content__projection (a: househeating__ref) : househeating =
    a.househeating__content
  
  meta "model_projection" function househeating__ref_househeating__content__projection
  
  meta "inline:no" function househeating__ref_househeating__content__projection
  
  val househeating__havoc (x: househeating__ref) : unit
    writes { x }
end

module House_exterior__exteriorstatus
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type exteriorstatus
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = exteriorstatus,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type exteriorstatus__ref = {
                            mutable exteriorstatus__content : exteriorstatus
                            }
  
  function exteriorstatus__ref_exteriorstatus__content__projection (a: exteriorstatus__ref) : exteriorstatus =
    a.exteriorstatus__content
  
  meta "model_projection" function exteriorstatus__ref_exteriorstatus__content__projection
  
  meta "inline:no" function exteriorstatus__ref_exteriorstatus__content__projection
  
  val exteriorstatus__havoc (x: exteriorstatus__ref) : unit
    writes { x }
end

module House_exterior__exteriorstatus__rep
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_exterior__exteriorstatus.exteriorstatus,
    predicate in_range = House_exterior__exteriorstatus.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_exterior__houseexterior__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  use House_exterior__exteriorstatus__rep as House_exterior__exteriorstatus__rep
  
  type __split_fields = {
                       rec__house_exterior__houseexterior__status :
                         House_exterior__exteriorstatus.exteriorstatus;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__house_exterior__houseexterior__status__projection (a: __split_fields) : 
    House_exterior__exteriorstatus.exteriorstatus =
    a.rec__house_exterior__houseexterior__status
  
  meta "model_projection" function __split_fields_rec__house_exterior__houseexterior__status__projection
  
  meta "inline:no" function __split_fields_rec__house_exterior__houseexterior__status__projection
  
  function __split_fields_rec__ext____2__projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____2__projection
  
  meta "inline:no" function __split_fields_rec__ext____2__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__2__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__2__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__2__projection
  
  meta "inline:no" function __rep___split_fields__2__projection
  
  function __rep_attr__tag__2__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__2__projection
  
  meta "inline:no" function __rep_attr__tag__2__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate house_exterior__houseexterior__status__pred (a: __rep) = true
  
  val house_exterior__houseexterior__status__pred (a: __rep) : bool
    ensures { result
                <->
                (house_exterior__houseexterior__status__pred (a : __rep)) }
  
  val rec__house_exterior__houseexterior__status_ (a: __rep) : House_exterior__exteriorstatus.exteriorstatus
    requires { house_exterior__houseexterior__status__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_exterior__houseexterior__status)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((House_exterior__exteriorstatus__rep.to_rep
           ((__split_fields a).rec__house_exterior__houseexterior__status))
          = (House_exterior__exteriorstatus__rep.to_rep
               ((__split_fields b).rec__house_exterior__houseexterior__status))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module House_exterior__houseexterior
  use export House_exterior__houseexterior__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type houseexterior = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function house_exterior__houseexterior__status__first__bit : int
  
  val function house_exterior__houseexterior__status__last__bit : int
  
  val function house_exterior__houseexterior__status__position : int
  
  axiom house_exterior__houseexterior__status__first__bit_axiom:
    (house_exterior__houseexterior__status__first__bit >= (0 : int))
  
  axiom house_exterior__houseexterior__status__last__bit_axiom:
    (house_exterior__houseexterior__status__last__bit
       > house_exterior__houseexterior__status__first__bit)
  
  axiom house_exterior__houseexterior__status__position_axiom:
    (house_exterior__houseexterior__status__position >= (0 : int))
  
  val function user_eq (a: houseexterior) (b: houseexterior) : bool
  
  val function dummy : houseexterior
  
  type houseexterior__ref = {
                           mutable houseexterior__content : houseexterior
                           }
  
  function houseexterior__ref_houseexterior__content__projection (a: houseexterior__ref) : houseexterior =
    a.houseexterior__content
  
  meta "model_projection" function houseexterior__ref_houseexterior__content__projection
  
  meta "inline:no" function houseexterior__ref_houseexterior__content__projection
  
  val houseexterior__havoc (x: houseexterior__ref) : unit
    writes { x }
end

module Clean_air__carbon
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type carbon = <range 0 8>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (8 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = carbon,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type carbon__ref = { mutable carbon__content : carbon }
  
  function carbon__ref_carbon__content__projection (a: carbon__ref) : carbon =
    a.carbon__content
  
  meta "model_projection" function carbon__ref_carbon__content__projection
  
  meta "inline:no" function carbon__ref_carbon__content__projection
  
  val carbon__havoc (x: carbon__ref) : unit
    writes { x }
end

module Clean_air__carbon__rep
  use Clean_air__carbon as Clean_air__carbon
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Clean_air__carbon.carbon) : int =
    Clean_air__carbon.carbon'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Clean_air__carbon.carbon,
    predicate in_range = Clean_air__carbon.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Clean_air__aircon
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type aircon
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = aircon,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type aircon__ref = { mutable aircon__content : aircon }
  
  function aircon__ref_aircon__content__projection (a: aircon__ref) : aircon =
    a.aircon__content
  
  meta "model_projection" function aircon__ref_aircon__content__projection
  
  meta "inline:no" function aircon__ref_aircon__content__projection
  
  val aircon__havoc (x: aircon__ref) : unit
    writes { x }
end

module Clean_air__aircon__rep
  use Clean_air__aircon as Clean_air__aircon
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Clean_air__aircon.aircon,
    predicate in_range = Clean_air__aircon.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Clean_air__cleanair__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Clean_air__carbon as Clean_air__carbon
  use Clean_air__carbon__rep as Clean_air__carbon__rep
  use Clean_air__aircon as Clean_air__aircon
  use Clean_air__aircon__rep as Clean_air__aircon__rep
  
  type __split_fields = {
                       rec__clean_air__cleanair__carb :
                         Clean_air__carbon.carbon;
                       rec__clean_air__cleanair__status :
                         Clean_air__aircon.aircon;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__clean_air__cleanair__carb__projection (a: __split_fields) : 
    Clean_air__carbon.carbon =
    a.rec__clean_air__cleanair__carb
  
  meta "model_projection" function __split_fields_rec__clean_air__cleanair__carb__projection
  
  meta "inline:no" function __split_fields_rec__clean_air__cleanair__carb__projection
  
  function __split_fields_rec__clean_air__cleanair__status__projection (a: __split_fields) : 
    Clean_air__aircon.aircon =
    a.rec__clean_air__cleanair__status
  
  meta "model_projection" function __split_fields_rec__clean_air__cleanair__status__projection
  
  meta "inline:no" function __split_fields_rec__clean_air__cleanair__status__projection
  
  function __split_fields_rec__ext____3__projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____3__projection
  
  meta "inline:no" function __split_fields_rec__ext____3__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__3__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__3__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__3__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__3__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__3__projection
  
  meta "inline:no" function __rep___split_fields__3__projection
  
  function __rep_attr__tag__3__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__3__projection
  
  meta "inline:no" function __rep_attr__tag__3__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate clean_air__cleanair__carb__pred (a: __rep) = true
  
  val clean_air__cleanair__carb__pred (a: __rep) : bool
    ensures { result <-> (clean_air__cleanair__carb__pred (a : __rep)) }
  
  val rec__clean_air__cleanair__carb_ (a: __rep) : Clean_air__carbon.carbon
    requires { clean_air__cleanair__carb__pred a }
    ensures { (result = ((__split_fields a).rec__clean_air__cleanair__carb)) }
  
  predicate clean_air__cleanair__status__pred (a: __rep) = true
  
  val clean_air__cleanair__status__pred (a: __rep) : bool
    ensures { result <-> (clean_air__cleanair__status__pred (a : __rep)) }
  
  val rec__clean_air__cleanair__status_ (a: __rep) : Clean_air__aircon.aircon
    requires { clean_air__cleanair__status__pred a }
    ensures { (result
                 = ((__split_fields a).rec__clean_air__cleanair__status)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Clean_air__carbon__rep.to_rep
            ((__split_fields a).rec__clean_air__cleanair__carb))
           = (Clean_air__carbon__rep.to_rep
                ((__split_fields b).rec__clean_air__cleanair__carb))) /\
          ((Clean_air__aircon__rep.to_rep
              ((__split_fields a).rec__clean_air__cleanair__status))
             = (Clean_air__aircon__rep.to_rep
                  ((__split_fields b).rec__clean_air__cleanair__status)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module Clean_air__cleanair
  use export Clean_air__cleanair__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type cleanair = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function clean_air__cleanair__carb__first__bit : int
  
  val function clean_air__cleanair__carb__last__bit : int
  
  val function clean_air__cleanair__carb__position : int
  
  axiom clean_air__cleanair__carb__first__bit_axiom:
    (clean_air__cleanair__carb__first__bit >= (0 : int))
  
  axiom clean_air__cleanair__carb__last__bit_axiom:
    (clean_air__cleanair__carb__last__bit
       > clean_air__cleanair__carb__first__bit)
  
  axiom clean_air__cleanair__carb__position_axiom:
    (clean_air__cleanair__carb__position >= (0 : int))
  
  val function clean_air__cleanair__status__first__bit : int
  
  val function clean_air__cleanair__status__last__bit : int
  
  val function clean_air__cleanair__status__position : int
  
  axiom clean_air__cleanair__status__first__bit_axiom:
    (clean_air__cleanair__status__first__bit >= (0 : int))
  
  axiom clean_air__cleanair__status__last__bit_axiom:
    (clean_air__cleanair__status__last__bit
       > clean_air__cleanair__status__first__bit)
  
  axiom clean_air__cleanair__status__position_axiom:
    (clean_air__cleanair__status__position >= (0 : int))
  
  val function user_eq (a: cleanair) (b: cleanair) : bool
  
  val function dummy : cleanair
  
  type cleanair__ref = { mutable cleanair__content : cleanair }
  
  function cleanair__ref_cleanair__content__projection (a: cleanair__ref) : cleanair =
    a.cleanair__content
  
  meta "model_projection" function cleanair__ref_cleanair__content__projection
  
  meta "inline:no" function cleanair__ref_cleanair__content__projection
  
  val cleanair__havoc (x: cleanair__ref) : unit
    writes { x }
end

module House_appliances__unlocked
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type unlocked
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = unlocked,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type unlocked__ref = { mutable unlocked__content : unlocked }
  
  function unlocked__ref_unlocked__content__projection (a: unlocked__ref) : unlocked =
    a.unlocked__content
  
  meta "model_projection" function unlocked__ref_unlocked__content__projection
  
  meta "inline:no" function unlocked__ref_unlocked__content__projection
  
  val unlocked__havoc (x: unlocked__ref) : unit
    writes { x }
end

module House_appliances__unlocked__rep
  use House_appliances__unlocked as House_appliances__unlocked
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_appliances__unlocked.unlocked,
    predicate in_range = House_appliances__unlocked.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_appliances__locked
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type locked
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = locked,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type locked__ref = { mutable locked__content : locked }
  
  function locked__ref_locked__content__projection (a: locked__ref) : locked =
    a.locked__content
  
  meta "model_projection" function locked__ref_locked__content__projection
  
  meta "inline:no" function locked__ref_locked__content__projection
  
  val locked__havoc (x: locked__ref) : unit
    writes { x }
end

module House_appliances__locked__rep
  use House_appliances__locked as House_appliances__locked
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_appliances__locked.locked,
    predicate in_range = House_appliances__locked.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_appliances__houseappliances__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use House_appliances__unlocked as House_appliances__unlocked
  use House_appliances__unlocked__rep as House_appliances__unlocked__rep
  use House_appliances__locked as House_appliances__locked
  use House_appliances__locked__rep as House_appliances__locked__rep
  
  type __split_fields = {
                       rec__house_appliances__houseappliances__statusunlocked :
                         House_appliances__unlocked.unlocked;
                       rec__house_appliances__houseappliances__statuslocked :
                         House_appliances__locked.locked;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__house_appliances__houseappliances__statusunlocked__projection (a: __split_fields) : 
    House_appliances__unlocked.unlocked =
    a.rec__house_appliances__houseappliances__statusunlocked
  
  meta "model_projection" function __split_fields_rec__house_appliances__houseappliances__statusunlocked__projection
  
  meta "inline:no" function __split_fields_rec__house_appliances__houseappliances__statusunlocked__projection
  
  function __split_fields_rec__house_appliances__houseappliances__statuslocked__projection (a: __split_fields) : 
    House_appliances__locked.locked =
    a.rec__house_appliances__houseappliances__statuslocked
  
  meta "model_projection" function __split_fields_rec__house_appliances__houseappliances__statuslocked__projection
  
  meta "inline:no" function __split_fields_rec__house_appliances__houseappliances__statuslocked__projection
  
  function __split_fields_rec__ext____4__projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____4__projection
  
  meta "inline:no" function __split_fields_rec__ext____4__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__4__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__4__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__4__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__4__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__4__projection
  
  meta "inline:no" function __rep___split_fields__4__projection
  
  function __rep_attr__tag__4__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__4__projection
  
  meta "inline:no" function __rep_attr__tag__4__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate house_appliances__houseappliances__statusunlocked__pred (a: __rep) =
    true
  
  val house_appliances__houseappliances__statusunlocked__pred (a: __rep) : 
    bool
    ensures { result
                <->
                (house_appliances__houseappliances__statusunlocked__pred
                   (a : __rep)) }
  
  val rec__house_appliances__houseappliances__statusunlocked_ (a: __rep) : 
    House_appliances__unlocked.unlocked
    requires { house_appliances__houseappliances__statusunlocked__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_appliances__houseappliances__statusunlocked)) }
  
  predicate house_appliances__houseappliances__statuslocked__pred (a: __rep) =
    true
  
  val house_appliances__houseappliances__statuslocked__pred (a: __rep) : 
    bool
    ensures { result
                <->
                (house_appliances__houseappliances__statuslocked__pred
                   (a : __rep)) }
  
  val rec__house_appliances__houseappliances__statuslocked_ (a: __rep) : 
    House_appliances__locked.locked
    requires { house_appliances__houseappliances__statuslocked__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_appliances__houseappliances__statuslocked)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((House_appliances__unlocked__rep.to_rep
            ((__split_fields a).rec__house_appliances__houseappliances__statusunlocked))
           = (House_appliances__unlocked__rep.to_rep
                ((__split_fields b).rec__house_appliances__houseappliances__statusunlocked))) /\
          ((House_appliances__locked__rep.to_rep
              ((__split_fields a).rec__house_appliances__houseappliances__statuslocked))
             = (House_appliances__locked__rep.to_rep
                  ((__split_fields b).rec__house_appliances__houseappliances__statuslocked)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module House_appliances__houseappliances
  use export House_appliances__houseappliances__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type houseappliances = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function house_appliances__houseappliances__statusunlocked__first__bit : 
    int
  
  val function house_appliances__houseappliances__statusunlocked__last__bit : 
    int
  
  val function house_appliances__houseappliances__statusunlocked__position : 
    int
  
  axiom house_appliances__houseappliances__statusunlocked__first__bit_axiom:
    (house_appliances__houseappliances__statusunlocked__first__bit
       >= (0 : int))
  
  axiom house_appliances__houseappliances__statusunlocked__last__bit_axiom:
    (house_appliances__houseappliances__statusunlocked__last__bit
       > house_appliances__houseappliances__statusunlocked__first__bit)
  
  axiom house_appliances__houseappliances__statusunlocked__position_axiom:
    (house_appliances__houseappliances__statusunlocked__position
       >= (0 : int))
  
  val function house_appliances__houseappliances__statuslocked__first__bit : 
    int
  
  val function house_appliances__houseappliances__statuslocked__last__bit : 
    int
  
  val function house_appliances__houseappliances__statuslocked__position : 
    int
  
  axiom house_appliances__houseappliances__statuslocked__first__bit_axiom:
    (house_appliances__houseappliances__statuslocked__first__bit
       >= (0 : int))
  
  axiom house_appliances__houseappliances__statuslocked__last__bit_axiom:
    (house_appliances__houseappliances__statuslocked__last__bit
       > house_appliances__houseappliances__statuslocked__first__bit)
  
  axiom house_appliances__houseappliances__statuslocked__position_axiom:
    (house_appliances__houseappliances__statuslocked__position >= (0 : int))
  
  val function user_eq (a: houseappliances) (b: houseappliances) : bool
  
  val function dummy : houseappliances
  
  type houseappliances__ref = {
                             mutable houseappliances__content :
                               houseappliances
                             }
  
  function houseappliances__ref_houseappliances__content__projection (a: houseappliances__ref) : houseappliances =
    a.houseappliances__content
  
  meta "model_projection" function houseappliances__ref_houseappliances__content__projection
  
  meta "inline:no" function houseappliances__ref_houseappliances__content__projection
  
  val houseappliances__havoc (x: houseappliances__ref) : unit
    writes { x }
end

module House__house__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use House_heating__househeating as House_heating__househeating
  use House_exterior__houseexterior as House_exterior__houseexterior
  use Clean_air__cleanair as Clean_air__cleanair
  use House_appliances__houseappliances as House_appliances__houseappliances
  
  type __split_fields = {
                       rec__house__house__heating :
                         House_heating__househeating.househeating;
                       rec__house__house__exterior :
                         House_exterior__houseexterior.houseexterior;
                       rec__house__house__air : Clean_air__cleanair.cleanair;
                       rec__house__house__appliances :
                         House_appliances__houseappliances.houseappliances;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__house__house__heating__projection (a: __split_fields) : 
    House_heating__househeating.househeating =
    a.rec__house__house__heating
  
  meta "model_projection" function __split_fields_rec__house__house__heating__projection
  
  meta "inline:no" function __split_fields_rec__house__house__heating__projection
  
  function __split_fields_rec__house__house__exterior__projection (a: __split_fields) : 
    House_exterior__houseexterior.houseexterior =
    a.rec__house__house__exterior
  
  meta "model_projection" function __split_fields_rec__house__house__exterior__projection
  
  meta "inline:no" function __split_fields_rec__house__house__exterior__projection
  
  function __split_fields_rec__house__house__air__projection (a: __split_fields) : 
    Clean_air__cleanair.cleanair =
    a.rec__house__house__air
  
  meta "model_projection" function __split_fields_rec__house__house__air__projection
  
  meta "inline:no" function __split_fields_rec__house__house__air__projection
  
  function __split_fields_rec__house__house__appliances__projection (a: __split_fields) : 
    House_appliances__houseappliances.houseappliances =
    a.rec__house__house__appliances
  
  meta "model_projection" function __split_fields_rec__house__house__appliances__projection
  
  meta "inline:no" function __split_fields_rec__house__house__appliances__projection
  
  function __split_fields_rec__ext____5__projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____5__projection
  
  meta "inline:no" function __split_fields_rec__ext____5__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__5__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__5__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__5__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__5__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__5__projection
  
  meta "inline:no" function __rep___split_fields__5__projection
  
  function __rep_attr__tag__5__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__5__projection
  
  meta "inline:no" function __rep_attr__tag__5__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate house__house__heating__pred (a: __rep) = true
  
  val house__house__heating__pred (a: __rep) : bool
    ensures { result <-> (house__house__heating__pred (a : __rep)) }
  
  val rec__house__house__heating_ (a: __rep) : House_heating__househeating.househeating
    requires { house__house__heating__pred a }
    ensures { (result = ((__split_fields a).rec__house__house__heating)) }
  
  predicate house__house__exterior__pred (a: __rep) = true
  
  val house__house__exterior__pred (a: __rep) : bool
    ensures { result <-> (house__house__exterior__pred (a : __rep)) }
  
  val rec__house__house__exterior_ (a: __rep) : House_exterior__houseexterior.houseexterior
    requires { house__house__exterior__pred a }
    ensures { (result = ((__split_fields a).rec__house__house__exterior)) }
  
  predicate house__house__air__pred (a: __rep) = true
  
  val house__house__air__pred (a: __rep) : bool
    ensures { result <-> (house__house__air__pred (a : __rep)) }
  
  val rec__house__house__air_ (a: __rep) : Clean_air__cleanair.cleanair
    requires { house__house__air__pred a }
    ensures { (result = ((__split_fields a).rec__house__house__air)) }
  
  predicate house__house__appliances__pred (a: __rep) = true
  
  val house__house__appliances__pred (a: __rep) : bool
    ensures { result <-> (house__house__appliances__pred (a : __rep)) }
  
  val rec__house__house__appliances_ (a: __rep) : House_appliances__houseappliances.houseappliances
    requires { house__house__appliances__pred a }
    ensures { (result = ((__split_fields a).rec__house__house__appliances)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((((House_heating__househeating.bool_eq
             ((__split_fields a).rec__house__house__heating))
            ((__split_fields b).rec__house__house__heating)) /\
           ((House_exterior__houseexterior.bool_eq
               ((__split_fields a).rec__house__house__exterior))
              ((__split_fields b).rec__house__house__exterior))) /\
          (((Clean_air__cleanair.bool_eq
               ((__split_fields a).rec__house__house__air))
              ((__split_fields b).rec__house__house__air)) /\
             ((House_appliances__houseappliances.bool_eq
                 ((__split_fields a).rec__house__house__appliances))
                ((__split_fields b).rec__house__house__appliances)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module House__house
  use export House__house__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type house = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function house__house__heating__first__bit : int
  
  val function house__house__heating__last__bit : int
  
  val function house__house__heating__position : int
  
  axiom house__house__heating__first__bit_axiom:
    (house__house__heating__first__bit >= (0 : int))
  
  axiom house__house__heating__last__bit_axiom:
    (house__house__heating__last__bit > house__house__heating__first__bit)
  
  axiom house__house__heating__position_axiom:
    (house__house__heating__position >= (0 : int))
  
  val function house__house__exterior__first__bit : int
  
  val function house__house__exterior__last__bit : int
  
  val function house__house__exterior__position : int
  
  axiom house__house__exterior__first__bit_axiom:
    (house__house__exterior__first__bit >= (0 : int))
  
  axiom house__house__exterior__last__bit_axiom:
    (house__house__exterior__last__bit > house__house__exterior__first__bit)
  
  axiom house__house__exterior__position_axiom:
    (house__house__exterior__position >= (0 : int))
  
  val function house__house__air__first__bit : int
  
  val function house__house__air__last__bit : int
  
  val function house__house__air__position : int
  
  axiom house__house__air__first__bit_axiom:
    (house__house__air__first__bit >= (0 : int))
  
  axiom house__house__air__last__bit_axiom:
    (house__house__air__last__bit > house__house__air__first__bit)
  
  axiom house__house__air__position_axiom:
    (house__house__air__position >= (0 : int))
  
  val function house__house__appliances__first__bit : int
  
  val function house__house__appliances__last__bit : int
  
  val function house__house__appliances__position : int
  
  axiom house__house__appliances__first__bit_axiom:
    (house__house__appliances__first__bit >= (0 : int))
  
  axiom house__house__appliances__last__bit_axiom:
    (house__house__appliances__last__bit
       > house__house__appliances__first__bit)
  
  axiom house__house__appliances__position_axiom:
    (house__house__appliances__position >= (0 : int))
  
  val function user_eq (a: house) (b: house) : bool
  
  val function dummy : house
  
  type house__ref = { mutable house__content : house }
  
  function house__ref_house__content__projection (a: house__ref) : house =
    a.house__content
  
  meta "model_projection" function house__ref_house__content__projection
  
  meta "inline:no" function house__ref_house__content__projection
  
  val house__havoc (x: house__ref) : unit
    writes { x }
end

module Main__system
  use _gnatprove_standard.Main
  use int.Int
  use House__house as House__house
  
  val system__split_fields : House__house.__split_fields__ref
  
  val function system__attr__tag : int
end

module House_heating__createheating
  use _gnatprove_standard.Main
  use int.Int
  use House_heating__househeating as House_heating__househeating
  
  val function createheating (__void_param: unit) : House_heating__househeating.househeating
  
  val predicate createheating__function_guard (temp___result_163: House_heating__househeating.househeating) (__void_param: unit)
  
  scope Dispatch
    val function createheating (attr__tag: int) (__void_param: unit) : 
      House_heating__househeating.househeating
    
    val predicate createheating__function_guard (temp___result_163: House_heating__househeating.househeating) (attr__tag: int) (__void_param: unit)
    end
end

module House_exterior__createexteriors
  use _gnatprove_standard.Main
  use int.Int
  use House_exterior__houseexterior as House_exterior__houseexterior
  
  val function createexteriors (__void_param: unit) : House_exterior__houseexterior.houseexterior
  
  val predicate createexteriors__function_guard (temp___result_164: House_exterior__houseexterior.houseexterior) (__void_param: unit)
  
  scope Dispatch
    val function createexteriors (attr__tag: int) (__void_param: unit) : 
      House_exterior__houseexterior.houseexterior
    
    val predicate createexteriors__function_guard (temp___result_164: 
      House_exterior__houseexterior.houseexterior) (attr__tag: int) (__void_param: unit)
    end
end

module Clean_air__createaircon
  use _gnatprove_standard.Main
  use int.Int
  use Clean_air__cleanair as Clean_air__cleanair
  
  val function createaircon (__void_param: unit) : Clean_air__cleanair.cleanair
  
  val predicate createaircon__function_guard (temp___result_165: Clean_air__cleanair.cleanair) (__void_param: unit)
  
  scope Dispatch
    val function createaircon (attr__tag: int) (__void_param: unit) : 
      Clean_air__cleanair.cleanair
    
    val predicate createaircon__function_guard (temp___result_165: Clean_air__cleanair.cleanair) (attr__tag: int) (__void_param: unit)
    end
end

module House_appliances__createfridge
  use _gnatprove_standard.Main
  use int.Int
  use House_appliances__houseappliances as House_appliances__houseappliances
  
  val function createfridge (__void_param: unit) : House_appliances__houseappliances.houseappliances
  
  val predicate createfridge__function_guard (temp___result_166: House_appliances__houseappliances.houseappliances) (__void_param: unit)
  
  scope Dispatch
    val function createfridge (attr__tag: int) (__void_param: unit) : 
      House_appliances__houseappliances.houseappliances
    
    val predicate createfridge__function_guard (temp___result_166: House_appliances__houseappliances.houseappliances) (attr__tag: int) (__void_param: unit)
    end
end

module House__house___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_heating__househeating as House_heating__househeating
  use House_heating__createheating as House_heating__createheating
  use House_exterior__houseexterior as House_exterior__houseexterior
  use House_exterior__createexteriors as House_exterior__createexteriors
  use Clean_air__cleanair as Clean_air__cleanair
  use Clean_air__createaircon as Clean_air__createaircon
  use House_appliances__houseappliances as House_appliances__houseappliances
  use House_appliances__createfridge as House_appliances__createfridge
  use House__house as House__house
  
  predicate dynamic_invariant (temp___expr_288: House__house.house) (temp___is_init_284: bool) (temp___skip_constant_285: bool) (temp___do_toplevel_286: bool) (temp___do_typ_inv_287: bool) =
    true
  
  val dynamic_invariant (temp___expr_288: House__house.house) (temp___is_init_284: bool) (temp___skip_constant_285: bool) (temp___do_toplevel_286: bool) (temp___do_typ_inv_287: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_288 : House__house.house))
                      (temp___is_init_284 : bool))
                     (temp___skip_constant_285 : bool))
                    (temp___do_toplevel_286 : bool))
                   (temp___do_typ_inv_287 : bool)) }
  
  predicate default_initial_assumption (temp___expr_289: House__house.house) (temp___skip_top_level_290: bool) =
    (((House__house.attr__tag temp___expr_289) = House__house.__tag) /\
       (((if (House__house.house__house__heating__pred temp___expr_289) then
            (((House__house.__split_fields temp___expr_289).House__house.rec__house__house__heating)
               = { (epsilon temp___result_291: House_heating__househeating.househeating.
                      ((temp___result_291
                          = (House_heating__createheating.createheating ())) /\
                         ((House_heating__createheating.createheating__function_guard
                             temp___result_291)
                            ()))) with
                   House_heating__househeating.attr__tag =
                     House_heating__househeating.__tag })
          else true) /\
           (if (House__house.house__house__exterior__pred temp___expr_289) then
              (((House__house.__split_fields temp___expr_289).House__house.rec__house__house__exterior)
                 = { (epsilon temp___result_292: House_exterior__houseexterior.houseexterior.
                        ((temp___result_292
                            = (House_exterior__createexteriors.createexteriors
                                 ())) /\
                           ((House_exterior__createexteriors.createexteriors__function_guard
                               temp___result_292)
                              ()))) with
                     House_exterior__houseexterior.attr__tag =
                       House_exterior__houseexterior.__tag })
            else true)) /\
          ((if (House__house.house__house__air__pred temp___expr_289) then
              (((House__house.__split_fields temp___expr_289).House__house.rec__house__house__air)
                 = { (epsilon temp___result_293: Clean_air__cleanair.cleanair.
                        ((temp___result_293
                            = (Clean_air__createaircon.createaircon ())) /\
                           ((Clean_air__createaircon.createaircon__function_guard
                               temp___result_293)
                              ()))) with
                     Clean_air__cleanair.attr__tag =
                       Clean_air__cleanair.__tag })
            else true) /\
             (if (House__house.house__house__appliances__pred temp___expr_289) then
                (((House__house.__split_fields temp___expr_289).House__house.rec__house__house__appliances)
                   = { (epsilon temp___result_294: House_appliances__houseappliances.houseappliances.
                          ((temp___result_294
                              = (House_appliances__createfridge.createfridge
                                   ())) /\
                             ((House_appliances__createfridge.createfridge__function_guard
                                 temp___result_294)
                                ()))) with
                       House_appliances__houseappliances.attr__tag =
                         House_appliances__houseappliances.__tag })
              else true))))
  
  val default_initial_assumption (temp___expr_289: House__house.house) (temp___skip_top_level_290: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_289 : House__house.house))
                   (temp___skip_top_level_290 : bool)) }
end

module Main__print_status__heating
  use _gnatprove_standard.Main
  use int.Int
  use House_heating__househeating as House_heating__househeating
  
  val heating__split_fields : House_heating__househeating.__split_fields__ref
  
  val function heating__attr__tag : int
end

module House_heating__househeating___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_heating__househeating as House_heating__househeating
  
  predicate dynamic_invariant (temp___expr_214: House_heating__househeating.househeating) (temp___is_init_210: bool) (temp___skip_constant_211: bool) (temp___do_toplevel_212: bool) (temp___do_typ_inv_213: bool) =
    true
  
  val dynamic_invariant (temp___expr_214: House_heating__househeating.househeating) (temp___is_init_210: bool) (temp___skip_constant_211: bool) (temp___do_toplevel_212: bool) (temp___do_typ_inv_213: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_214 :
                          House_heating__househeating.househeating))
                      (temp___is_init_210 : bool))
                     (temp___skip_constant_211 : bool))
                    (temp___do_toplevel_212 : bool))
                   (temp___do_typ_inv_213 : bool)) }
  
  predicate default_initial_assumption (temp___expr_215: House_heating__househeating.househeating) (temp___skip_top_level_216: bool) =
    ((House_heating__househeating.attr__tag temp___expr_215)
       = House_heating__househeating.__tag)
  
  val default_initial_assumption (temp___expr_215: House_heating__househeating.househeating) (temp___skip_top_level_216: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_215 :
                       House_heating__househeating.househeating))
                   (temp___skip_top_level_216 : bool)) }
end

module Main__print_status__exterior
  use _gnatprove_standard.Main
  use int.Int
  use House_exterior__houseexterior as House_exterior__houseexterior
  
  val exterior__split_fields : House_exterior__houseexterior.__split_fields__ref
  
  val function exterior__attr__tag : int
end

module House_exterior__houseexterior___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_exterior__houseexterior as House_exterior__houseexterior
  
  predicate dynamic_invariant (temp___expr_230: House_exterior__houseexterior.houseexterior) (temp___is_init_226: bool) (temp___skip_constant_227: bool) (temp___do_toplevel_228: bool) (temp___do_typ_inv_229: bool) =
    true
  
  val dynamic_invariant (temp___expr_230: House_exterior__houseexterior.houseexterior) (temp___is_init_226: bool) (temp___skip_constant_227: bool) (temp___do_toplevel_228: bool) (temp___do_typ_inv_229: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_230 :
                          House_exterior__houseexterior.houseexterior))
                      (temp___is_init_226 : bool))
                     (temp___skip_constant_227 : bool))
                    (temp___do_toplevel_228 : bool))
                   (temp___do_typ_inv_229 : bool)) }
  
  predicate default_initial_assumption (temp___expr_231: House_exterior__houseexterior.houseexterior) (temp___skip_top_level_232: bool) =
    ((House_exterior__houseexterior.attr__tag temp___expr_231)
       = House_exterior__houseexterior.__tag)
  
  val default_initial_assumption (temp___expr_231: House_exterior__houseexterior.houseexterior) (temp___skip_top_level_232: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_231 :
                       House_exterior__houseexterior.houseexterior))
                   (temp___skip_top_level_232 : bool)) }
end

module Main__print_status__air
  use _gnatprove_standard.Main
  use int.Int
  use Clean_air__cleanair as Clean_air__cleanair
  
  val air__split_fields : Clean_air__cleanair.__split_fields__ref
  
  val function air__attr__tag : int
end

module Clean_air__cleanair___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Clean_air__cleanair as Clean_air__cleanair
  
  predicate dynamic_invariant (temp___expr_252: Clean_air__cleanair.cleanair) (temp___is_init_248: bool) (temp___skip_constant_249: bool) (temp___do_toplevel_250: bool) (temp___do_typ_inv_251: bool) =
    true
  
  val dynamic_invariant (temp___expr_252: Clean_air__cleanair.cleanair) (temp___is_init_248: bool) (temp___skip_constant_249: bool) (temp___do_toplevel_250: bool) (temp___do_typ_inv_251: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_252 : Clean_air__cleanair.cleanair))
                      (temp___is_init_248 : bool))
                     (temp___skip_constant_249 : bool))
                    (temp___do_toplevel_250 : bool))
                   (temp___do_typ_inv_251 : bool)) }
  
  predicate default_initial_assumption (temp___expr_253: Clean_air__cleanair.cleanair) (temp___skip_top_level_254: bool) =
    ((Clean_air__cleanair.attr__tag temp___expr_253)
       = Clean_air__cleanair.__tag)
  
  val default_initial_assumption (temp___expr_253: Clean_air__cleanair.cleanair) (temp___skip_top_level_254: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_253 : Clean_air__cleanair.cleanair))
                   (temp___skip_top_level_254 : bool)) }
end

module Main__print_status__appliances
  use _gnatprove_standard.Main
  use int.Int
  use House_appliances__houseappliances as House_appliances__houseappliances
  
  val appliances__split_fields : House_appliances__houseappliances.__split_fields__ref
  
  val function appliances__attr__tag : int
end

module House_appliances__houseappliances___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_appliances__houseappliances as House_appliances__houseappliances
  
  predicate dynamic_invariant (temp___expr_275: House_appliances__houseappliances.houseappliances) (temp___is_init_271: bool) (temp___skip_constant_272: bool) (temp___do_toplevel_273: bool) (temp___do_typ_inv_274: bool) =
    true
  
  val dynamic_invariant (temp___expr_275: House_appliances__houseappliances.houseappliances) (temp___is_init_271: bool) (temp___skip_constant_272: bool) (temp___do_toplevel_273: bool) (temp___do_typ_inv_274: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_275 :
                          House_appliances__houseappliances.houseappliances))
                      (temp___is_init_271 : bool))
                     (temp___skip_constant_272 : bool))
                    (temp___do_toplevel_273 : bool))
                   (temp___do_typ_inv_274 : bool)) }
  
  predicate default_initial_assumption (temp___expr_276: House_appliances__houseappliances.houseappliances) (temp___skip_top_level_277: bool) =
    ((House_appliances__houseappliances.attr__tag temp___expr_276)
       = House_appliances__houseappliances.__tag)
  
  val default_initial_assumption (temp___expr_276: House_appliances__houseappliances.houseappliances) (temp___skip_top_level_277: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_276 :
                       House_appliances__houseappliances.houseappliances))
                   (temp___skip_top_level_277 : bool)) }
end

module Ada___ada__text_io__line_length__2
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  
  val function line_length (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) : int
  
  val predicate line_length__function_guard (temp___result_161: int) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private)
end

module Ada___ada__text_io__page_length__2
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  
  val function page_length (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) : int
  
  val predicate page_length__function_guard (temp___result_162: int) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private)
end

module Ada___ada__text_io__current_err
  use _gnatprove_standard.Main
  use int.Int
  
  val current_err : Main.__private__ref
end

module Ada___ada__text_io__file_system
  use _gnatprove_standard.Main
  use int.Int
  
  val file_system : Main.__private__ref
end

module Ada___ada__text_io__standard_in
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_in : Main.__private__ref
end

module Ada___ada__text_io__standard_out
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_out : Main.__private__ref
end

module Ada___ada__text_io__standard_err
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_err : Main.__private__ref
end

module Ada___ada__text_io__current_in
  use _gnatprove_standard.Main
  use int.Int
  
  val current_in : Main.__private__ref
end

module Ada___ada__text_io__current_out
  use _gnatprove_standard.Main
  use int.Int
  
  val current_out : Main.__private__ref
end

module Ada___ada__text_io__put__4___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Standard__string as Standard__string
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  
  val put (item: Standard__string.string__) : unit
    reads { Ada___ada__text_io__current_err.current_err,
      Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out }
    requires { true }
    writes { Ada___ada__text_io__current_err.current_err, Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out }
    ensures { (([@GP_Pretty_Ada:3064]
                ((old (((((((Ada___ada__text_io__line_length__2.line_length
                               (Main.__private__content
                                   Ada___ada__text_io__current_err.current_err))
                              (Main.__private__content
                                  Ada___ada__text_io__file_system.file_system))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_in.standard_in))
                            (Main.__private__content
                                Ada___ada__text_io__standard_out.standard_out))
                           (Main.__private__content
                               Ada___ada__text_io__standard_err.standard_err))
                          (Main.__private__content
                              Ada___ada__text_io__current_in.current_in))
                         (Main.__private__content
                             Ada___ada__text_io__current_out.current_out)))
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__current_err.current_err))
                             (Main.__private__content
                                 Ada___ada__text_io__file_system.file_system))
                            (Main.__private__content
                                Ada___ada__text_io__standard_in.standard_in))
                           (Main.__private__content
                               Ada___ada__text_io__standard_out.standard_out))
                          (Main.__private__content
                              Ada___ada__text_io__standard_err.standard_err))
                         (Main.__private__content
                             Ada___ada__text_io__current_in.current_in))
                        (Main.__private__content
                            Ada___ada__text_io__current_out.current_out)))) /\
                 ([@GP_Pretty_Ada:3070]
                  ((old (((((((Ada___ada__text_io__page_length__2.page_length
                                 (Main.__private__content
                                     Ada___ada__text_io__current_err.current_err))
                                (Main.__private__content
                                    Ada___ada__text_io__file_system.file_system))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_in.standard_in))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_out.standard_out))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_err.standard_err))
                            (Main.__private__content
                                Ada___ada__text_io__current_in.current_in))
                           (Main.__private__content
                               Ada___ada__text_io__current_out.current_out)))
                     = (((((((Ada___ada__text_io__page_length__2.page_length
                                (Main.__private__content
                                    Ada___ada__text_io__current_err.current_err))
                               (Main.__private__content
                                   Ada___ada__text_io__file_system.file_system))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_in.standard_in))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_out.standard_out))
                            (Main.__private__content
                                Ada___ada__text_io__standard_err.standard_err))
                           (Main.__private__content
                               Ada___ada__text_io__current_in.current_in))
                          (Main.__private__content
                              Ada___ada__text_io__current_out.current_out))))) }
end

module Ada___ada__text_io__put_line__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Standard__string as Standard__string
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  
  val put_line (item: Standard__string.string__) : unit
    reads { Ada___ada__text_io__current_err.current_err,
      Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out }
    requires { true }
    writes { Ada___ada__text_io__current_err.current_err, Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out }
    ensures { (([@GP_Pretty_Ada:3286]
                ((old (((((((Ada___ada__text_io__line_length__2.line_length
                               (Main.__private__content
                                   Ada___ada__text_io__current_err.current_err))
                              (Main.__private__content
                                  Ada___ada__text_io__file_system.file_system))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_in.standard_in))
                            (Main.__private__content
                                Ada___ada__text_io__standard_out.standard_out))
                           (Main.__private__content
                               Ada___ada__text_io__standard_err.standard_err))
                          (Main.__private__content
                              Ada___ada__text_io__current_in.current_in))
                         (Main.__private__content
                             Ada___ada__text_io__current_out.current_out)))
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__current_err.current_err))
                             (Main.__private__content
                                 Ada___ada__text_io__file_system.file_system))
                            (Main.__private__content
                                Ada___ada__text_io__standard_in.standard_in))
                           (Main.__private__content
                               Ada___ada__text_io__standard_out.standard_out))
                          (Main.__private__content
                              Ada___ada__text_io__standard_err.standard_err))
                         (Main.__private__content
                             Ada___ada__text_io__current_in.current_in))
                        (Main.__private__content
                            Ada___ada__text_io__current_out.current_out)))) /\
                 ([@GP_Pretty_Ada:3292]
                  ((old (((((((Ada___ada__text_io__page_length__2.page_length
                                 (Main.__private__content
                                     Ada___ada__text_io__current_err.current_err))
                                (Main.__private__content
                                    Ada___ada__text_io__file_system.file_system))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_in.standard_in))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_out.standard_out))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_err.standard_err))
                            (Main.__private__content
                                Ada___ada__text_io__current_in.current_in))
                           (Main.__private__content
                               Ada___ada__text_io__current_out.current_out)))
                     = (((((((Ada___ada__text_io__page_length__2.page_length
                                (Main.__private__content
                                    Ada___ada__text_io__current_err.current_err))
                               (Main.__private__content
                                   Ada___ada__text_io__file_system.file_system))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_in.standard_in))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_out.standard_out))
                            (Main.__private__content
                                Ada___ada__text_io__standard_err.standard_err))
                           (Main.__private__content
                               Ada___ada__text_io__current_in.current_in))
                          (Main.__private__content
                              Ada___ada__text_io__current_out.current_out))))) }
end

module Temp___String_Literal_365
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_365 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_365__def_axiom:
    forall __void_param : unit [temp___String_Literal_365 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_365 __void_param))
               (1 : int)))
           = (27 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_365 __void_param))
                 (2 : int)))
             = (91 : int))) /\
         (((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_365 __void_param))
                 (3 : int)))
             = (50 : int)) /\
            ((Standard__character__rep.to_rep
                ((Array__Int__Standard__character.get
                    (temp___String_Literal_365 __void_param))
                   (4 : int)))
               = (74 : int))))
end

module Temp___String_Literal_367
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_367 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_367__def_axiom:
    forall __void_param : unit [temp___String_Literal_367 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_367 __void_param))
               (1 : int)))
           = (83 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_367 __void_param))
                 (2 : int)))
             = (105 : int))) /\
         ((((((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_367 __void_param))
                      (3 : int)))
                  = (109 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_367 __void_param))
                        (4 : int)))
                    = (117 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_367 __void_param))
                        (5 : int)))
                    = (108 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_367 __void_param))
                          (6 : int)))
                      = (97 : int)))) /\
               ((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_367 __void_param))
                        (7 : int)))
                    = (116 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_367 __void_param))
                          (8 : int)))
                      = (105 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_367 __void_param))
                         (9 : int)))
                     = (111 : int)))) /\
              (((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_367 __void_param))
                        (10 : int)))
                    = (110 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_367 __void_param))
                          (11 : int)))
                      = (32 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_367 __void_param))
                         (12 : int)))
                     = (111 : int))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_367 __void_param))
                          (13 : int)))
                      = (102 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_367 __void_param))
                            (14 : int)))
                        = (32 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_367 __void_param))
                           (15 : int)))
                       = (97 : int))))) /\
             ((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_367 __void_param))
                        (16 : int)))
                    = (32 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_367 __void_param))
                          (17 : int)))
                      = (72 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_367 __void_param))
                          (18 : int)))
                      = (111 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_367 __void_param))
                            (19 : int)))
                        = (117 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_367 __void_param))
                          (20 : int)))
                      = (115 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_367 __void_param))
                            (21 : int)))
                        = (101 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_367 __void_param))
                           (22 : int)))
                       = (32 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_367 __void_param))
                          (23 : int)))
                      = (69 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_367 __void_param))
                            (24 : int)))
                        = (99 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_367 __void_param))
                           (25 : int)))
                       = (111 : int))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_367 __void_param))
                            (26 : int)))
                        = (32 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_367 __void_param))
                              (27 : int)))
                          = (67 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_367 __void_param))
                             (28 : int)))
                         = (111 : int)))))) /\
            (((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_367 __void_param))
                        (29 : int)))
                    = (110 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_367 __void_param))
                          (30 : int)))
                      = (116 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_367 __void_param))
                          (31 : int)))
                      = (114 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_367 __void_param))
                            (32 : int)))
                        = (111 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_367 __void_param))
                          (33 : int)))
                      = (108 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_367 __void_param))
                            (34 : int)))
                        = (32 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_367 __void_param))
                           (35 : int)))
                       = (83 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_367 __void_param))
                          (36 : int)))
                      = (121 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_367 __void_param))
                            (37 : int)))
                        = (115 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_367 __void_param))
                           (38 : int)))
                       = (116 : int))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_367 __void_param))
                            (39 : int)))
                        = (101 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_367 __void_param))
                              (40 : int)))
                          = (109 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_367 __void_param))
                             (41 : int)))
                         = (32 : int))))) /\
               ((((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_367 __void_param))
                          (42 : int)))
                      = (70 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_367 __void_param))
                            (43 : int)))
                        = (111 : int))) /\
                    (((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_367 __void_param))
                            (44 : int)))
                        = (114 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_367 __void_param))
                              (45 : int)))
                          = (32 : int)))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_367 __void_param))
                            (46 : int)))
                        = (68 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_367 __void_param))
                              (47 : int)))
                          = (101 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_367 __void_param))
                             (48 : int)))
                         = (98 : int)))) /\
                  (((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_367 __void_param))
                            (49 : int)))
                        = (117 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_367 __void_param))
                              (50 : int)))
                          = (103 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_367 __void_param))
                             (51 : int)))
                         = (103 : int))) /\
                     ((((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_367 __void_param))
                              (52 : int)))
                          = (105 : int)) /\
                         ((Standard__character__rep.to_rep
                             ((Array__Int__Standard__character.get
                                 (temp___String_Literal_367 __void_param))
                                (53 : int)))
                            = (110 : int))) /\
                        ((Standard__character__rep.to_rep
                            ((Array__Int__Standard__character.get
                                (temp___String_Literal_367 __void_param))
                               (54 : int)))
                           = (103 : int))))))))
end

module Temp___String_Literal_369
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_369 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_369__def_axiom:
    forall __void_param : unit [temp___String_Literal_369 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_369 __void_param))
               (1 : int)))
           = (45 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_369 __void_param))
                 (2 : int)))
             = (45 : int))) /\
         ((((((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_369 __void_param))
                      (3 : int)))
                  = (45 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_369 __void_param))
                        (4 : int)))
                    = (45 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_369 __void_param))
                        (5 : int)))
                    = (45 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_369 __void_param))
                          (6 : int)))
                      = (45 : int)))) /\
               ((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_369 __void_param))
                        (7 : int)))
                    = (45 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_369 __void_param))
                          (8 : int)))
                      = (45 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_369 __void_param))
                         (9 : int)))
                     = (45 : int)))) /\
              (((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_369 __void_param))
                        (10 : int)))
                    = (45 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_369 __void_param))
                          (11 : int)))
                      = (45 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_369 __void_param))
                          (12 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_369 __void_param))
                            (13 : int)))
                        = (45 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_369 __void_param))
                          (14 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_369 __void_param))
                            (15 : int)))
                        = (45 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_369 __void_param))
                           (16 : int)))
                       = (45 : int))))) /\
             ((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_369 __void_param))
                        (17 : int)))
                    = (45 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_369 __void_param))
                          (18 : int)))
                      = (45 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_369 __void_param))
                          (19 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_369 __void_param))
                            (20 : int)))
                        = (45 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_369 __void_param))
                          (21 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_369 __void_param))
                            (22 : int)))
                        = (45 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_369 __void_param))
                           (23 : int)))
                       = (45 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_369 __void_param))
                          (24 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_369 __void_param))
                            (25 : int)))
                        = (45 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_369 __void_param))
                           (26 : int)))
                       = (45 : int))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_369 __void_param))
                            (27 : int)))
                        = (45 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_369 __void_param))
                              (28 : int)))
                          = (45 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_369 __void_param))
                             (29 : int)))
                         = (45 : int)))))) /\
            (((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_369 __void_param))
                        (30 : int)))
                    = (45 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_369 __void_param))
                          (31 : int)))
                      = (45 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_369 __void_param))
                          (32 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_369 __void_param))
                            (33 : int)))
                        = (45 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_369 __void_param))
                          (34 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_369 __void_param))
                            (35 : int)))
                        = (45 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_369 __void_param))
                           (36 : int)))
                       = (45 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_369 __void_param))
                          (37 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_369 __void_param))
                            (38 : int)))
                        = (45 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_369 __void_param))
                           (39 : int)))
                       = (45 : int))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_369 __void_param))
                            (40 : int)))
                        = (45 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_369 __void_param))
                              (41 : int)))
                          = (45 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_369 __void_param))
                             (42 : int)))
                         = (45 : int))))) /\
               ((((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_369 __void_param))
                          (43 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_369 __void_param))
                            (44 : int)))
                        = (45 : int))) /\
                    (((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_369 __void_param))
                            (45 : int)))
                        = (45 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_369 __void_param))
                              (46 : int)))
                          = (45 : int)))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_369 __void_param))
                            (47 : int)))
                        = (45 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_369 __void_param))
                              (48 : int)))
                          = (45 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_369 __void_param))
                             (49 : int)))
                         = (45 : int)))) /\
                  (((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_369 __void_param))
                            (50 : int)))
                        = (45 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_369 __void_param))
                              (51 : int)))
                          = (45 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_369 __void_param))
                             (52 : int)))
                         = (45 : int))) /\
                     ((((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_369 __void_param))
                              (53 : int)))
                          = (45 : int)) /\
                         ((Standard__character__rep.to_rep
                             ((Array__Int__Standard__character.get
                                 (temp___String_Literal_369 __void_param))
                                (54 : int)))
                            = (45 : int))) /\
                        ((Standard__character__rep.to_rep
                            ((Array__Int__Standard__character.get
                                (temp___String_Literal_369 __void_param))
                               (55 : int)))
                           = (45 : int))))))))
end

module Temp___String_Literal_371
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_371 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_371__def_axiom:
    forall __void_param : unit [temp___String_Literal_371 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_371 __void_param))
               (1 : int)))
           = (67 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_371 __void_param))
                 (2 : int)))
             = (44 : int))) /\
         ((Standard__character__rep.to_rep
             ((Array__Int__Standard__character.get
                 (temp___String_Literal_371 __void_param))
                (3 : int)))
            = (32 : int)))
end

module Temp___String_Literal_372
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_372 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_372__def_axiom:
    forall __void_param : unit [temp___String_Literal_372 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_372 __void_param))
               (1 : int)))
           = (84 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_372 __void_param))
                 (2 : int)))
             = (101 : int))) /\
         ((((((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_372 __void_param))
                    (3 : int)))
                = (109 : int)) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_372 __void_param))
                      (4 : int)))
                  = (112 : int))) /\
              ((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_372 __void_param))
                     (5 : int)))
                 = (101 : int))) /\
             ((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_372 __void_param))
                      (6 : int)))
                  = (114 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_372 __void_param))
                        (7 : int)))
                    = (97 : int))) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_372 __void_param))
                       (8 : int)))
                   = (116 : int)))) /\
            (((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_372 __void_param))
                      (9 : int)))
                  = (117 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_372 __void_param))
                        (10 : int)))
                    = (114 : int))) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_372 __void_param))
                       (11 : int)))
                   = (101 : int))) /\
               (((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_372 __void_param))
                       (12 : int)))
                   = (58 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_372 __void_param))
                         (13 : int)))
                     = (32 : int))))))
end

module Temp___String_Literal_377
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_377 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_377__def_axiom:
    forall __void_param : unit [temp___String_Literal_377 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_377 __void_param))
               (1 : int)))
           = (72 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_377 __void_param))
                 (2 : int)))
             = (101 : int))) /\
         ((((((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_377 __void_param))
                    (3 : int)))
                = (97 : int)) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_377 __void_param))
                      (4 : int)))
                  = (116 : int))) /\
              (((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_377 __void_param))
                      (5 : int)))
                  = (101 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_377 __void_param))
                        (6 : int)))
                    = (114 : int)))) /\
             ((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_377 __void_param))
                      (7 : int)))
                  = (32 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_377 __void_param))
                        (8 : int)))
                    = (83 : int))) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_377 __void_param))
                       (9 : int)))
                   = (116 : int)))) /\
            (((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_377 __void_param))
                      (10 : int)))
                  = (97 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_377 __void_param))
                        (11 : int)))
                    = (116 : int))) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_377 __void_param))
                       (12 : int)))
                   = (117 : int))) /\
               ((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_377 __void_param))
                        (13 : int)))
                    = (115 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_377 __void_param))
                          (14 : int)))
                      = (58 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_377 __void_param))
                         (15 : int)))
                     = (32 : int))))))
end

module Temp___String_Literal_380
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_380 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_380__def_axiom:
    forall __void_param : unit [temp___String_Literal_380 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_380 __void_param))
               (1 : int)))
           = (87 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_380 __void_param))
                 (2 : int)))
             = (105 : int))) /\
         (((((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_380 __void_param))
                     (3 : int)))
                 = (110 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_380 __void_param))
                       (4 : int)))
                   = (100 : int))) /\
               (((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_380 __void_param))
                       (5 : int)))
                   = (111 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_380 __void_param))
                         (6 : int)))
                     = (119 : int)))) /\
              ((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_380 __void_param))
                       (7 : int)))
                   = (32 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_380 __void_param))
                         (8 : int)))
                     = (97 : int))) /\
                 (((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_380 __void_param))
                         (9 : int)))
                     = (110 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_380 __void_param))
                           (10 : int)))
                       = (100 : int))))) /\
             (((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_380 __void_param))
                       (11 : int)))
                   = (32 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_380 __void_param))
                         (12 : int)))
                     = (69 : int))) /\
                 (((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_380 __void_param))
                         (13 : int)))
                     = (120 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_380 __void_param))
                           (14 : int)))
                       = (116 : int)))) /\
                ((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_380 __void_param))
                         (15 : int)))
                     = (101 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_380 __void_param))
                           (16 : int)))
                       = (114 : int))) /\
                   (((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_380 __void_param))
                           (17 : int)))
                       = (105 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_380 __void_param))
                             (18 : int)))
                         = (111 : int)))))) /\
            ((((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_380 __void_param))
                       (19 : int)))
                   = (114 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_380 __void_param))
                         (20 : int)))
                     = (32 : int))) /\
                 (((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_380 __void_param))
                         (21 : int)))
                     = (68 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_380 __void_param))
                           (22 : int)))
                       = (111 : int)))) /\
                ((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_380 __void_param))
                         (23 : int)))
                     = (111 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_380 __void_param))
                           (24 : int)))
                       = (114 : int))) /\
                   (((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_380 __void_param))
                           (25 : int)))
                       = (115 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_380 __void_param))
                             (26 : int)))
                         = (32 : int))))) /\
               (((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_380 __void_param))
                         (27 : int)))
                     = (83 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_380 __void_param))
                           (28 : int)))
                       = (116 : int))) /\
                   (((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_380 __void_param))
                           (29 : int)))
                       = (97 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_380 __void_param))
                             (30 : int)))
                         = (116 : int)))) /\
                  ((((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_380 __void_param))
                           (31 : int)))
                       = (117 : int)) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_380 __void_param))
                             (32 : int)))
                         = (115 : int))) /\
                     (((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_380 __void_param))
                             (33 : int)))
                         = (58 : int)) /\
                        ((Standard__character__rep.to_rep
                            ((Array__Int__Standard__character.get
                                (temp___String_Literal_380 __void_param))
                               (34 : int)))
                           = (32 : int))))))))
end

module Temp___String_Literal_383
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_383 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_383__def_axiom:
    forall __void_param : unit [temp___String_Literal_383 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_383 __void_param))
               (1 : int)))
           = (85 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_383 __void_param))
                 (2 : int)))
             = (110 : int))) /\
         (((((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_383 __void_param))
                     (3 : int)))
                 = (108 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_383 __void_param))
                       (4 : int)))
                   = (111 : int))) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_383 __void_param))
                      (5 : int)))
                  = (99 : int))) /\
              (((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_383 __void_param))
                      (6 : int)))
                  = (107 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_383 __void_param))
                        (7 : int)))
                    = (101 : int)))) /\
             ((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_383 __void_param))
                      (8 : int)))
                  = (100 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_383 __void_param))
                        (9 : int)))
                    = (32 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_383 __void_param))
                        (10 : int)))
                    = (65 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_383 __void_param))
                          (11 : int)))
                      = (112 : int))))) /\
            ((((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_383 __void_param))
                       (12 : int)))
                   = (112 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_383 __void_param))
                         (13 : int)))
                     = (108 : int))) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_383 __void_param))
                        (14 : int)))
                    = (105 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_383 __void_param))
                        (15 : int)))
                    = (97 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_383 __void_param))
                          (16 : int)))
                      = (110 : int)))) /\
               ((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_383 __void_param))
                        (17 : int)))
                    = (99 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_383 __void_param))
                          (18 : int)))
                      = (101 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_383 __void_param))
                          (19 : int)))
                      = (58 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_383 __void_param))
                            (20 : int)))
                        = (32 : int)))))))
end

module Temp___String_Literal_386
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_386 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_386__def_axiom:
    forall __void_param : unit [temp___String_Literal_386 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_386 __void_param))
               (1 : int)))
           = (76 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_386 __void_param))
                 (2 : int)))
             = (111 : int))) /\
         ((((((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_386 __void_param))
                    (3 : int)))
                = (99 : int)) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_386 __void_param))
                      (4 : int)))
                  = (107 : int))) /\
              (((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_386 __void_param))
                      (5 : int)))
                  = (101 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_386 __void_param))
                        (6 : int)))
                    = (100 : int)))) /\
             ((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_386 __void_param))
                      (7 : int)))
                  = (32 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_386 __void_param))
                        (8 : int)))
                    = (65 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_386 __void_param))
                        (9 : int)))
                    = (112 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_386 __void_param))
                          (10 : int)))
                      = (112 : int))))) /\
            (((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_386 __void_param))
                      (11 : int)))
                  = (108 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_386 __void_param))
                        (12 : int)))
                    = (105 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_386 __void_param))
                        (13 : int)))
                    = (97 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_386 __void_param))
                          (14 : int)))
                      = (110 : int)))) /\
               ((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_386 __void_param))
                        (15 : int)))
                    = (99 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_386 __void_param))
                          (16 : int)))
                      = (101 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_386 __void_param))
                          (17 : int)))
                      = (58 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_386 __void_param))
                            (18 : int)))
                        = (32 : int)))))))
end

module Temp___String_Literal_389
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_389 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_389__def_axiom:
    forall __void_param : unit [temp___String_Literal_389 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_389 __void_param))
               (1 : int)))
           = (80 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_389 __void_param))
                 (2 : int)))
             = (80 : int))) /\
         ((Standard__character__rep.to_rep
             ((Array__Int__Standard__character.get
                 (temp___String_Literal_389 __void_param))
                (3 : int)))
            = (77 : int)))
end

module Temp___String_Literal_390
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_390 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_390__def_axiom:
    forall __void_param : unit [temp___String_Literal_390 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_390 __void_param))
               (1 : int)))
           = (67 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_390 __void_param))
                 (2 : int)))
             = (97 : int))) /\
         (((((((Standard__character__rep.to_rep
                  ((Array__Int__Standard__character.get
                      (temp___String_Literal_390 __void_param))
                     (3 : int)))
                 = (114 : int)) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_390 __void_param))
                       (4 : int)))
                   = (98 : int))) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_390 __void_param))
                      (5 : int)))
                  = (111 : int))) /\
              ((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_390 __void_param))
                       (6 : int)))
                   = (110 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_390 __void_param))
                         (7 : int)))
                     = (32 : int))) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_390 __void_param))
                        (8 : int)))
                    = (77 : int)))) /\
             (((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_390 __void_param))
                       (9 : int)))
                   = (111 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_390 __void_param))
                         (10 : int)))
                     = (110 : int))) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_390 __void_param))
                        (11 : int)))
                    = (111 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_390 __void_param))
                        (12 : int)))
                    = (120 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_390 __void_param))
                          (13 : int)))
                      = (105 : int))))) /\
            ((((((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_390 __void_param))
                       (14 : int)))
                   = (100 : int)) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_390 __void_param))
                         (15 : int)))
                     = (101 : int))) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_390 __void_param))
                        (16 : int)))
                    = (32 : int))) /\
                ((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_390 __void_param))
                         (17 : int)))
                     = (76 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_390 __void_param))
                           (18 : int)))
                       = (101 : int))) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_390 __void_param))
                          (19 : int)))
                      = (118 : int)))) /\
               (((((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_390 __void_param))
                         (20 : int)))
                     = (101 : int)) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_390 __void_param))
                           (21 : int)))
                       = (108 : int))) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_390 __void_param))
                          (22 : int)))
                      = (115 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_390 __void_param))
                          (23 : int)))
                      = (58 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_390 __void_param))
                            (24 : int)))
                        = (32 : int)))))))
end

module Temp___String_Literal_395
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_395 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_395__def_axiom:
    forall __void_param : unit [temp___String_Literal_395 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_395 __void_param))
               (1 : int)))
           = (65 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_395 __void_param))
                 (2 : int)))
             = (105 : int))) /\
         ((((((Standard__character__rep.to_rep
                 ((Array__Int__Standard__character.get
                     (temp___String_Literal_395 __void_param))
                    (3 : int)))
                = (114 : int)) /\
               ((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_395 __void_param))
                      (4 : int)))
                  = (32 : int))) /\
              (((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_395 __void_param))
                      (5 : int)))
                  = (67 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_395 __void_param))
                        (6 : int)))
                    = (108 : int)))) /\
             ((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_395 __void_param))
                      (7 : int)))
                  = (101 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_395 __void_param))
                        (8 : int)))
                    = (97 : int))) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_395 __void_param))
                       (9 : int)))
                   = (110 : int)))) /\
            (((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_395 __void_param))
                      (10 : int)))
                  = (115 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_395 __void_param))
                        (11 : int)))
                    = (105 : int))) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_395 __void_param))
                       (12 : int)))
                   = (110 : int))) /\
               ((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_395 __void_param))
                        (13 : int)))
                    = (103 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_395 __void_param))
                          (14 : int)))
                      = (58 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_395 __void_param))
                         (15 : int)))
                     = (32 : int))))))
end

module Temp___String_Literal_398
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_398 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_398__def_axiom:
    forall __void_param : unit [temp___String_Literal_398 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_398 __void_param))
               (1 : int)))
           = (45 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_398 __void_param))
                 (2 : int)))
             = (45 : int))) /\
         ((((((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_398 __void_param))
                      (3 : int)))
                  = (45 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_398 __void_param))
                        (4 : int)))
                    = (45 : int))) /\
                (((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_398 __void_param))
                        (5 : int)))
                    = (45 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_398 __void_param))
                          (6 : int)))
                      = (45 : int)))) /\
               ((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_398 __void_param))
                        (7 : int)))
                    = (45 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_398 __void_param))
                          (8 : int)))
                      = (45 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_398 __void_param))
                         (9 : int)))
                     = (45 : int)))) /\
              (((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_398 __void_param))
                        (10 : int)))
                    = (45 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_398 __void_param))
                          (11 : int)))
                      = (45 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_398 __void_param))
                          (12 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_398 __void_param))
                            (13 : int)))
                        = (45 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_398 __void_param))
                          (14 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_398 __void_param))
                            (15 : int)))
                        = (45 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_398 __void_param))
                           (16 : int)))
                       = (45 : int))))) /\
             ((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_398 __void_param))
                        (17 : int)))
                    = (45 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_398 __void_param))
                          (18 : int)))
                      = (45 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_398 __void_param))
                          (19 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_398 __void_param))
                            (20 : int)))
                        = (45 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_398 __void_param))
                          (21 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_398 __void_param))
                            (22 : int)))
                        = (45 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_398 __void_param))
                           (23 : int)))
                       = (45 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_398 __void_param))
                          (24 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_398 __void_param))
                            (25 : int)))
                        = (45 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_398 __void_param))
                           (26 : int)))
                       = (45 : int))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_398 __void_param))
                            (27 : int)))
                        = (45 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_398 __void_param))
                              (28 : int)))
                          = (45 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_398 __void_param))
                             (29 : int)))
                         = (45 : int)))))) /\
            (((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_398 __void_param))
                        (30 : int)))
                    = (45 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_398 __void_param))
                          (31 : int)))
                      = (45 : int))) /\
                  (((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_398 __void_param))
                          (32 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_398 __void_param))
                            (33 : int)))
                        = (45 : int)))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_398 __void_param))
                          (34 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_398 __void_param))
                            (35 : int)))
                        = (45 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_398 __void_param))
                           (36 : int)))
                       = (45 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_398 __void_param))
                          (37 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_398 __void_param))
                            (38 : int)))
                        = (45 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_398 __void_param))
                           (39 : int)))
                       = (45 : int))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_398 __void_param))
                            (40 : int)))
                        = (45 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_398 __void_param))
                              (41 : int)))
                          = (45 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_398 __void_param))
                             (42 : int)))
                         = (45 : int))))) /\
               ((((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_398 __void_param))
                          (43 : int)))
                      = (45 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_398 __void_param))
                            (44 : int)))
                        = (45 : int))) /\
                    (((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_398 __void_param))
                            (45 : int)))
                        = (45 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_398 __void_param))
                              (46 : int)))
                          = (45 : int)))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_398 __void_param))
                            (47 : int)))
                        = (45 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_398 __void_param))
                              (48 : int)))
                          = (45 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_398 __void_param))
                             (49 : int)))
                         = (45 : int)))) /\
                  (((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_398 __void_param))
                            (50 : int)))
                        = (45 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_398 __void_param))
                              (51 : int)))
                          = (45 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_398 __void_param))
                             (52 : int)))
                         = (45 : int))) /\
                     ((((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_398 __void_param))
                              (53 : int)))
                          = (45 : int)) /\
                         ((Standard__character__rep.to_rep
                             ((Array__Int__Standard__character.get
                                 (temp___String_Literal_398 __void_param))
                                (54 : int)))
                            = (45 : int))) /\
                        ((Standard__character__rep.to_rep
                            ((Array__Int__Standard__character.get
                                (temp___String_Literal_398 __void_param))
                               (55 : int)))
                           = (45 : int))))))))
end

module Standard__positive___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__positive as Standard__positive
  
  predicate dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) =
    if ((temp___is_init_49 = True) \/
          (Standard__positive.first <= Standard__positive.last)) then
      (((Standard__positive.dynamic_property Standard__positive.first)
          Standard__positive.last)
         temp___expr_53)
    else true
  
  val dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_53 : int))
                      (temp___is_init_49 : bool))
                     (temp___skip_constant_50 : bool))
                    (temp___do_toplevel_51 : bool))
                   (temp___do_typ_inv_52 : bool)) }
  
  predicate default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) =
    true
  
  val default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_54 : int))
                   (temp___skip_top_level_55 : bool)) }
end

module Standard__character___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  
  predicate dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) =
    if ((temp___is_init_77 = True) \/
          (Standard__character.first <= Standard__character.last)) then
      (((Standard__character.dynamic_property Standard__character.first)
          Standard__character.last)
         temp___expr_81)
    else true
  
  val dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_81 : int))
                      (temp___is_init_77 : bool))
                     (temp___skip_constant_78 : bool))
                    (temp___do_toplevel_79 : bool))
                   (temp___do_typ_inv_80 : bool)) }
  
  predicate default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) =
    true
  
  val default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_82 : int))
                   (temp___skip_top_level_83 : bool)) }
end

module Standard__string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__positive as Standard__positive
  use Standard__string as Standard__string
  
  predicate dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) =
    if temp___skip_constant_100 then true
    else
      ((((Standard__string.dynamic_property Standard__positive.first)
           Standard__positive.last)
          (Standard__string.first temp___expr_103))
         (Standard__string.last temp___expr_103))
  
  val dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_103 : Standard__string.string__))
                      (temp___is_init_99 : bool))
                     (temp___skip_constant_100 : bool))
                    (temp___do_toplevel_101 : bool))
                   (temp___do_typ_inv_102 : bool)) }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Main__system___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__print_status__heating___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__print_status__exterior___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__print_status__air___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__print_status__appliances___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Ada___ada__text_io__count
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type count = <range 0 2147483647>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = count,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type count__ref = { mutable count__content : count }
  
  function count__ref_count__content__projection (a: count__ref) : count =
    a.count__content
  
  meta "model_projection" function count__ref_count__content__projection
  
  meta "inline:no" function count__ref_count__content__projection
  
  val count__havoc (x: count__ref) : unit
    writes { x }
end

module Ada___ada__text_io__count___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Ada___ada__text_io__count as Ada___ada__text_io__count
  
  predicate dynamic_invariant (temp___expr_172: int) (temp___is_init_168: bool) (temp___skip_constant_169: bool) (temp___do_toplevel_170: bool) (temp___do_typ_inv_171: bool) =
    if ((temp___is_init_168 = True) \/
          (Ada___ada__text_io__count.first <= Ada___ada__text_io__count.last)) then
      (((Ada___ada__text_io__count.dynamic_property
           Ada___ada__text_io__count.first)
          Ada___ada__text_io__count.last)
         temp___expr_172)
    else true
  
  val dynamic_invariant (temp___expr_172: int) (temp___is_init_168: bool) (temp___skip_constant_169: bool) (temp___do_toplevel_170: bool) (temp___do_typ_inv_171: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_172 : int))
                      (temp___is_init_168 : bool))
                     (temp___skip_constant_169 : bool))
                    (temp___do_toplevel_170 : bool))
                   (temp___do_typ_inv_171 : bool)) }
  
  predicate default_initial_assumption (temp___expr_173: int) (temp___skip_top_level_174: bool) =
    true
  
  val default_initial_assumption (temp___expr_173: int) (temp___skip_top_level_174: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_173 : int))
                   (temp___skip_top_level_174 : bool)) }
end

module Ada___ada__text_io__line_length__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  
  val line_length (__void_param: unit) : int
    reads { Ada___ada__text_io__current_err.current_err,
      Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out }
    requires { true }
    writes {  }
    ensures { (((result
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__current_err.current_err))
                             (Main.__private__content
                                 Ada___ada__text_io__file_system.file_system))
                            (Main.__private__content
                                Ada___ada__text_io__standard_in.standard_in))
                           (Main.__private__content
                               Ada___ada__text_io__standard_out.standard_out))
                          (Main.__private__content
                              Ada___ada__text_io__standard_err.standard_err))
                         (Main.__private__content
                             Ada___ada__text_io__current_in.current_in))
                        (Main.__private__content
                            Ada___ada__text_io__current_out.current_out))) /\
                  true) /\
                 (((((Ada___ada__text_io__count___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  axiom line_length__post_axiom:
    forall Ada___ada__text_io__current_err___current_err___ : Main.__private, Ada___ada__text_io__file_system___file_system___ : 
          Main.__private, Ada___ada__text_io__standard_in___standard_in___ : 
          Main.__private, Ada___ada__text_io__standard_out___standard_out___ : 
          Main.__private, Ada___ada__text_io__standard_err___standard_err___ : 
          Main.__private, Ada___ada__text_io__current_in___current_in___ : 
          Main.__private, Ada___ada__text_io__current_out___current_out___ : 
          Main.__private
          [((((((Ada___ada__text_io__line_length__2.line_length
                   Ada___ada__text_io__current_err___current_err___)
                  Ada___ada__text_io__file_system___file_system___)
                 Ada___ada__text_io__standard_in___standard_in___)
                Ada___ada__text_io__standard_out___standard_out___)
               Ada___ada__text_io__standard_err___standard_err___)
              Ada___ada__text_io__current_in___current_in___)
             Ada___ada__text_io__current_out___current_out___].
      let result =
        ((((((Ada___ada__text_io__line_length__2.line_length
                Ada___ada__text_io__current_err___current_err___)
               Ada___ada__text_io__file_system___file_system___)
              Ada___ada__text_io__standard_in___standard_in___)
             Ada___ada__text_io__standard_out___standard_out___)
            Ada___ada__text_io__standard_err___standard_err___)
           Ada___ada__text_io__current_in___current_in___)
          Ada___ada__text_io__current_out___current_out___ in
      ((true /\
          (((((Ada___ada__text_io__count___axiom.dynamic_invariant result)
                True)
               False)
              True)
             True)) /\
         true)
end

module Ada___ada__text_io__page_length__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  
  val page_length (__void_param: unit) : int
    reads { Ada___ada__text_io__current_err.current_err,
      Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out }
    requires { true }
    writes {  }
    ensures { (((result
                   = (((((((Ada___ada__text_io__page_length__2.page_length
                              (Main.__private__content
                                  Ada___ada__text_io__current_err.current_err))
                             (Main.__private__content
                                 Ada___ada__text_io__file_system.file_system))
                            (Main.__private__content
                                Ada___ada__text_io__standard_in.standard_in))
                           (Main.__private__content
                               Ada___ada__text_io__standard_out.standard_out))
                          (Main.__private__content
                              Ada___ada__text_io__standard_err.standard_err))
                         (Main.__private__content
                             Ada___ada__text_io__current_in.current_in))
                        (Main.__private__content
                            Ada___ada__text_io__current_out.current_out))) /\
                  true) /\
                 (((((Ada___ada__text_io__count___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  axiom page_length__post_axiom:
    forall Ada___ada__text_io__current_err___current_err___ : Main.__private, Ada___ada__text_io__file_system___file_system___ : 
          Main.__private, Ada___ada__text_io__standard_in___standard_in___ : 
          Main.__private, Ada___ada__text_io__standard_out___standard_out___ : 
          Main.__private, Ada___ada__text_io__standard_err___standard_err___ : 
          Main.__private, Ada___ada__text_io__current_in___current_in___ : 
          Main.__private, Ada___ada__text_io__current_out___current_out___ : 
          Main.__private
          [((((((Ada___ada__text_io__page_length__2.page_length
                   Ada___ada__text_io__current_err___current_err___)
                  Ada___ada__text_io__file_system___file_system___)
                 Ada___ada__text_io__standard_in___standard_in___)
                Ada___ada__text_io__standard_out___standard_out___)
               Ada___ada__text_io__standard_err___standard_err___)
              Ada___ada__text_io__current_in___current_in___)
             Ada___ada__text_io__current_out___current_out___].
      let result =
        ((((((Ada___ada__text_io__page_length__2.page_length
                Ada___ada__text_io__current_err___current_err___)
               Ada___ada__text_io__file_system___file_system___)
              Ada___ada__text_io__standard_in___standard_in___)
             Ada___ada__text_io__standard_out___standard_out___)
            Ada___ada__text_io__standard_err___standard_err___)
           Ada___ada__text_io__current_in___current_in___)
          Ada___ada__text_io__current_out___current_out___ in
      ((true /\
          (((((Ada___ada__text_io__count___axiom.dynamic_invariant result)
                True)
               False)
              True)
             True)) /\
         true)
end

module House_heating__heatingstatus___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_heating__heatingstatus as House_heating__heatingstatus
  
  predicate dynamic_invariant (temp___expr_207: int) (temp___is_init_203: bool) (temp___skip_constant_204: bool) (temp___do_toplevel_205: bool) (temp___do_typ_inv_206: bool) =
    if ((temp___is_init_203 = True) \/
          (House_heating__heatingstatus.first
             <= House_heating__heatingstatus.last)) then
      (((House_heating__heatingstatus.dynamic_property
           House_heating__heatingstatus.first)
          House_heating__heatingstatus.last)
         temp___expr_207)
    else true
  
  val dynamic_invariant (temp___expr_207: int) (temp___is_init_203: bool) (temp___skip_constant_204: bool) (temp___do_toplevel_205: bool) (temp___do_typ_inv_206: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_207 : int))
                      (temp___is_init_203 : bool))
                     (temp___skip_constant_204 : bool))
                    (temp___do_toplevel_205 : bool))
                   (temp___do_typ_inv_206 : bool)) }
  
  predicate default_initial_assumption (temp___expr_208: int) (temp___skip_top_level_209: bool) =
    true
  
  val default_initial_assumption (temp___expr_208: int) (temp___skip_top_level_209: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_208 : int))
                   (temp___skip_top_level_209 : bool)) }
end

module House_heating__temperature___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_heating__temperature as House_heating__temperature
  
  predicate dynamic_invariant (temp___expr_200: int) (temp___is_init_196: bool) (temp___skip_constant_197: bool) (temp___do_toplevel_198: bool) (temp___do_typ_inv_199: bool) =
    if ((temp___is_init_196 = True) \/
          (House_heating__temperature.first
             <= House_heating__temperature.last)) then
      (((House_heating__temperature.dynamic_property
           House_heating__temperature.first)
          House_heating__temperature.last)
         temp___expr_200)
    else true
  
  val dynamic_invariant (temp___expr_200: int) (temp___is_init_196: bool) (temp___skip_constant_197: bool) (temp___do_toplevel_198: bool) (temp___do_typ_inv_199: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_200 : int))
                      (temp___is_init_196 : bool))
                     (temp___skip_constant_197 : bool))
                    (temp___do_toplevel_198 : bool))
                   (temp___do_typ_inv_199 : bool)) }
  
  predicate default_initial_assumption (temp___expr_201: int) (temp___skip_top_level_202: bool) =
    true
  
  val default_initial_assumption (temp___expr_201: int) (temp___skip_top_level_202: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_201 : int))
                   (temp___skip_top_level_202 : bool)) }
end

module House_heating__createheating___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_heating__househeating as House_heating__househeating
  use House_heating__createheating as House_heating__createheating
  use House_heating__househeating___axiom as House_heating__househeating___axiom
  
  val createheating (__void_param: unit) : House_heating__househeating.househeating
    requires { true }
    ensures { (((result = (House_heating__createheating.createheating ())) /\
                  ((House_heating__createheating.createheating__function_guard
                      result)
                     ())) /\
                 (((((House_heating__househeating___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  scope Dispatch
    val createheating (attr__tag: int) (__void_param: unit) : House_heating__househeating.househeating
      requires { true }
      ensures { (((result
                     = ((House_heating__createheating.Dispatch.createheating
                           attr__tag)
                          ())) /\
                    (((House_heating__createheating.Dispatch.createheating__function_guard
                         result)
                        attr__tag)
                       ())) /\
                   (((((House_heating__househeating___axiom.dynamic_invariant
                          result)
                         True)
                        False)
                       True)
                      True)) }
    end
  
  axiom createheating__post_axiom:
    forall __void_param : unit
          [House_heating__createheating.createheating __void_param].
      let result = House_heating__createheating.createheating __void_param in
      if ((House_heating__createheating.createheating__function_guard result)
            __void_param) then
        ((true /\
            (((((House_heating__househeating___axiom.dynamic_invariant result)
                  True)
                 False)
                True)
               True)) /\
           ((House_heating__househeating.attr__tag result)
              = House_heating__househeating.__tag))
      else true
  
  axiom createheating__post__dispatch_axiom:
    forall attr__tag : int.
      forall __void_param : unit
            [(House_heating__createheating.Dispatch.createheating attr__tag)
               __void_param].
        let result =
          (House_heating__createheating.Dispatch.createheating attr__tag)
            __void_param in
        if (((House_heating__createheating.Dispatch.createheating__function_guard
                result)
               attr__tag)
              __void_param) then
          ((true /\
              (((((House_heating__househeating___axiom.dynamic_invariant
                     result)
                    True)
                   False)
                  True)
                 True)) /\
             ((House_heating__househeating.attr__tag result) = attr__tag))
        else true
  
  axiom house_heating__househeating__compat_axiom:
    forall __void_param : unit
          [(House_heating__createheating.Dispatch.createheating
              House_heating__househeating.__tag)
             __void_param].
      ((((House_heating__createheating.Dispatch.createheating__function_guard
            ((House_heating__createheating.Dispatch.createheating
                House_heating__househeating.__tag)
               __void_param))
           House_heating__househeating.__tag)
          __void_param) ->
         ((epsilon temp___result_280: House_heating__househeating.househeating.
             ((temp___result_280
                 = (House_heating__createheating.createheating __void_param)) /\
                ((House_heating__createheating.createheating__function_guard
                    temp___result_280)
                   __void_param)))
            = ((House_heating__createheating.Dispatch.createheating
                  House_heating__househeating.__tag)
                 __void_param)))
end

module House_exterior__exteriorstatus___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  
  predicate dynamic_invariant (temp___expr_223: int) (temp___is_init_219: bool) (temp___skip_constant_220: bool) (temp___do_toplevel_221: bool) (temp___do_typ_inv_222: bool) =
    if ((temp___is_init_219 = True) \/
          (House_exterior__exteriorstatus.first
             <= House_exterior__exteriorstatus.last)) then
      (((House_exterior__exteriorstatus.dynamic_property
           House_exterior__exteriorstatus.first)
          House_exterior__exteriorstatus.last)
         temp___expr_223)
    else true
  
  val dynamic_invariant (temp___expr_223: int) (temp___is_init_219: bool) (temp___skip_constant_220: bool) (temp___do_toplevel_221: bool) (temp___do_typ_inv_222: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_223 : int))
                      (temp___is_init_219 : bool))
                     (temp___skip_constant_220 : bool))
                    (temp___do_toplevel_221 : bool))
                   (temp___do_typ_inv_222 : bool)) }
  
  predicate default_initial_assumption (temp___expr_224: int) (temp___skip_top_level_225: bool) =
    true
  
  val default_initial_assumption (temp___expr_224: int) (temp___skip_top_level_225: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_224 : int))
                   (temp___skip_top_level_225 : bool)) }
end

module House_exterior__createexteriors___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_exterior__houseexterior as House_exterior__houseexterior
  use House_exterior__createexteriors as House_exterior__createexteriors
  use House_exterior__houseexterior___axiom as House_exterior__houseexterior___axiom
  
  val createexteriors (__void_param: unit) : House_exterior__houseexterior.houseexterior
    requires { true }
    ensures { (((result
                   = (House_exterior__createexteriors.createexteriors ())) /\
                  ((House_exterior__createexteriors.createexteriors__function_guard
                      result)
                     ())) /\
                 (((((House_exterior__houseexterior___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  scope Dispatch
    val createexteriors (attr__tag: int) (__void_param: unit) : House_exterior__houseexterior.houseexterior
      requires { true }
      ensures { (((result
                     = ((House_exterior__createexteriors.Dispatch.createexteriors
                           attr__tag)
                          ())) /\
                    (((House_exterior__createexteriors.Dispatch.createexteriors__function_guard
                         result)
                        attr__tag)
                       ())) /\
                   (((((House_exterior__houseexterior___axiom.dynamic_invariant
                          result)
                         True)
                        False)
                       True)
                      True)) }
    end
  
  axiom createexteriors__post_axiom:
    forall __void_param : unit
          [House_exterior__createexteriors.createexteriors __void_param].
      let result =
        House_exterior__createexteriors.createexteriors __void_param in
      if ((House_exterior__createexteriors.createexteriors__function_guard
             result)
            __void_param) then
        ((true /\
            (((((House_exterior__houseexterior___axiom.dynamic_invariant
                   result)
                  True)
                 False)
                True)
               True)) /\
           ((House_exterior__houseexterior.attr__tag result)
              = House_exterior__houseexterior.__tag))
      else true
  
  axiom createexteriors__post__dispatch_axiom:
    forall attr__tag : int.
      forall __void_param : unit
            [(House_exterior__createexteriors.Dispatch.createexteriors
                attr__tag)
               __void_param].
        let result =
          (House_exterior__createexteriors.Dispatch.createexteriors attr__tag)
            __void_param in
        if (((House_exterior__createexteriors.Dispatch.createexteriors__function_guard
                result)
               attr__tag)
              __void_param) then
          ((true /\
              (((((House_exterior__houseexterior___axiom.dynamic_invariant
                     result)
                    True)
                   False)
                  True)
                 True)) /\
             ((House_exterior__houseexterior.attr__tag result) = attr__tag))
        else true
  
  axiom house_exterior__houseexterior__compat_axiom:
    forall __void_param : unit
          [(House_exterior__createexteriors.Dispatch.createexteriors
              House_exterior__houseexterior.__tag)
             __void_param].
      ((((House_exterior__createexteriors.Dispatch.createexteriors__function_guard
            ((House_exterior__createexteriors.Dispatch.createexteriors
                House_exterior__houseexterior.__tag)
               __void_param))
           House_exterior__houseexterior.__tag)
          __void_param) ->
         ((epsilon temp___result_281: House_exterior__houseexterior.houseexterior.
             ((temp___result_281
                 = (House_exterior__createexteriors.createexteriors
                      __void_param)) /\
                ((House_exterior__createexteriors.createexteriors__function_guard
                    temp___result_281)
                   __void_param)))
            = ((House_exterior__createexteriors.Dispatch.createexteriors
                  House_exterior__houseexterior.__tag)
                 __void_param)))
end

module Clean_air__carbon___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Clean_air__carbon as Clean_air__carbon
  
  predicate dynamic_invariant (temp___expr_238: int) (temp___is_init_234: bool) (temp___skip_constant_235: bool) (temp___do_toplevel_236: bool) (temp___do_typ_inv_237: bool) =
    if ((temp___is_init_234 = True) \/
          (Clean_air__carbon.first <= Clean_air__carbon.last)) then
      (((Clean_air__carbon.dynamic_property Clean_air__carbon.first)
          Clean_air__carbon.last)
         temp___expr_238)
    else true
  
  val dynamic_invariant (temp___expr_238: int) (temp___is_init_234: bool) (temp___skip_constant_235: bool) (temp___do_toplevel_236: bool) (temp___do_typ_inv_237: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_238 : int))
                      (temp___is_init_234 : bool))
                     (temp___skip_constant_235 : bool))
                    (temp___do_toplevel_236 : bool))
                   (temp___do_typ_inv_237 : bool)) }
  
  predicate default_initial_assumption (temp___expr_239: int) (temp___skip_top_level_240: bool) =
    true
  
  val default_initial_assumption (temp___expr_239: int) (temp___skip_top_level_240: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_239 : int))
                   (temp___skip_top_level_240 : bool)) }
end

module Clean_air__aircon___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Clean_air__aircon as Clean_air__aircon
  
  predicate dynamic_invariant (temp___expr_245: int) (temp___is_init_241: bool) (temp___skip_constant_242: bool) (temp___do_toplevel_243: bool) (temp___do_typ_inv_244: bool) =
    if ((temp___is_init_241 = True) \/
          (Clean_air__aircon.first <= Clean_air__aircon.last)) then
      (((Clean_air__aircon.dynamic_property Clean_air__aircon.first)
          Clean_air__aircon.last)
         temp___expr_245)
    else true
  
  val dynamic_invariant (temp___expr_245: int) (temp___is_init_241: bool) (temp___skip_constant_242: bool) (temp___do_toplevel_243: bool) (temp___do_typ_inv_244: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_245 : int))
                      (temp___is_init_241 : bool))
                     (temp___skip_constant_242 : bool))
                    (temp___do_toplevel_243 : bool))
                   (temp___do_typ_inv_244 : bool)) }
  
  predicate default_initial_assumption (temp___expr_246: int) (temp___skip_top_level_247: bool) =
    true
  
  val default_initial_assumption (temp___expr_246: int) (temp___skip_top_level_247: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_246 : int))
                   (temp___skip_top_level_247 : bool)) }
end

module Clean_air__createaircon___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Clean_air__cleanair as Clean_air__cleanair
  use Clean_air__createaircon as Clean_air__createaircon
  use Clean_air__cleanair___axiom as Clean_air__cleanair___axiom
  
  val createaircon (__void_param: unit) : Clean_air__cleanair.cleanair
    requires { true }
    ensures { (((result = (Clean_air__createaircon.createaircon ())) /\
                  ((Clean_air__createaircon.createaircon__function_guard
                      result)
                     ())) /\
                 (((((Clean_air__cleanair___axiom.dynamic_invariant result)
                       True)
                      False)
                     True)
                    True)) }
  
  scope Dispatch
    val createaircon (attr__tag: int) (__void_param: unit) : Clean_air__cleanair.cleanair
      requires { true }
      ensures { (((result
                     = ((Clean_air__createaircon.Dispatch.createaircon
                           attr__tag)
                          ())) /\
                    (((Clean_air__createaircon.Dispatch.createaircon__function_guard
                         result)
                        attr__tag)
                       ())) /\
                   (((((Clean_air__cleanair___axiom.dynamic_invariant result)
                         True)
                        False)
                       True)
                      True)) }
    end
  
  axiom createaircon__post_axiom:
    forall __void_param : unit
          [Clean_air__createaircon.createaircon __void_param].
      let result = Clean_air__createaircon.createaircon __void_param in
      if ((Clean_air__createaircon.createaircon__function_guard result)
            __void_param) then
        ((true /\
            (((((Clean_air__cleanair___axiom.dynamic_invariant result) True)
                 False)
                True)
               True)) /\
           ((Clean_air__cleanair.attr__tag result)
              = Clean_air__cleanair.__tag))
      else true
  
  axiom createaircon__post__dispatch_axiom:
    forall attr__tag : int.
      forall __void_param : unit
            [(Clean_air__createaircon.Dispatch.createaircon attr__tag)
               __void_param].
        let result =
          (Clean_air__createaircon.Dispatch.createaircon attr__tag)
            __void_param in
        if (((Clean_air__createaircon.Dispatch.createaircon__function_guard
                result)
               attr__tag)
              __void_param) then
          ((true /\
              (((((Clean_air__cleanair___axiom.dynamic_invariant result) True)
                   False)
                  True)
                 True)) /\
             ((Clean_air__cleanair.attr__tag result) = attr__tag))
        else true
  
  axiom clean_air__cleanair__compat_axiom:
    forall __void_param : unit
          [(Clean_air__createaircon.Dispatch.createaircon
              Clean_air__cleanair.__tag)
             __void_param].
      ((((Clean_air__createaircon.Dispatch.createaircon__function_guard
            ((Clean_air__createaircon.Dispatch.createaircon
                Clean_air__cleanair.__tag)
               __void_param))
           Clean_air__cleanair.__tag)
          __void_param) ->
         ((epsilon temp___result_282: Clean_air__cleanair.cleanair.
             ((temp___result_282
                 = (Clean_air__createaircon.createaircon __void_param)) /\
                ((Clean_air__createaircon.createaircon__function_guard
                    temp___result_282)
                   __void_param)))
            = ((Clean_air__createaircon.Dispatch.createaircon
                  Clean_air__cleanair.__tag)
                 __void_param)))
end

module House_appliances__unlocked___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_appliances__unlocked as House_appliances__unlocked
  
  predicate dynamic_invariant (temp___expr_261: int) (temp___is_init_257: bool) (temp___skip_constant_258: bool) (temp___do_toplevel_259: bool) (temp___do_typ_inv_260: bool) =
    if ((temp___is_init_257 = True) \/
          (House_appliances__unlocked.first
             <= House_appliances__unlocked.last)) then
      (((House_appliances__unlocked.dynamic_property
           House_appliances__unlocked.first)
          House_appliances__unlocked.last)
         temp___expr_261)
    else true
  
  val dynamic_invariant (temp___expr_261: int) (temp___is_init_257: bool) (temp___skip_constant_258: bool) (temp___do_toplevel_259: bool) (temp___do_typ_inv_260: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_261 : int))
                      (temp___is_init_257 : bool))
                     (temp___skip_constant_258 : bool))
                    (temp___do_toplevel_259 : bool))
                   (temp___do_typ_inv_260 : bool)) }
  
  predicate default_initial_assumption (temp___expr_262: int) (temp___skip_top_level_263: bool) =
    true
  
  val default_initial_assumption (temp___expr_262: int) (temp___skip_top_level_263: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_262 : int))
                   (temp___skip_top_level_263 : bool)) }
end

module House_appliances__locked___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_appliances__locked as House_appliances__locked
  
  predicate dynamic_invariant (temp___expr_268: int) (temp___is_init_264: bool) (temp___skip_constant_265: bool) (temp___do_toplevel_266: bool) (temp___do_typ_inv_267: bool) =
    if ((temp___is_init_264 = True) \/
          (House_appliances__locked.first <= House_appliances__locked.last)) then
      (((House_appliances__locked.dynamic_property
           House_appliances__locked.first)
          House_appliances__locked.last)
         temp___expr_268)
    else true
  
  val dynamic_invariant (temp___expr_268: int) (temp___is_init_264: bool) (temp___skip_constant_265: bool) (temp___do_toplevel_266: bool) (temp___do_typ_inv_267: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_268 : int))
                      (temp___is_init_264 : bool))
                     (temp___skip_constant_265 : bool))
                    (temp___do_toplevel_266 : bool))
                   (temp___do_typ_inv_267 : bool)) }
  
  predicate default_initial_assumption (temp___expr_269: int) (temp___skip_top_level_270: bool) =
    true
  
  val default_initial_assumption (temp___expr_269: int) (temp___skip_top_level_270: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_269 : int))
                   (temp___skip_top_level_270 : bool)) }
end

module House_appliances__createfridge___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_appliances__houseappliances as House_appliances__houseappliances
  use House_appliances__createfridge as House_appliances__createfridge
  use House_appliances__houseappliances___axiom as House_appliances__houseappliances___axiom
  
  val createfridge (__void_param: unit) : House_appliances__houseappliances.houseappliances
    requires { true }
    ensures { (((result = (House_appliances__createfridge.createfridge ())) /\
                  ((House_appliances__createfridge.createfridge__function_guard
                      result)
                     ())) /\
                 (((((House_appliances__houseappliances___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  scope Dispatch
    val createfridge (attr__tag: int) (__void_param: unit) : House_appliances__houseappliances.houseappliances
      requires { true }
      ensures { (((result
                     = ((House_appliances__createfridge.Dispatch.createfridge
                           attr__tag)
                          ())) /\
                    (((House_appliances__createfridge.Dispatch.createfridge__function_guard
                         result)
                        attr__tag)
                       ())) /\
                   (((((House_appliances__houseappliances___axiom.dynamic_invariant
                          result)
                         True)
                        False)
                       True)
                      True)) }
    end
  
  axiom createfridge__post_axiom:
    forall __void_param : unit
          [House_appliances__createfridge.createfridge __void_param].
      let result = House_appliances__createfridge.createfridge __void_param in
      if ((House_appliances__createfridge.createfridge__function_guard result)
            __void_param) then
        ((true /\
            (((((House_appliances__houseappliances___axiom.dynamic_invariant
                   result)
                  True)
                 False)
                True)
               True)) /\
           ((House_appliances__houseappliances.attr__tag result)
              = House_appliances__houseappliances.__tag))
      else true
  
  axiom createfridge__post__dispatch_axiom:
    forall attr__tag : int.
      forall __void_param : unit
            [(House_appliances__createfridge.Dispatch.createfridge attr__tag)
               __void_param].
        let result =
          (House_appliances__createfridge.Dispatch.createfridge attr__tag)
            __void_param in
        if (((House_appliances__createfridge.Dispatch.createfridge__function_guard
                result)
               attr__tag)
              __void_param) then
          ((true /\
              (((((House_appliances__houseappliances___axiom.dynamic_invariant
                     result)
                    True)
                   False)
                  True)
                 True)) /\
             ((House_appliances__houseappliances.attr__tag result)
                = attr__tag))
        else true
  
  axiom house_appliances__houseappliances__compat_axiom:
    forall __void_param : unit
          [(House_appliances__createfridge.Dispatch.createfridge
              House_appliances__houseappliances.__tag)
             __void_param].
      ((((House_appliances__createfridge.Dispatch.createfridge__function_guard
            ((House_appliances__createfridge.Dispatch.createfridge
                House_appliances__houseappliances.__tag)
               __void_param))
           House_appliances__houseappliances.__tag)
          __void_param) ->
         ((epsilon temp___result_283: House_appliances__houseappliances.houseappliances.
             ((temp___result_283
                 = (House_appliances__createfridge.createfridge __void_param)) /\
                ((House_appliances__createfridge.createfridge__function_guard
                    temp___result_283)
                   __void_param)))
            = ((House_appliances__createfridge.Dispatch.createfridge
                  House_appliances__houseappliances.__tag)
                 __void_param)))
end

module Main__print_status__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Integer as Integer
  use Standard_String__Img as Standard_String__Img
  use Standard__positive as Standard__positive
  use Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
  use Standard__string as Standard__string
  use House_heating__househeating as House_heating__househeating
  use House_exterior__houseexterior as House_exterior__houseexterior
  use Clean_air__cleanair as Clean_air__cleanair
  use House_appliances__houseappliances as House_appliances__houseappliances
  use Main__system as Main__system
  use House__house as House__house
  use House__house___axiom as House__house___axiom
  use Main__print_status__heating as Main__print_status__heating
  use House_heating__househeating___axiom as House_heating__househeating___axiom
  use Main__print_status__exterior as Main__print_status__exterior
  use House_exterior__houseexterior___axiom as House_exterior__houseexterior___axiom
  use Main__print_status__air as Main__print_status__air
  use Clean_air__cleanair___axiom as Clean_air__cleanair___axiom
  use Main__print_status__appliances as Main__print_status__appliances
  use House_appliances__houseappliances___axiom as House_appliances__houseappliances___axiom
  use Ada___ada__text_io__put__4___axiom as Ada___ada__text_io__put__4___axiom
  use Ada___ada__text_io__put_line__2___axiom as Ada___ada__text_io__put_line__2___axiom
  use House_heating__temperature as House_heating__temperature
  use House_heating__temperature__rep as House_heating__temperature__rep
  use House_heating__heatingstatus as House_heating__heatingstatus
  use House_heating__heatingstatus__rep as House_heating__heatingstatus__rep
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  use House_exterior__exteriorstatus__rep as House_exterior__exteriorstatus__rep
  use Clean_air__carbon as Clean_air__carbon
  use Clean_air__carbon__rep as Clean_air__carbon__rep
  use Clean_air__aircon as Clean_air__aircon
  use Clean_air__aircon__rep as Clean_air__aircon__rep
  use House_appliances__unlocked as House_appliances__unlocked
  use House_appliances__unlocked__rep as House_appliances__unlocked__rep
  use House_appliances__locked as House_appliances__locked
  use House_appliances__locked__rep as House_appliances__locked__rep
  use Temp___String_Literal_365 as Temp___String_Literal_365
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_367 as Temp___String_Literal_367
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_369 as Temp___String_Literal_369
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_371 as Temp___String_Literal_371
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_372 as Temp___String_Literal_372
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_377 as Temp___String_Literal_377
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_380 as Temp___String_Literal_380
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_383 as Temp___String_Literal_383
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_386 as Temp___String_Literal_386
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_389 as Temp___String_Literal_389
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_390 as Temp___String_Literal_390
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_395 as Temp___String_Literal_395
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Temp___String_Literal_398 as Temp___String_Literal_398
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__positive___axiom as Standard__positive___axiom
  use Standard__character___axiom as Standard__character___axiom
  use Standard__string___axiom as Standard__string___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Main__system___axiom as Main__system___axiom
  use Main__print_status__heating___axiom as Main__print_status__heating___axiom
  use Main__print_status__exterior___axiom as Main__print_status__exterior___axiom
  use Main__print_status__air___axiom as Main__print_status__air___axiom
  use Main__print_status__appliances___axiom as Main__print_status__appliances___axiom
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__line_length__2___axiom as Ada___ada__text_io__line_length__2___axiom
  use Ada___ada__text_io__page_length__2___axiom as Ada___ada__text_io__page_length__2___axiom
  use Ada___ada__text_io__put__4___axiom as Ada___ada__text_io__put__4___axiom
  use Ada___ada__text_io__put_line__2___axiom as Ada___ada__text_io__put_line__2___axiom
  use House__house___axiom as House__house___axiom
  use House_heating__heatingstatus___axiom as House_heating__heatingstatus___axiom
  use House_heating__temperature___axiom as House_heating__temperature___axiom
  use House_heating__househeating___axiom as House_heating__househeating___axiom
  use House_heating__createheating___axiom as House_heating__createheating___axiom
  use House_exterior__exteriorstatus___axiom as House_exterior__exteriorstatus___axiom
  use House_exterior__houseexterior___axiom as House_exterior__houseexterior___axiom
  use House_exterior__createexteriors___axiom as House_exterior__createexteriors___axiom
  use Clean_air__carbon___axiom as Clean_air__carbon___axiom
  use Clean_air__aircon___axiom as Clean_air__aircon___axiom
  use Clean_air__cleanair___axiom as Clean_air__cleanair___axiom
  use Clean_air__createaircon___axiom as Clean_air__createaircon___axiom
  use House_appliances__unlocked___axiom as House_appliances__unlocked___axiom
  use House_appliances__locked___axiom as House_appliances__locked___axiom
  use House_appliances__houseappliances___axiom as House_appliances__houseappliances___axiom
  use House_appliances__createfridge___axiom as House_appliances__createfridge___axiom
  
  let def (__void_param : unit)
    requires { [#"main.adb" 14 0 0] true }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram main.adb:14]
      ());
     ([#"main.adb" 14 0 0]
      assume {
        [#"main.adb" 14 0 0]
        (((((House__house___axiom.dynamic_invariant
               { House__house.__split_fields =
                   (House__house.__split_fields__content
                       Main__system.system__split_fields) ;
                 House__house.attr__tag = Main__system.system__attr__tag })
              True)
             False)
            True)
           True) });
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram main.adb:14]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram main.adb:14]
      ());
     ([#"main.adb" 14 0 0] ());
     ([@GNAT-comment:Assume Pre of the subprogram main.adb:14] ());
     ([#"main.adb" 14 0 0]
      (try
         ([#"main.adb" 15 0 0] ());
         ([#"main.adb" 15 0 0]
          ((let main__print_status__heating__assume =
              (House__house.__split_fields
                  { House__house.__split_fields =
                      (House__house.__split_fields__content
                          Main__system.system__split_fields) ;
                    House__house.attr__tag = Main__system.system__attr__tag }).
                House__house.rec__house__house__heating in
            ([#"main.adb" 15 0 0]
             (Main__print_status__heating.heating__split_fields.House_heating__househeating.__split_fields__content <-
                (House_heating__househeating.__split_fields
                    main__print_status__heating__assume)));
            ([#"main.adb" 15 0 0]
             assume {
               [#"main.adb" 15 0 0]
               (Main__print_status__heating.heating__attr__tag
                  = House_heating__househeating.__tag) }));
           ([#"main.adb" 15 0 0]
            assume {
              [#"main.adb" 15 0 0]
              (((((House_heating__househeating___axiom.dynamic_invariant
                     { House_heating__househeating.__split_fields =
                         (House_heating__househeating.__split_fields__content
                             Main__print_status__heating.heating__split_fields) ;
                       House_heating__househeating.attr__tag =
                         Main__print_status__heating.heating__attr__tag })
                    True)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 16 0 0] ());
         ([#"main.adb" 16 0 0]
          ((let main__print_status__exterior__assume =
              (House__house.__split_fields
                  { House__house.__split_fields =
                      (House__house.__split_fields__content
                          Main__system.system__split_fields) ;
                    House__house.attr__tag = Main__system.system__attr__tag }).
                House__house.rec__house__house__exterior in
            ([#"main.adb" 16 0 0]
             (Main__print_status__exterior.exterior__split_fields.House_exterior__houseexterior.__split_fields__content <-
                (House_exterior__houseexterior.__split_fields
                    main__print_status__exterior__assume)));
            ([#"main.adb" 16 0 0]
             assume {
               [#"main.adb" 16 0 0]
               (Main__print_status__exterior.exterior__attr__tag
                  = House_exterior__houseexterior.__tag) }));
           ([#"main.adb" 16 0 0]
            assume {
              [#"main.adb" 16 0 0]
              (((((House_exterior__houseexterior___axiom.dynamic_invariant
                     { House_exterior__houseexterior.__split_fields =
                         (House_exterior__houseexterior.__split_fields__content
                             Main__print_status__exterior.exterior__split_fields) ;
                       House_exterior__houseexterior.attr__tag =
                         Main__print_status__exterior.exterior__attr__tag })
                    True)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 17 0 0] ());
         ([#"main.adb" 17 0 0]
          ((let main__print_status__air__assume =
              (House__house.__split_fields
                  { House__house.__split_fields =
                      (House__house.__split_fields__content
                          Main__system.system__split_fields) ;
                    House__house.attr__tag = Main__system.system__attr__tag }).
                House__house.rec__house__house__air in
            ([#"main.adb" 17 0 0]
             (Main__print_status__air.air__split_fields.Clean_air__cleanair.__split_fields__content <-
                (Clean_air__cleanair.__split_fields
                    main__print_status__air__assume)));
            ([#"main.adb" 17 0 0]
             assume {
               [#"main.adb" 17 0 0]
               (Main__print_status__air.air__attr__tag
                  = Clean_air__cleanair.__tag) }));
           ([#"main.adb" 17 0 0]
            assume {
              [#"main.adb" 17 0 0]
              (((((Clean_air__cleanair___axiom.dynamic_invariant
                     { Clean_air__cleanair.__split_fields =
                         (Clean_air__cleanair.__split_fields__content
                             Main__print_status__air.air__split_fields) ;
                       Clean_air__cleanair.attr__tag =
                         Main__print_status__air.air__attr__tag })
                    True)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 18 0 0] ());
         ([#"main.adb" 18 0 0]
          ((let main__print_status__appliances__assume =
              (House__house.__split_fields
                  { House__house.__split_fields =
                      (House__house.__split_fields__content
                          Main__system.system__split_fields) ;
                    House__house.attr__tag = Main__system.system__attr__tag }).
                House__house.rec__house__house__appliances in
            ([#"main.adb" 18 0 0]
             (Main__print_status__appliances.appliances__split_fields.
                House_appliances__houseappliances.__split_fields__content <-
                (House_appliances__houseappliances.__split_fields
                    main__print_status__appliances__assume)));
            ([#"main.adb" 18 0 0]
             assume {
               [#"main.adb" 18 0 0]
               (Main__print_status__appliances.appliances__attr__tag
                  = House_appliances__houseappliances.__tag) }));
           ([#"main.adb" 18 0 0]
            assume {
              [#"main.adb" 18 0 0]
              (((((House_appliances__houseappliances___axiom.dynamic_invariant
                     { House_appliances__houseappliances.__split_fields =
                         (House_appliances__houseappliances.__split_fields__content
                             Main__print_status__appliances.appliances__split_fields) ;
                       House_appliances__houseappliances.attr__tag =
                         Main__print_status__appliances.appliances__attr__tag })
                    True)
                   False)
                  True)
                 True) })));
         ([@GP_Sloc:main.adb:22:7] [#"main.adb" 22 0 0] ());
         ([@GP_Sloc:main.adb:22:7]
          [#"main.adb" 22 0 0]
          (([#"main.adb" 22 0 0] (val _f : unit in
                                  _f));
           (Ada___ada__text_io__put__4___axiom.put
              (let temp___366 =
                 Temp___String_Literal_365.temp___String_Literal_365 () in
               ((Standard__string.of_array temp___366) (1 : int)) (4 : int)))));
         ([@GP_Sloc:main.adb:23:7] [#"main.adb" 23 0 0] ());
         ([@GP_Sloc:main.adb:23:7]
          [#"main.adb" 23 0 0]
          (([#"main.adb" 23 0 0] (val _f : unit in
                                  _f));
           (Ada___ada__text_io__put_line__2___axiom.put_line
              (let temp___368 =
                 Temp___String_Literal_367.temp___String_Literal_367 () in
               ((Standard__string.of_array temp___368) (1 : int)) (54 : int)))));
         ([@GP_Sloc:main.adb:24:7] [#"main.adb" 24 0 0] ());
         ([@GP_Sloc:main.adb:24:7]
          [#"main.adb" 24 0 0]
          (([#"main.adb" 24 0 0] (val _f : unit in
                                  _f));
           (Ada___ada__text_io__put_line__2___axiom.put_line
              (let temp___370 =
                 Temp___String_Literal_369.temp___String_Literal_369 () in
               ((Standard__string.of_array temp___370) (1 : int)) (55 : int)))));
         ([@GP_Sloc:main.adb:25:7] [#"main.adb" 25 0 0] ());
         ([@GP_Sloc:main.adb:25:7]
          [#"main.adb" 25 0 0]
          (([#"main.adb" 25 0 0] (val _f : unit in
                                  _f));
           (Ada___ada__text_io__put_line__2___axiom.put_line
              (let temp___376 =
                 Temp___String_Literal_371.temp___String_Literal_371 () in
               let temp___375 =
                 let temp___374 =
                   (Standard_String__Img.to_string
                      (House_heating__temperature.attr__ATTRIBUTE_IMAGE
                         (House_heating__temperature__rep.to_rep
                            ((House_heating__househeating.__split_fields
                                 { House_heating__househeating.__split_fields =
                                     (House_heating__househeating.__split_fields__content
                                         Main__print_status__heating.heating__split_fields) ;
                                   House_heating__househeating.attr__tag =
                                     Main__print_status__heating.heating__attr__tag }).
                               House_heating__househeating.rec__house_heating__househeating__temp))))
                     (5 : int) in
                 let temp___373 =
                   Temp___String_Literal_372.temp___String_Literal_372 () in
                 ((Standard__string.of_array
                     ((((((Array__Int__Standard__character__Concat.concat
                             temp___373)
                            (1 : int))
                           (13 : int))
                          (Standard__string.to_array temp___374))
                         (Standard__string.first temp___374))
                        (Standard__string.last temp___374)))
                    (1 : int))
                   ([#"main.adb" 25 0 0]
                    [@GP_Shape:call_put_line__concat__concat]
                    [@vc:annotation]
                    [@GP_Sloc:main.adb:25:32]
                    [@comment:      Put_Line("Temperature: " & heating.temp'Image & "C, ");                                ^ main.adb:25:32:VC_RANGE_CHECK]
                    [@GP_Reason:VC_RANGE_CHECK]
                    [@GP_Id:1]
                    (Standard__positive.range_check_
                       (((1 : int)
                           + (((Integer.length (1 : int)) (13 : int))
                                + ((Integer.length
                                      (Standard__string.first temp___374))
                                     (Standard__string.last temp___374))))
                          - (1 : int)))) in
               if ((Standard__string.length temp___375) = (0 : int)) then
                 (((Standard__string.of_array temp___376) (1 : int))
                    (3 : int))
               else
                 (((Standard__string.of_array
                      ((((((Array__Int__Standard__character__Concat.concat
                              (Standard__string.to_array temp___375))
                             (Standard__string.first temp___375))
                            (Standard__string.last temp___375))
                           temp___376)
                          (1 : int))
                         (3 : int)))
                     (Standard__string.first temp___375))
                    ([#"main.adb" 25 0 0]
                     [@comment:      Put_Line("Temperature: " & heating.temp'Image & "C, ");                                                     ^ main.adb:25:53:VC_RANGE_CHECK]
                     [@vc:annotation]
                     [@GP_Reason:VC_RANGE_CHECK]
                     [@GP_Id:2]
                     [@GP_Shape:call_put_line__concat]
                     [@GP_Sloc:main.adb:25:53]
                     (Standard__positive.range_check_
                        (((Standard__string.first temp___375)
                            + (((Integer.length
                                   (Standard__string.first temp___375))
                                  (Standard__string.last temp___375))
                                 + ((Integer.length (1 : int)) (3 : int))))
                           - (1 : int)))))))));
         ([@GP_Sloc:main.adb:26:7] [#"main.adb" 26 0 0] ());
         ([@GP_Sloc:main.adb:26:7]
          [#"main.adb" 26 0 0]
          (([#"main.adb" 26 0 0] (val _f : unit in
                                  _f));
           (Ada___ada__text_io__put_line__2___axiom.put_line
              (let temp___379 =
                 (Standard_String__Img.to_string
                    (House_heating__heatingstatus.attr__ATTRIBUTE_IMAGE
                       (House_heating__heatingstatus__rep.to_rep
                          ((House_heating__househeating.__split_fields
                               { House_heating__househeating.__split_fields =
                                   (House_heating__househeating.__split_fields__content
                                       Main__print_status__heating.heating__split_fields) ;
                                 House_heating__househeating.attr__tag =
                                   Main__print_status__heating.heating__attr__tag }).
                             House_heating__househeating.rec__house_heating__househeating__status))))
                   (2040 : int) in
               let temp___378 =
                 Temp___String_Literal_377.temp___String_Literal_377 () in
               ((Standard__string.of_array
                   ((((((Array__Int__Standard__character__Concat.concat
                           temp___378)
                          (1 : int))
                         (15 : int))
                        (Standard__string.to_array temp___379))
                       (Standard__string.first temp___379))
                      (Standard__string.last temp___379)))
                  (1 : int))
                 ([#"main.adb" 26 0 0]
                  [@vc:annotation]
                  [@comment:      Put_Line("Heater Status: " &  heating.status'Image);                                  ^ main.adb:26:34:VC_RANGE_CHECK]
                  [@GP_Reason:VC_RANGE_CHECK]
                  [@GP_Id:3]
                  [@GP_Sloc:main.adb:26:34]
                  [@GP_Shape:call_put_line__concat]
                  (Standard__positive.range_check_
                     (((1 : int)
                         + (((Integer.length (1 : int)) (15 : int))
                              + ((Integer.length
                                    (Standard__string.first temp___379))
                                   (Standard__string.last temp___379))))
                        - (1 : int))))))));
         ([@GP_Sloc:main.adb:27:7] [#"main.adb" 27 0 0] ());
         ([@GP_Sloc:main.adb:27:7]
          [#"main.adb" 27 0 0]
          (([#"main.adb" 27 0 0] (val _f : unit in
                                  _f));
           (Ada___ada__text_io__put_line__2___axiom.put_line
              (let temp___382 =
                 (Standard_String__Img.to_string
                    (House_exterior__exteriorstatus.attr__ATTRIBUTE_IMAGE
                       (House_exterior__exteriorstatus__rep.to_rep
                          ((House_exterior__houseexterior.__split_fields
                               { House_exterior__houseexterior.__split_fields =
                                   (House_exterior__houseexterior.__split_fields__content
                                       Main__print_status__exterior.exterior__split_fields) ;
                                 House_exterior__houseexterior.attr__tag =
                                   Main__print_status__exterior.exterior__attr__tag }).
                             House_exterior__houseexterior.rec__house_exterior__houseexterior__status))))
                   (2040 : int) in
               let temp___381 =
                 Temp___String_Literal_380.temp___String_Literal_380 () in
               ((Standard__string.of_array
                   ((((((Array__Int__Standard__character__Concat.concat
                           temp___381)
                          (1 : int))
                         (34 : int))
                        (Standard__string.to_array temp___382))
                       (Standard__string.first temp___382))
                      (Standard__string.last temp___382)))
                  (1 : int))
                 ([#"main.adb" 27 0 0]
                  [@comment:      Put_Line("Window and Exterior Doors Status: " & exterior.status'Image);                                                     ^ main.adb:27:53:VC_RANGE_CHECK]
                  [@vc:annotation]
                  [@GP_Reason:VC_RANGE_CHECK]
                  [@GP_Sloc:main.adb:27:53]
                  [@GP_Id:4]
                  [@GP_Shape:call_put_line__concat]
                  (Standard__positive.range_check_
                     (((1 : int)
                         + (((Integer.length (1 : int)) (34 : int))
                              + ((Integer.length
                                    (Standard__string.first temp___382))
                                   (Standard__string.last temp___382))))
                        - (1 : int))))))));
         ([@GP_Sloc:main.adb:28:7] [#"main.adb" 28 0 0] ());
         ([@GP_Sloc:main.adb:28:7]
          [#"main.adb" 28 0 0]
          (([#"main.adb" 28 0 0] (val _f : unit in
                                  _f));
           (Ada___ada__text_io__put_line__2___axiom.put_line
              (let temp___385 =
                 (Standard_String__Img.to_string
                    (House_appliances__unlocked.attr__ATTRIBUTE_IMAGE
                       (House_appliances__unlocked__rep.to_rep
                          ((House_appliances__houseappliances.__split_fields
                               { House_appliances__houseappliances.__split_fields =
                                   (House_appliances__houseappliances.__split_fields__content
                                       Main__print_status__appliances.appliances__split_fields) ;
                                 House_appliances__houseappliances.attr__tag =
                                   Main__print_status__appliances.appliances__attr__tag }).
                             House_appliances__houseappliances.rec__house_appliances__houseappliances__statusunlocked))))
                   (2040 : int) in
               let temp___384 =
                 Temp___String_Literal_383.temp___String_Literal_383 () in
               ((Standard__string.of_array
                   ((((((Array__Int__Standard__character__Concat.concat
                           temp___384)
                          (1 : int))
                         (20 : int))
                        (Standard__string.to_array temp___385))
                       (Standard__string.first temp___385))
                      (Standard__string.last temp___385)))
                  (1 : int))
                 ([#"main.adb" 28 0 0]
                  [@vc:annotation]
                  [@GP_Reason:VC_RANGE_CHECK]
                  [@GP_Sloc:main.adb:28:39]
                  [@comment:      Put_Line("Unlocked Appliance: " & appliances.statusUnlocked'Image);                                       ^ main.adb:28:39:VC_RANGE_CHECK]
                  [@GP_Id:5]
                  [@GP_Shape:call_put_line__concat]
                  (Standard__positive.range_check_
                     (((1 : int)
                         + (((Integer.length (1 : int)) (20 : int))
                              + ((Integer.length
                                    (Standard__string.first temp___385))
                                   (Standard__string.last temp___385))))
                        - (1 : int))))))));
         ([@GP_Sloc:main.adb:29:7] [#"main.adb" 29 0 0] ());
         ([@GP_Sloc:main.adb:29:7]
          [#"main.adb" 29 0 0]
          (([#"main.adb" 29 0 0] (val _f : unit in
                                  _f));
           (Ada___ada__text_io__put_line__2___axiom.put_line
              (let temp___388 =
                 (Standard_String__Img.to_string
                    (House_appliances__locked.attr__ATTRIBUTE_IMAGE
                       (House_appliances__locked__rep.to_rep
                          ((House_appliances__houseappliances.__split_fields
                               { House_appliances__houseappliances.__split_fields =
                                   (House_appliances__houseappliances.__split_fields__content
                                       Main__print_status__appliances.appliances__split_fields) ;
                                 House_appliances__houseappliances.attr__tag =
                                   Main__print_status__appliances.appliances__attr__tag }).
                             House_appliances__houseappliances.rec__house_appliances__houseappliances__statuslocked))))
                   (2040 : int) in
               let temp___387 =
                 Temp___String_Literal_386.temp___String_Literal_386 () in
               ((Standard__string.of_array
                   ((((((Array__Int__Standard__character__Concat.concat
                           temp___387)
                          (1 : int))
                         (18 : int))
                        (Standard__string.to_array temp___388))
                       (Standard__string.first temp___388))
                      (Standard__string.last temp___388)))
                  (1 : int))
                 ([#"main.adb" 29 0 0]
                  [@comment:      Put_Line("Locked Appliance: " & appliances.statuslocked'Image);                                     ^ main.adb:29:37:VC_RANGE_CHECK]
                  [@GP_Sloc:main.adb:29:37]
                  [@vc:annotation]
                  [@GP_Reason:VC_RANGE_CHECK]
                  [@GP_Shape:call_put_line__concat]
                  [@GP_Id:6]
                  (Standard__positive.range_check_
                     (((1 : int)
                         + (((Integer.length (1 : int)) (18 : int))
                              + ((Integer.length
                                    (Standard__string.first temp___388))
                                   (Standard__string.last temp___388))))
                        - (1 : int))))))));
         ([@GP_Sloc:main.adb:30:7] [#"main.adb" 30 0 0] ());
         ([@GP_Sloc:main.adb:30:7]
          [#"main.adb" 30 0 0]
          (([#"main.adb" 30 0 0] (val _f : unit in
                                  _f));
           (Ada___ada__text_io__put_line__2___axiom.put_line
              (let temp___394 =
                 Temp___String_Literal_389.temp___String_Literal_389 () in
               let temp___393 =
                 let temp___392 =
                   (Standard_String__Img.to_string
                      (Clean_air__carbon.attr__ATTRIBUTE_IMAGE
                         (Clean_air__carbon__rep.to_rep
                            ((Clean_air__cleanair.__split_fields
                                 { Clean_air__cleanair.__split_fields =
                                     (Clean_air__cleanair.__split_fields__content
                                         Main__print_status__air.air__split_fields) ;
                                   Clean_air__cleanair.attr__tag =
                                     Main__print_status__air.air__attr__tag }).
                               Clean_air__cleanair.rec__clean_air__cleanair__carb))))
                     (5 : int) in
                 let temp___391 =
                   Temp___String_Literal_390.temp___String_Literal_390 () in
                 ((Standard__string.of_array
                     ((((((Array__Int__Standard__character__Concat.concat
                             temp___391)
                            (1 : int))
                           (24 : int))
                          (Standard__string.to_array temp___392))
                         (Standard__string.first temp___392))
                        (Standard__string.last temp___392)))
                    (1 : int))
                   ([#"main.adb" 30 0 0]
                    [@GP_Shape:call_put_line__concat__concat]
                    [@GP_Sloc:main.adb:30:43]
                    [@vc:annotation]
                    [@comment:      Put_Line("Carbon Monoxide Levels: " & air.carb'Image & "PPM");                                           ^ main.adb:30:43:VC_RANGE_CHECK]
                    [@GP_Reason:VC_RANGE_CHECK]
                    [@GP_Id:7]
                    (Standard__positive.range_check_
                       (((1 : int)
                           + (((Integer.length (1 : int)) (24 : int))
                                + ((Integer.length
                                      (Standard__string.first temp___392))
                                     (Standard__string.last temp___392))))
                          - (1 : int)))) in
               if ((Standard__string.length temp___393) = (0 : int)) then
                 (((Standard__string.of_array temp___394) (1 : int))
                    (3 : int))
               else
                 (((Standard__string.of_array
                      ((((((Array__Int__Standard__character__Concat.concat
                              (Standard__string.to_array temp___393))
                             (Standard__string.first temp___393))
                            (Standard__string.last temp___393))
                           temp___394)
                          (1 : int))
                         (3 : int)))
                     (Standard__string.first temp___393))
                    ([#"main.adb" 30 0 0]
                     [@vc:annotation]
                     [@GP_Sloc:main.adb:30:60]
                     [@GP_Reason:VC_RANGE_CHECK]
                     [@comment:      Put_Line("Carbon Monoxide Levels: " & air.carb'Image & "PPM");                                                            ^ main.adb:30:60:VC_RANGE_CHECK]
                     [@GP_Shape:call_put_line__concat]
                     [@GP_Id:8]
                     (Standard__positive.range_check_
                        (((Standard__string.first temp___393)
                            + (((Integer.length
                                   (Standard__string.first temp___393))
                                  (Standard__string.last temp___393))
                                 + ((Integer.length (1 : int)) (3 : int))))
                           - (1 : int)))))))));
         ([@GP_Sloc:main.adb:31:7] [#"main.adb" 31 0 0] ());
         ([@GP_Sloc:main.adb:31:7]
          [#"main.adb" 31 0 0]
          (([#"main.adb" 31 0 0] (val _f : unit in
                                  _f));
           (Ada___ada__text_io__put_line__2___axiom.put_line
              (let temp___397 =
                 (Standard_String__Img.to_string
                    (Clean_air__aircon.attr__ATTRIBUTE_IMAGE
                       (Clean_air__aircon__rep.to_rep
                          ((Clean_air__cleanair.__split_fields
                               { Clean_air__cleanair.__split_fields =
                                   (Clean_air__cleanair.__split_fields__content
                                       Main__print_status__air.air__split_fields) ;
                                 Clean_air__cleanair.attr__tag =
                                   Main__print_status__air.air__attr__tag }).
                             Clean_air__cleanair.rec__clean_air__cleanair__status))))
                   (2040 : int) in
               let temp___396 =
                 Temp___String_Literal_395.temp___String_Literal_395 () in
               ((Standard__string.of_array
                   ((((((Array__Int__Standard__character__Concat.concat
                           temp___396)
                          (1 : int))
                         (15 : int))
                        (Standard__string.to_array temp___397))
                       (Standard__string.first temp___397))
                      (Standard__string.last temp___397)))
                  (1 : int))
                 ([#"main.adb" 31 0 0]
                  [@comment:      Put_Line("Air Cleansing: " &  air.status'Image);                                  ^ main.adb:31:34:VC_RANGE_CHECK]
                  [@vc:annotation]
                  [@GP_Reason:VC_RANGE_CHECK]
                  [@GP_Sloc:main.adb:31:34]
                  [@GP_Shape:call_put_line__concat]
                  [@GP_Id:9]
                  (Standard__positive.range_check_
                     (((1 : int)
                         + (((Integer.length (1 : int)) (15 : int))
                              + ((Integer.length
                                    (Standard__string.first temp___397))
                                   (Standard__string.last temp___397))))
                        - (1 : int))))))));
         ([@GP_Sloc:main.adb:32:7] [#"main.adb" 32 0 0] ());
         ([@GP_Sloc:main.adb:32:7]
          [#"main.adb" 32 0 0]
          (([#"main.adb" 32 0 0] (val _f : unit in
                                  _f));
           (Ada___ada__text_io__put_line__2___axiom.put_line
              (let temp___399 =
                 Temp___String_Literal_398.temp___String_Literal_398 () in
               ((Standard__string.of_array temp___399) (1 : int)) (55 : int)))));
         ([@GP_Sloc:main.adb:35:7]
          [#"main.adb" 35 0 0] [#"main.adb" 35 0 0] ());
         (raise Return__exc)
       with Return__exc -> ()
       end)))
end
