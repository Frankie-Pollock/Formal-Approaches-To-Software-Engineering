module Clean_air__carbon
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type carbon = <range 0 8>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (8 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = carbon,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type carbon__ref = { mutable carbon__content : carbon }
  
  function carbon__ref_carbon__content__projection (a: carbon__ref) : carbon =
    a.carbon__content
  
  meta "model_projection" function carbon__ref_carbon__content__projection
  
  meta "inline:no" function carbon__ref_carbon__content__projection
  
  val carbon__havoc (x: carbon__ref) : unit
    writes { x }
end

module Clean_air__carbon__rep
  use Clean_air__carbon as Clean_air__carbon
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Clean_air__carbon.carbon) : int =
    Clean_air__carbon.carbon'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Clean_air__carbon.carbon,
    predicate in_range = Clean_air__carbon.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Clean_air__aircon
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type aircon
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = aircon,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type aircon__ref = { mutable aircon__content : aircon }
  
  function aircon__ref_aircon__content__projection (a: aircon__ref) : aircon =
    a.aircon__content
  
  meta "model_projection" function aircon__ref_aircon__content__projection
  
  meta "inline:no" function aircon__ref_aircon__content__projection
  
  val aircon__havoc (x: aircon__ref) : unit
    writes { x }
end

module Clean_air__aircon__rep
  use Clean_air__aircon as Clean_air__aircon
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Clean_air__aircon.aircon,
    predicate in_range = Clean_air__aircon.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Clean_air__cleanair__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Clean_air__carbon as Clean_air__carbon
  use Clean_air__carbon__rep as Clean_air__carbon__rep
  use Clean_air__aircon as Clean_air__aircon
  use Clean_air__aircon__rep as Clean_air__aircon__rep
  
  type __split_fields = {
                       rec__clean_air__cleanair__carb :
                         Clean_air__carbon.carbon;
                       rec__clean_air__cleanair__status :
                         Clean_air__aircon.aircon;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__clean_air__cleanair__carb__projection (a: __split_fields) : 
    Clean_air__carbon.carbon =
    a.rec__clean_air__cleanair__carb
  
  meta "model_projection" function __split_fields_rec__clean_air__cleanair__carb__projection
  
  meta "inline:no" function __split_fields_rec__clean_air__cleanair__carb__projection
  
  function __split_fields_rec__clean_air__cleanair__status__projection (a: __split_fields) : 
    Clean_air__aircon.aircon =
    a.rec__clean_air__cleanair__status
  
  meta "model_projection" function __split_fields_rec__clean_air__cleanair__status__projection
  
  meta "inline:no" function __split_fields_rec__clean_air__cleanair__status__projection
  
  function __split_fields_rec__ext____projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____projection
  
  meta "inline:no" function __split_fields_rec__ext____projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function __rep_attr__tag__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__projection
  
  meta "inline:no" function __rep_attr__tag__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate clean_air__cleanair__carb__pred (a: __rep) = true
  
  val clean_air__cleanair__carb__pred (a: __rep) : bool
    ensures { result <-> (clean_air__cleanair__carb__pred (a : __rep)) }
  
  val rec__clean_air__cleanair__carb_ (a: __rep) : Clean_air__carbon.carbon
    requires { clean_air__cleanair__carb__pred a }
    ensures { (result = ((__split_fields a).rec__clean_air__cleanair__carb)) }
  
  predicate clean_air__cleanair__status__pred (a: __rep) = true
  
  val clean_air__cleanair__status__pred (a: __rep) : bool
    ensures { result <-> (clean_air__cleanair__status__pred (a : __rep)) }
  
  val rec__clean_air__cleanair__status_ (a: __rep) : Clean_air__aircon.aircon
    requires { clean_air__cleanair__status__pred a }
    ensures { (result
                 = ((__split_fields a).rec__clean_air__cleanair__status)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Clean_air__carbon__rep.to_rep
            ((__split_fields a).rec__clean_air__cleanair__carb))
           = (Clean_air__carbon__rep.to_rep
                ((__split_fields b).rec__clean_air__cleanair__carb))) /\
          ((Clean_air__aircon__rep.to_rep
              ((__split_fields a).rec__clean_air__cleanair__status))
             = (Clean_air__aircon__rep.to_rep
                  ((__split_fields b).rec__clean_air__cleanair__status)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module Clean_air__cleanair
  use export Clean_air__cleanair__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type cleanair = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function clean_air__cleanair__carb__first__bit : int
  
  val function clean_air__cleanair__carb__last__bit : int
  
  val function clean_air__cleanair__carb__position : int
  
  axiom clean_air__cleanair__carb__first__bit_axiom:
    (clean_air__cleanair__carb__first__bit >= (0 : int))
  
  axiom clean_air__cleanair__carb__last__bit_axiom:
    (clean_air__cleanair__carb__last__bit
       > clean_air__cleanair__carb__first__bit)
  
  axiom clean_air__cleanair__carb__position_axiom:
    (clean_air__cleanair__carb__position >= (0 : int))
  
  val function clean_air__cleanair__status__first__bit : int
  
  val function clean_air__cleanair__status__last__bit : int
  
  val function clean_air__cleanair__status__position : int
  
  axiom clean_air__cleanair__status__first__bit_axiom:
    (clean_air__cleanair__status__first__bit >= (0 : int))
  
  axiom clean_air__cleanair__status__last__bit_axiom:
    (clean_air__cleanair__status__last__bit
       > clean_air__cleanair__status__first__bit)
  
  axiom clean_air__cleanair__status__position_axiom:
    (clean_air__cleanair__status__position >= (0 : int))
  
  val function user_eq (a: cleanair) (b: cleanair) : bool
  
  val function dummy : cleanair
  
  type cleanair__ref = { mutable cleanair__content : cleanair }
  
  function cleanair__ref_cleanair__content__projection (a: cleanair__ref) : cleanair =
    a.cleanair__content
  
  meta "model_projection" function cleanair__ref_cleanair__content__projection
  
  meta "inline:no" function cleanair__ref_cleanair__content__projection
  
  val cleanair__havoc (x: cleanair__ref) : unit
    writes { x }
end

module Clean_air__update__this
  use _gnatprove_standard.Main
  use int.Int
  use Clean_air__cleanair as Clean_air__cleanair
  
  val this__split_fields : Clean_air__cleanair.__split_fields__ref
  
  val function this__attr__tag : int
end

module Clean_air__cleanair___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Clean_air__cleanair as Clean_air__cleanair
  
  predicate dynamic_invariant (temp___expr_180: Clean_air__cleanair.cleanair) (temp___is_init_176: bool) (temp___skip_constant_177: bool) (temp___do_toplevel_178: bool) (temp___do_typ_inv_179: bool) =
    true
  
  val dynamic_invariant (temp___expr_180: Clean_air__cleanair.cleanair) (temp___is_init_176: bool) (temp___skip_constant_177: bool) (temp___do_toplevel_178: bool) (temp___do_typ_inv_179: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_180 : Clean_air__cleanair.cleanair))
                      (temp___is_init_176 : bool))
                     (temp___skip_constant_177 : bool))
                    (temp___do_toplevel_178 : bool))
                   (temp___do_typ_inv_179 : bool)) }
  
  predicate default_initial_assumption (temp___expr_181: Clean_air__cleanair.cleanair) (temp___skip_top_level_182: bool) =
    ((Clean_air__cleanair.attr__tag temp___expr_181)
       = Clean_air__cleanair.__tag)
  
  val default_initial_assumption (temp___expr_181: Clean_air__cleanair.cleanair) (temp___skip_top_level_182: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_181 : Clean_air__cleanair.cleanair))
                   (temp___skip_top_level_182 : bool)) }
end

module Clean_air__carbon___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Clean_air__carbon as Clean_air__carbon
  
  predicate dynamic_invariant (temp___expr_166: int) (temp___is_init_162: bool) (temp___skip_constant_163: bool) (temp___do_toplevel_164: bool) (temp___do_typ_inv_165: bool) =
    if ((temp___is_init_162 = True) \/
          (Clean_air__carbon.first <= Clean_air__carbon.last)) then
      (((Clean_air__carbon.dynamic_property Clean_air__carbon.first)
          Clean_air__carbon.last)
         temp___expr_166)
    else true
  
  val dynamic_invariant (temp___expr_166: int) (temp___is_init_162: bool) (temp___skip_constant_163: bool) (temp___do_toplevel_164: bool) (temp___do_typ_inv_165: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_166 : int))
                      (temp___is_init_162 : bool))
                     (temp___skip_constant_163 : bool))
                    (temp___do_toplevel_164 : bool))
                   (temp___do_typ_inv_165 : bool)) }
  
  predicate default_initial_assumption (temp___expr_167: int) (temp___skip_top_level_168: bool) =
    true
  
  val default_initial_assumption (temp___expr_167: int) (temp___skip_top_level_168: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_167 : int))
                   (temp___skip_top_level_168 : bool)) }
end

module Clean_air__aircon___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Clean_air__aircon as Clean_air__aircon
  
  predicate dynamic_invariant (temp___expr_173: int) (temp___is_init_169: bool) (temp___skip_constant_170: bool) (temp___do_toplevel_171: bool) (temp___do_typ_inv_172: bool) =
    if ((temp___is_init_169 = True) \/
          (Clean_air__aircon.first <= Clean_air__aircon.last)) then
      (((Clean_air__aircon.dynamic_property Clean_air__aircon.first)
          Clean_air__aircon.last)
         temp___expr_173)
    else true
  
  val dynamic_invariant (temp___expr_173: int) (temp___is_init_169: bool) (temp___skip_constant_170: bool) (temp___do_toplevel_171: bool) (temp___do_typ_inv_172: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_173 : int))
                      (temp___is_init_169 : bool))
                     (temp___skip_constant_170 : bool))
                    (temp___do_toplevel_171 : bool))
                   (temp___do_typ_inv_172 : bool)) }
  
  predicate default_initial_assumption (temp___expr_174: int) (temp___skip_top_level_175: bool) =
    true
  
  val default_initial_assumption (temp___expr_174: int) (temp___skip_top_level_175: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_174 : int))
                   (temp___skip_top_level_175 : bool)) }
end

module Clean_air__update__this___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Clean_air__update__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Boolean as Boolean
  use Clean_air__update__this as Clean_air__update__this
  use Clean_air__cleanair as Clean_air__cleanair
  use Clean_air__cleanair___axiom as Clean_air__cleanair___axiom
  use Clean_air__carbon as Clean_air__carbon
  use Clean_air__carbon__rep as Clean_air__carbon__rep
  use Clean_air__aircon as Clean_air__aircon
  use Clean_air__aircon__rep as Clean_air__aircon__rep
  use Clean_air__carbon___axiom as Clean_air__carbon___axiom
  use Clean_air__aircon___axiom as Clean_air__aircon___axiom
  use Clean_air__cleanair___axiom as Clean_air__cleanair___axiom
  use Clean_air__update__this___axiom as Clean_air__update__this___axiom
  
  let def (__void_param : unit)
    requires { [#"clean_air.ads" 18 0 0] true }
    ensures { [#"clean_air.ads" 18 0 0]
              [#"clean_air.ads" 21 0 0]
              [@GP_Reason:VC_POSTCONDITION]
              [@GP_Sloc:clean_air.ads:21:15]
              [@comment:      Post => (This.carb in Carbon'Range) and                ^ clean_air.ads:21:15:VC_POSTCONDITION]
              [@model_vc_post]
              [@GP_Id:2]
              [@GP_Shape:pragargs__and]
              (([@GP_Sloc:clean_air.ads:21:15]
                [@GP_Pretty_Ada:1022]
                (let temp___220 =
                   Clean_air__carbon__rep.to_rep
                     ((Clean_air__cleanair.__split_fields
                          { Clean_air__cleanair.__split_fields =
                              (Clean_air__cleanair.__split_fields__content
                                  Clean_air__update__this.this__split_fields) ;
                            Clean_air__cleanair.attr__tag =
                              Clean_air__update__this.this__attr__tag }).
                        Clean_air__cleanair.rec__clean_air__cleanair__carb) in
                 (((0 : int) <= temp___220) /\ (temp___220 <= (8 : int))))) /\
                 ([@GP_Sloc:clean_air.ads:22:15]
                  [@GP_Pretty_Ada:1040]
                  ((((Clean_air__aircon__rep.to_rep
                        ((Clean_air__cleanair.__split_fields
                             { Clean_air__cleanair.__split_fields =
                                 (Clean_air__cleanair.__split_fields__content
                                     Clean_air__update__this.this__split_fields) ;
                               Clean_air__cleanair.attr__tag =
                                 Clean_air__update__this.this__attr__tag }).
                           Clean_air__cleanair.rec__clean_air__cleanair__status))
                       = (1 : int)) /\
                      ((Clean_air__carbon__rep.to_rep
                          ((Clean_air__cleanair.__split_fields
                               { Clean_air__cleanair.__split_fields =
                                   (Clean_air__cleanair.__split_fields__content
                                       Clean_air__update__this.this__split_fields) ;
                                 Clean_air__cleanair.attr__tag =
                                   Clean_air__update__this.this__attr__tag }).
                             Clean_air__cleanair.rec__clean_air__cleanair__carb))
                         <= (4 : int))) \/
                     (((Clean_air__aircon__rep.to_rep
                          ((Clean_air__cleanair.__split_fields
                               { Clean_air__cleanair.__split_fields =
                                   (Clean_air__cleanair.__split_fields__content
                                       Clean_air__update__this.this__split_fields) ;
                                 Clean_air__cleanair.attr__tag =
                                   Clean_air__update__this.this__attr__tag }).
                             Clean_air__cleanair.rec__clean_air__cleanair__status))
                         = (0 : int)) /\
                        ((Clean_air__carbon__rep.to_rep
                            ((Clean_air__cleanair.__split_fields
                                 { Clean_air__cleanair.__split_fields =
                                     (Clean_air__cleanair.__split_fields__content
                                         Clean_air__update__this.this__split_fields) ;
                                   Clean_air__cleanair.attr__tag =
                                     Clean_air__update__this.this__attr__tag }).
                               Clean_air__cleanair.rec__clean_air__cleanair__carb))
                           <= (9 : int)))))) }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram clean_air.ads:18]
      ());
     assume {
       ((((Clean_air__cleanair___axiom.dynamic_invariant
             { Clean_air__cleanair.__split_fields =
                 (Clean_air__cleanair.__split_fields__content
                     Clean_air__update__this.this__split_fields) ;
               Clean_air__cleanair.attr__tag =
                 Clean_air__update__this.this__attr__tag })
            True)
           False)
          True)
         True };
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram clean_air.ads:18]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram clean_air.ads:18]
      ());
     ([@GNAT-comment:Assume Pre of the subprogram clean_air.ads:18] ());
     assume {
       (([@GP_Pretty_Ada:1007]
         (let temp___218 =
            Clean_air__carbon__rep.to_rep
              ((Clean_air__cleanair.__split_fields
                   { Clean_air__cleanair.__split_fields =
                       (Clean_air__cleanair.__split_fields__content
                           Clean_air__update__this.this__split_fields) ;
                     Clean_air__cleanair.attr__tag =
                       Clean_air__update__this.this__attr__tag }).Clean_air__cleanair.rec__clean_air__cleanair__carb) in
          (((0 : int) <= temp___218) /\ (temp___218 <= (8 : int))))) /\
          ([@GP_Pretty_Ada:1014]
           (let temp___219 =
              Clean_air__aircon__rep.to_rep
                ((Clean_air__cleanair.__split_fields
                     { Clean_air__cleanair.__split_fields =
                         (Clean_air__cleanair.__split_fields__content
                             Clean_air__update__this.this__split_fields) ;
                       Clean_air__cleanair.attr__tag =
                         Clean_air__update__this.this__attr__tag }).Clean_air__cleanair.rec__clean_air__cleanair__status) in
            Clean_air__aircon.in_range temp___219))) };
     (try
        ([@GP_Sloc:clean_air.adb:6:7]
         [#"clean_air.adb" 6 0 0]
         (if (([#"clean_air.adb" 6 0 0]
               [#"clean_air.adb" 6 0 0]
               (([@branch_id=828] Main.spark__branch).bool__content <-
                  ((Boolean.andb
                      ((Clean_air__carbon__rep.to_rep
                          ((Clean_air__cleanair.__split_fields
                               { Clean_air__cleanair.__split_fields =
                                   (Clean_air__cleanair.__split_fields__content
                                       Clean_air__update__this.this__split_fields) ;
                                 Clean_air__cleanair.attr__tag =
                                   Clean_air__update__this.this__attr__tag }).
                             Clean_air__cleanair.rec__clean_air__cleanair__carb))
                         = (8 : int)))
                     ((Clean_air__aircon__rep.to_rep
                         ((Clean_air__cleanair.__split_fields
                              { Clean_air__cleanair.__split_fields =
                                  (Clean_air__cleanair.__split_fields__content
                                      Clean_air__update__this.this__split_fields) ;
                                Clean_air__cleanair.attr__tag =
                                  Clean_air__update__this.this__attr__tag }).
                            Clean_air__cleanair.rec__clean_air__cleanair__status))
                        = (0 : int)))));
              (([@branch_id=828] Main.spark__branch).bool__content)) then
            ([@GP_Sloc:clean_air.adb:7:22]
             [#"clean_air.adb" 7 0 0]
             (let temp___201 =
                let temp___200 =
                  { Clean_air__cleanair.__split_fields =
                      (Clean_air__cleanair.__split_fields__content
                          Clean_air__update__this.this__split_fields) ;
                    Clean_air__cleanair.attr__tag =
                      Clean_air__update__this.this__attr__tag } in
                ([#"clean_air.adb" 7 0 0]
                 (begin
                    ensures { true }
                    let _ =
                      let _ =
                        (Clean_air__cleanair.__split_fields temp___200).
                          Clean_air__cleanair.rec__clean_air__cleanair__status in
                      () in
                    ()
                  end));
                ({ temp___200 with
                   Clean_air__cleanair.__split_fields =
                     ({ (Clean_air__cleanair.__split_fields temp___200) with
                        Clean_air__cleanair.rec__clean_air__cleanair__status =
                          (Clean_air__aircon__rep.of_rep (1 : int)) }) }) in
              [#"clean_air.adb" 7 0 0]
              (Clean_air__update__this.this__split_fields.Clean_air__cleanair.__split_fields__content <-
                 (Clean_air__cleanair.__split_fields temp___201))))
          else
            ([@GP_Sloc:clean_air.adb:9:7]
             (if (([#"clean_air.adb" 9 0 0]
                   [#"clean_air.adb" 9 0 0]
                   (([@branch_id=846] Main.spark__branch).bool__content <-
                      ((Clean_air__carbon__rep.to_rep
                          ((Clean_air__cleanair.__split_fields
                               { Clean_air__cleanair.__split_fields =
                                   (Clean_air__cleanair.__split_fields__content
                                       Clean_air__update__this.this__split_fields) ;
                                 Clean_air__cleanair.attr__tag =
                                   Clean_air__update__this.this__attr__tag }).
                             Clean_air__cleanair.rec__clean_air__cleanair__carb))
                         = (0 : int))));
                  (([@branch_id=846] Main.spark__branch).bool__content)) then
                ([@GP_Sloc:clean_air.adb:10:22]
                 [#"clean_air.adb" 10 0 0]
                 (let temp___204 =
                    let temp___203 =
                      { Clean_air__cleanair.__split_fields =
                          (Clean_air__cleanair.__split_fields__content
                              Clean_air__update__this.this__split_fields) ;
                        Clean_air__cleanair.attr__tag =
                          Clean_air__update__this.this__attr__tag } in
                    ([#"clean_air.adb" 10 0 0]
                     (begin
                        ensures { true }
                        let _ =
                          let _ =
                            (Clean_air__cleanair.__split_fields temp___203).
                              Clean_air__cleanair.rec__clean_air__cleanair__status in
                          () in
                        ()
                      end));
                    ({ temp___203 with
                       Clean_air__cleanair.__split_fields =
                         ({ (Clean_air__cleanair.__split_fields temp___203) with
                            Clean_air__cleanair.rec__clean_air__cleanair__status =
                              (Clean_air__aircon__rep.of_rep (0 : int)) }) }) in
                  [#"clean_air.adb" 10 0 0]
                  (Clean_air__update__this.this__split_fields.Clean_air__cleanair.__split_fields__content <-
                     (Clean_air__cleanair.__split_fields temp___204))))
              else ()))));
        ([@GP_Sloc:clean_air.adb:13:7]
         [#"clean_air.adb" 13 0 0]
         (if (([#"clean_air.adb" 13 0 0]
               [#"clean_air.adb" 13 0 0]
               (([@branch_id=856] Main.spark__branch).bool__content <-
                  ((Clean_air__aircon__rep.to_rep
                      ((Clean_air__cleanair.__split_fields
                           { Clean_air__cleanair.__split_fields =
                               (Clean_air__cleanair.__split_fields__content
                                   Clean_air__update__this.this__split_fields) ;
                             Clean_air__cleanair.attr__tag =
                               Clean_air__update__this.this__attr__tag }).
                         Clean_air__cleanair.rec__clean_air__cleanair__status))
                     = (1 : int))));
              (([@branch_id=856] Main.spark__branch).bool__content)) then
            ([@GP_Sloc:clean_air.adb:15:10]
             [#"clean_air.adb" 15 0 0]
             (if (([#"clean_air.adb" 15 0 0]
                   [#"clean_air.adb" 15 0 0]
                   (([@branch_id=862] Main.spark__branch).bool__content <-
                      (((Clean_air__carbon__rep.to_rep
                           ((Clean_air__cleanair.__split_fields
                                { Clean_air__cleanair.__split_fields =
                                    (Clean_air__cleanair.__split_fields__content
                                        Clean_air__update__this.this__split_fields) ;
                                  Clean_air__cleanair.attr__tag =
                                    Clean_air__update__this.this__attr__tag }).
                              Clean_air__cleanair.rec__clean_air__cleanair__carb))
                          - (4 : int))
                         >= (0 : int))));
                  (([@branch_id=862] Main.spark__branch).bool__content)) then
                ([@GP_Sloc:clean_air.adb:16:23]
                 [#"clean_air.adb" 16 0 0]
                 (let temp___207 =
                    let temp___206 =
                      { Clean_air__cleanair.__split_fields =
                          (Clean_air__cleanair.__split_fields__content
                              Clean_air__update__this.this__split_fields) ;
                        Clean_air__cleanair.attr__tag =
                          Clean_air__update__this.this__attr__tag } in
                    ([#"clean_air.adb" 16 0 0]
                     (begin
                        ensures { true }
                        let _ =
                          let _ =
                            (Clean_air__cleanair.__split_fields temp___206).
                              Clean_air__cleanair.rec__clean_air__cleanair__carb in
                          () in
                        ()
                      end));
                    ({ temp___206 with
                       Clean_air__cleanair.__split_fields =
                         ({ (Clean_air__cleanair.__split_fields temp___206) with
                            Clean_air__cleanair.rec__clean_air__cleanair__carb =
                              (Clean_air__carbon__rep.of_rep
                                 ([#"clean_air.adb" 16 0 0]
                                  [@vc:annotation]
                                  [@GP_Reason:VC_RANGE_CHECK]
                                  [@comment:            This.carb := This.carb - CarbonDecrease;                                    ^ clean_air.adb:16:36:VC_RANGE_CHECK]
                                  [@GP_Shape:if__if__this_assign__sub]
                                  [@GP_Id:0]
                                  [@GP_Sloc:clean_air.adb:16:36]
                                  (Clean_air__carbon.range_check_
                                     ((Clean_air__carbon__rep.to_rep
                                         ((Clean_air__cleanair.__split_fields
                                              { Clean_air__cleanair.__split_fields =
                                                  (Clean_air__cleanair.__split_fields__content
                                                      Clean_air__update__this.this__split_fields) ;
                                                Clean_air__cleanair.attr__tag =
                                                  Clean_air__update__this.this__attr__tag }).
                                            Clean_air__cleanair.rec__clean_air__cleanair__carb))
                                        - (4 : int))))) }) }) in
                  Clean_air__update__this.this__split_fields.Clean_air__cleanair.__split_fields__content <-
                    (Clean_air__cleanair.__split_fields temp___207)))
              else
                ([@GP_Sloc:clean_air.adb:18:23]
                 [#"clean_air.adb" 18 0 0]
                 (let temp___210 =
                    let temp___209 =
                      { Clean_air__cleanair.__split_fields =
                          (Clean_air__cleanair.__split_fields__content
                              Clean_air__update__this.this__split_fields) ;
                        Clean_air__cleanair.attr__tag =
                          Clean_air__update__this.this__attr__tag } in
                    ([#"clean_air.adb" 18 0 0]
                     (begin
                        ensures { true }
                        let _ =
                          let _ =
                            (Clean_air__cleanair.__split_fields temp___209).
                              Clean_air__cleanair.rec__clean_air__cleanair__carb in
                          () in
                        ()
                      end));
                    ({ temp___209 with
                       Clean_air__cleanair.__split_fields =
                         ({ (Clean_air__cleanair.__split_fields temp___209) with
                            Clean_air__cleanair.rec__clean_air__cleanair__carb =
                              (0 : Clean_air__carbon.carbon) }) }) in
                  [#"clean_air.adb" 18 0 0]
                  (Clean_air__update__this.this__split_fields.Clean_air__cleanair.__split_fields__content <-
                     (Clean_air__cleanair.__split_fields temp___210))))))
          else
            ([@GP_Sloc:clean_air.adb:20:7]
             (if (([#"clean_air.adb" 20 0 0]
                   [#"clean_air.adb" 20 0 0]
                   (([@branch_id=889] Main.spark__branch).bool__content <-
                      ((Clean_air__aircon__rep.to_rep
                          ((Clean_air__cleanair.__split_fields
                               { Clean_air__cleanair.__split_fields =
                                   (Clean_air__cleanair.__split_fields__content
                                       Clean_air__update__this.this__split_fields) ;
                                 Clean_air__cleanair.attr__tag =
                                   Clean_air__update__this.this__attr__tag }).
                             Clean_air__cleanair.rec__clean_air__cleanair__status))
                         = (0 : int))));
                  (([@branch_id=889] Main.spark__branch).bool__content)) then
                ([@GP_Sloc:clean_air.adb:22:10]
                 [#"clean_air.adb" 22 0 0]
                 (if (([#"clean_air.adb" 22 0 0]
                       [#"clean_air.adb" 22 0 0]
                       (([@branch_id=894] Main.spark__branch).bool__content <-
                          (((Clean_air__carbon__rep.to_rep
                               ((Clean_air__cleanair.__split_fields
                                    { Clean_air__cleanair.__split_fields =
                                        (Clean_air__cleanair.__split_fields__content
                                            Clean_air__update__this.this__split_fields) ;
                                      Clean_air__cleanair.attr__tag =
                                        Clean_air__update__this.this__attr__tag }).
                                  Clean_air__cleanair.rec__clean_air__cleanair__carb))
                              + (1 : int))
                             <= (8 : int))));
                      (([@branch_id=894] Main.spark__branch).bool__content)) then
                    ([@GP_Sloc:clean_air.adb:23:23]
                     [#"clean_air.adb" 23 0 0]
                     (let temp___213 =
                        let temp___212 =
                          { Clean_air__cleanair.__split_fields =
                              (Clean_air__cleanair.__split_fields__content
                                  Clean_air__update__this.this__split_fields) ;
                            Clean_air__cleanair.attr__tag =
                              Clean_air__update__this.this__attr__tag } in
                        ([#"clean_air.adb" 23 0 0]
                         (begin
                            ensures { true }
                            let _ =
                              let _ =
                                (Clean_air__cleanair.__split_fields
                                    temp___212).Clean_air__cleanair.rec__clean_air__cleanair__carb in
                              () in
                            ()
                          end));
                        ({ temp___212 with
                           Clean_air__cleanair.__split_fields =
                             ({ (Clean_air__cleanair.__split_fields
                                    temp___212) with
                                Clean_air__cleanair.rec__clean_air__cleanair__carb =
                                  (Clean_air__carbon__rep.of_rep
                                     ([#"clean_air.adb" 23 0 0]
                                      [@vc:annotation]
                                      [@GP_Shape:if__if__this_assign__add]
                                      [@GP_Reason:VC_RANGE_CHECK]
                                      [@comment:            This.carb := This.carb + CarbonIncrease;                                    ^ clean_air.adb:23:36:VC_RANGE_CHECK]
                                      [@GP_Sloc:clean_air.adb:23:36]
                                      [@GP_Id:1]
                                      (Clean_air__carbon.range_check_
                                         ((Clean_air__carbon__rep.to_rep
                                             ((Clean_air__cleanair.__split_fields
                                                  { Clean_air__cleanair.__split_fields =
                                                      (Clean_air__cleanair.__split_fields__content
                                                          Clean_air__update__this.this__split_fields) ;
                                                    Clean_air__cleanair.attr__tag =
                                                      Clean_air__update__this.this__attr__tag }).
                                                Clean_air__cleanair.rec__clean_air__cleanair__carb))
                                            + (1 : int))))) }) }) in
                      Clean_air__update__this.this__split_fields.Clean_air__cleanair.__split_fields__content <-
                        (Clean_air__cleanair.__split_fields temp___213)))
                  else
                    ([@GP_Sloc:clean_air.adb:25:23]
                     [#"clean_air.adb" 25 0 0]
                     (let temp___216 =
                        let temp___215 =
                          { Clean_air__cleanair.__split_fields =
                              (Clean_air__cleanair.__split_fields__content
                                  Clean_air__update__this.this__split_fields) ;
                            Clean_air__cleanair.attr__tag =
                              Clean_air__update__this.this__attr__tag } in
                        ([#"clean_air.adb" 25 0 0]
                         (begin
                            ensures { true }
                            let _ =
                              let _ =
                                (Clean_air__cleanair.__split_fields
                                    temp___215).Clean_air__cleanair.rec__clean_air__cleanair__carb in
                              () in
                            ()
                          end));
                        ({ temp___215 with
                           Clean_air__cleanair.__split_fields =
                             ({ (Clean_air__cleanair.__split_fields
                                    temp___215) with
                                Clean_air__cleanair.rec__clean_air__cleanair__carb =
                                  (8 : Clean_air__carbon.carbon) }) }) in
                      [#"clean_air.adb" 25 0 0]
                      (Clean_air__update__this.this__split_fields.Clean_air__cleanair.__split_fields__content <-
                         (Clean_air__cleanair.__split_fields temp___216))))))
              else ()))));
        (raise Return__exc)
      with Return__exc -> ()
      end);
     (begin
        ensures { true }
        let _ =
          let _ =
            (Boolean.andb
               (let temp___217 =
                  Clean_air__carbon__rep.to_rep
                    ((Clean_air__cleanair.__split_fields
                         { Clean_air__cleanair.__split_fields =
                             (Clean_air__cleanair.__split_fields__content
                                 Clean_air__update__this.this__split_fields) ;
                           Clean_air__cleanair.attr__tag =
                             Clean_air__update__this.this__attr__tag }).
                       Clean_air__cleanair.rec__clean_air__cleanair__carb) in
                (Boolean.andb ((0 : int) <= temp___217))
                  (temp___217 <= (8 : int))))
              ((Boolean.orb
                  ((Boolean.andb
                      ((Clean_air__aircon__rep.to_rep
                          ((Clean_air__cleanair.__split_fields
                               { Clean_air__cleanair.__split_fields =
                                   (Clean_air__cleanair.__split_fields__content
                                       Clean_air__update__this.this__split_fields) ;
                                 Clean_air__cleanair.attr__tag =
                                   Clean_air__update__this.this__attr__tag }).
                             Clean_air__cleanair.rec__clean_air__cleanair__status))
                         = (1 : int)))
                     ((Clean_air__carbon__rep.to_rep
                         ((Clean_air__cleanair.__split_fields
                              { Clean_air__cleanair.__split_fields =
                                  (Clean_air__cleanair.__split_fields__content
                                      Clean_air__update__this.this__split_fields) ;
                                Clean_air__cleanair.attr__tag =
                                  Clean_air__update__this.this__attr__tag }).
                            Clean_air__cleanair.rec__clean_air__cleanair__carb))
                        <= (4 : int))))
                 ((Boolean.andb
                     ((Clean_air__aircon__rep.to_rep
                         ((Clean_air__cleanair.__split_fields
                              { Clean_air__cleanair.__split_fields =
                                  (Clean_air__cleanair.__split_fields__content
                                      Clean_air__update__this.this__split_fields) ;
                                Clean_air__cleanair.attr__tag =
                                  Clean_air__update__this.this__attr__tag }).
                            Clean_air__cleanair.rec__clean_air__cleanair__status))
                        = (0 : int)))
                    ((Clean_air__carbon__rep.to_rep
                        ((Clean_air__cleanair.__split_fields
                             { Clean_air__cleanair.__split_fields =
                                 (Clean_air__cleanair.__split_fields__content
                                     Clean_air__update__this.this__split_fields) ;
                               Clean_air__cleanair.attr__tag =
                                 Clean_air__update__this.this__attr__tag }).
                           Clean_air__cleanair.rec__clean_air__cleanair__carb))
                       <= (9 : int)))) in
          () in
        ()
      end))
end

module Clean_air__update__subprogram_lsp
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use Clean_air__update__this as Clean_air__update__this
  use Clean_air__cleanair as Clean_air__cleanair
  use Clean_air__cleanair___axiom as Clean_air__cleanair___axiom
  use Clean_air__carbon as Clean_air__carbon
  use Clean_air__carbon__rep as Clean_air__carbon__rep
  use Clean_air__aircon as Clean_air__aircon
  use Clean_air__aircon__rep as Clean_air__aircon__rep
  use Clean_air__carbon___axiom as Clean_air__carbon___axiom
  use Clean_air__aircon___axiom as Clean_air__aircon___axiom
  use Clean_air__cleanair___axiom as Clean_air__cleanair___axiom
  use Clean_air__update__this___axiom as Clean_air__update__this___axiom
  
  let def (__void_param : unit)
    requires { [#"clean_air.ads" 18 0 0] true }
    ensures { [#"clean_air.ads" 18 0 0] true }
  = [@vc:divergent]
    (([#"clean_air.ads" 18 0 0]
      assume {
        [#"clean_air.ads" 18 0 0]
        (((((Clean_air__cleanair___axiom.dynamic_invariant
               { Clean_air__cleanair.__split_fields =
                   (Clean_air__cleanair.__split_fields__content
                       Clean_air__update__this.this__split_fields) ;
                 Clean_air__cleanair.attr__tag =
                   Clean_air__update__this.this__attr__tag })
              True)
             False)
            True)
           True) });
     ([#"clean_air.ads" 18 0 0]
      (begin
         ensures { true }
         let _ =
           let _ =
             (Boolean.andb
                (let temp___224 =
                   Clean_air__carbon__rep.to_rep
                     ((Clean_air__cleanair.__split_fields
                          { Clean_air__cleanair.__split_fields =
                              (Clean_air__cleanair.__split_fields__content
                                  Clean_air__update__this.this__split_fields) ;
                            Clean_air__cleanair.attr__tag =
                              Clean_air__update__this.this__attr__tag }).
                        Clean_air__cleanair.rec__clean_air__cleanair__carb) in
                 (Boolean.andb ((0 : int) <= temp___224))
                   (temp___224 <= (8 : int))))
               (let temp___225 =
                  Clean_air__aircon__rep.to_rep
                    ((Clean_air__cleanair.__split_fields
                         { Clean_air__cleanair.__split_fields =
                             (Clean_air__cleanair.__split_fields__content
                                 Clean_air__update__this.this__split_fields) ;
                           Clean_air__cleanair.attr__tag =
                             Clean_air__update__this.this__attr__tag }).
                       Clean_air__cleanair.rec__clean_air__cleanair__status) in
                Clean_air__aircon.in_range temp___225) in
           () in
         ()
       end)))
end
