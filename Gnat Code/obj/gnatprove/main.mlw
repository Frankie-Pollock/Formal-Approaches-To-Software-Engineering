module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__positive
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type positive = <range 1 2147483647>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = positive,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type positive__ref = { mutable positive__content : positive }
  
  function positive__ref_positive__content__projection (a: positive__ref) : positive =
    a.positive__content
  
  meta "model_projection" function positive__ref_positive__content__projection
  
  meta "inline:no" function positive__ref_positive__content__projection
  
  val positive__havoc (x: positive__ref) : unit
    writes { x }
end

module Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type character
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (255 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = character,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type character__ref = { mutable character__content : character }
  
  function character__ref_character__content__projection (a: character__ref) : character =
    a.character__content
  
  meta "model_projection" function character__ref_character__content__projection
  
  meta "inline:no" function character__ref_character__content__projection
  
  val character__havoc (x: character__ref) : unit
    writes { x }
end

module Standard__character__rep
  use Standard__character as Standard__character
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Array__Int__Standard__character
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  
  function index_I1_one : int = 1 : int
  
  type component_type = Standard__character.character
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_98 : int.
          if ((a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last)) then
            ((Standard__character__rep.to_rep ((get a) temp___idx_98))
               = (Standard__character__rep.to_rep
                    ((get b) ((b__first - a__first) + temp___idx_98))))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_98 : int.
                 if ((a__first <= temp___idx_98) /\
                       (temp___idx_98 <= a__last)) then
                   ((Standard__character__rep.to_rep ((get a) temp___idx_98))
                      = (Standard__character__rep.to_rep
                           ((get b) ((b__first - a__first) + temp___idx_98))))
                 else true)))
end

module Standard__integer__rep
  use Standard__integer as Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__integer.integer) : int =
    Standard__integer.integer'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__string
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  use Standard__positive as Standard__positive
  use Standard__character as Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__integer__rep as Standard__integer__rep
  
  type component_type = Standard__character.character
  
  function index_1_id (x: int) : int = x
  
  clone export ada__model.Unconstr_Array with
    axiom .,
    type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = Int.( <= )
  
  type string__ = __t
  
  meta "model_projection" function to_array
  
  meta "inline:no" function to_array
  
  meta "model_projection" function first
  
  meta "inline:no" function first
  
  meta "model_projection" function last
  
  meta "inline:no" function last
  
  type string____ref = { mutable string____content : string__ }
  
  function string____ref_string____content__projection (a: string____ref) : string__ =
    a.string____content
  
  meta "model_projection" function string____ref_string____content__projection
  
  meta "inline:no" function string____ref_string____content__projection
  
  val string____havoc (x: string____ref) : unit
    writes { x }
end

module House_heating__temperature
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type temperature = <range 17 19>
  
  val function first : int
    ensures { result = (17 : int) }
  
  val function last : int
    ensures { result = (19 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = temperature,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type temperature__ref = { mutable temperature__content : temperature }
  
  function temperature__ref_temperature__content__projection (a: temperature__ref) : temperature =
    a.temperature__content
  
  meta "model_projection" function temperature__ref_temperature__content__projection
  
  meta "inline:no" function temperature__ref_temperature__content__projection
  
  val temperature__havoc (x: temperature__ref) : unit
    writes { x }
end

module House_heating__temperature__rep
  use House_heating__temperature as House_heating__temperature
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: House_heating__temperature.temperature) : int =
    House_heating__temperature.temperature'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_heating__temperature.temperature,
    predicate in_range = House_heating__temperature.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_heating__heatingstatus
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type heatingstatus
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = heatingstatus,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type heatingstatus__ref = {
                           mutable heatingstatus__content : heatingstatus
                           }
  
  function heatingstatus__ref_heatingstatus__content__projection (a: heatingstatus__ref) : heatingstatus =
    a.heatingstatus__content
  
  meta "model_projection" function heatingstatus__ref_heatingstatus__content__projection
  
  meta "inline:no" function heatingstatus__ref_heatingstatus__content__projection
  
  val heatingstatus__havoc (x: heatingstatus__ref) : unit
    writes { x }
end

module House_heating__heatingstatus__rep
  use House_heating__heatingstatus as House_heating__heatingstatus
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_heating__heatingstatus.heatingstatus,
    predicate in_range = House_heating__heatingstatus.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_heating__househeating__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use House_heating__temperature as House_heating__temperature
  use House_heating__temperature__rep as House_heating__temperature__rep
  use House_heating__heatingstatus as House_heating__heatingstatus
  use House_heating__heatingstatus__rep as House_heating__heatingstatus__rep
  
  type __split_fields = {
                       rec__house_heating__househeating__temp :
                         House_heating__temperature.temperature;
                       rec__house_heating__househeating__status :
                         House_heating__heatingstatus.heatingstatus;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__house_heating__househeating__temp__projection (a: __split_fields) : 
    House_heating__temperature.temperature =
    a.rec__house_heating__househeating__temp
  
  meta "model_projection" function __split_fields_rec__house_heating__househeating__temp__projection
  
  meta "inline:no" function __split_fields_rec__house_heating__househeating__temp__projection
  
  function __split_fields_rec__house_heating__househeating__status__projection (a: __split_fields) : 
    House_heating__heatingstatus.heatingstatus =
    a.rec__house_heating__househeating__status
  
  meta "model_projection" function __split_fields_rec__house_heating__househeating__status__projection
  
  meta "inline:no" function __split_fields_rec__house_heating__househeating__status__projection
  
  function __split_fields_rec__ext____projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____projection
  
  meta "inline:no" function __split_fields_rec__ext____projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function __rep_attr__tag__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__projection
  
  meta "inline:no" function __rep_attr__tag__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate house_heating__househeating__temp__pred (a: __rep) = true
  
  val house_heating__househeating__temp__pred (a: __rep) : bool
    ensures { result
                <->
                (house_heating__househeating__temp__pred (a : __rep)) }
  
  val rec__house_heating__househeating__temp_ (a: __rep) : House_heating__temperature.temperature
    requires { house_heating__househeating__temp__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_heating__househeating__temp)) }
  
  predicate house_heating__househeating__status__pred (a: __rep) = true
  
  val house_heating__househeating__status__pred (a: __rep) : bool
    ensures { result
                <->
                (house_heating__househeating__status__pred (a : __rep)) }
  
  val rec__house_heating__househeating__status_ (a: __rep) : House_heating__heatingstatus.heatingstatus
    requires { house_heating__househeating__status__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_heating__househeating__status)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((House_heating__temperature__rep.to_rep
            ((__split_fields a).rec__house_heating__househeating__temp))
           = (House_heating__temperature__rep.to_rep
                ((__split_fields b).rec__house_heating__househeating__temp))) /\
          ((House_heating__heatingstatus__rep.to_rep
              ((__split_fields a).rec__house_heating__househeating__status))
             = (House_heating__heatingstatus__rep.to_rep
                  ((__split_fields b).rec__house_heating__househeating__status)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module House_heating__househeating
  use export House_heating__househeating__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type househeating = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function house_heating__househeating__temp__first__bit : int
  
  val function house_heating__househeating__temp__last__bit : int
  
  val function house_heating__househeating__temp__position : int
  
  axiom house_heating__househeating__temp__first__bit_axiom:
    (house_heating__househeating__temp__first__bit >= (0 : int))
  
  axiom house_heating__househeating__temp__last__bit_axiom:
    (house_heating__househeating__temp__last__bit
       > house_heating__househeating__temp__first__bit)
  
  axiom house_heating__househeating__temp__position_axiom:
    (house_heating__househeating__temp__position >= (0 : int))
  
  val function house_heating__househeating__status__first__bit : int
  
  val function house_heating__househeating__status__last__bit : int
  
  val function house_heating__househeating__status__position : int
  
  axiom house_heating__househeating__status__first__bit_axiom:
    (house_heating__househeating__status__first__bit >= (0 : int))
  
  axiom house_heating__househeating__status__last__bit_axiom:
    (house_heating__househeating__status__last__bit
       > house_heating__househeating__status__first__bit)
  
  axiom house_heating__househeating__status__position_axiom:
    (house_heating__househeating__status__position >= (0 : int))
  
  val function user_eq (a: househeating) (b: househeating) : bool
  
  val function dummy : househeating
  
  type househeating__ref = { mutable househeating__content : househeating }
  
  function househeating__ref_househeating__content__projection (a: househeating__ref) : househeating =
    a.househeating__content
  
  meta "model_projection" function househeating__ref_househeating__content__projection
  
  meta "inline:no" function househeating__ref_househeating__content__projection
  
  val househeating__havoc (x: househeating__ref) : unit
    writes { x }
end

module House_heating__createheating
  use _gnatprove_standard.Main
  use int.Int
  use House_heating__househeating as House_heating__househeating
  
  val function createheating (__void_param: unit) : House_heating__househeating.househeating
  
  val predicate createheating__function_guard (temp___result_163: House_heating__househeating.househeating) (__void_param: unit)
  
  scope Dispatch
    val function createheating (attr__tag: int) (__void_param: unit) : 
      House_heating__househeating.househeating
    
    val predicate createheating__function_guard (temp___result_163: House_heating__househeating.househeating) (attr__tag: int) (__void_param: unit)
    end
end

module House_heating__househeating___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_heating__househeating as House_heating__househeating
  
  predicate dynamic_invariant (temp___expr_214: House_heating__househeating.househeating) (temp___is_init_210: bool) (temp___skip_constant_211: bool) (temp___do_toplevel_212: bool) (temp___do_typ_inv_213: bool) =
    true
  
  val dynamic_invariant (temp___expr_214: House_heating__househeating.househeating) (temp___is_init_210: bool) (temp___skip_constant_211: bool) (temp___do_toplevel_212: bool) (temp___do_typ_inv_213: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_214 :
                          House_heating__househeating.househeating))
                      (temp___is_init_210 : bool))
                     (temp___skip_constant_211 : bool))
                    (temp___do_toplevel_212 : bool))
                   (temp___do_typ_inv_213 : bool)) }
  
  predicate default_initial_assumption (temp___expr_215: House_heating__househeating.househeating) (temp___skip_top_level_216: bool) =
    ((House_heating__househeating.attr__tag temp___expr_215)
       = House_heating__househeating.__tag)
  
  val default_initial_assumption (temp___expr_215: House_heating__househeating.househeating) (temp___skip_top_level_216: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_215 :
                       House_heating__househeating.househeating))
                   (temp___skip_top_level_216 : bool)) }
end

module House_heating__createheating___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_heating__househeating as House_heating__househeating
  use House_heating__createheating as House_heating__createheating
  use House_heating__househeating___axiom as House_heating__househeating___axiom
  
  val createheating (__void_param: unit) : House_heating__househeating.househeating
    requires { true }
    ensures { (((result = (House_heating__createheating.createheating ())) /\
                  ((House_heating__createheating.createheating__function_guard
                      result)
                     ())) /\
                 (((((House_heating__househeating___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  scope Dispatch
    val createheating (attr__tag: int) (__void_param: unit) : House_heating__househeating.househeating
      requires { true }
      ensures { (((result
                     = ((House_heating__createheating.Dispatch.createheating
                           attr__tag)
                          ())) /\
                    (((House_heating__createheating.Dispatch.createheating__function_guard
                         result)
                        attr__tag)
                       ())) /\
                   (((((House_heating__househeating___axiom.dynamic_invariant
                          result)
                         True)
                        False)
                       True)
                      True)) }
    end
  
  axiom createheating__post_axiom:
    forall __void_param : unit
          [House_heating__createheating.createheating __void_param].
      let result = House_heating__createheating.createheating __void_param in
      if ((House_heating__createheating.createheating__function_guard result)
            __void_param) then
        ((true /\
            (((((House_heating__househeating___axiom.dynamic_invariant result)
                  True)
                 False)
                True)
               True)) /\
           ((House_heating__househeating.attr__tag result)
              = House_heating__househeating.__tag))
      else true
  
  axiom createheating__post__dispatch_axiom:
    forall attr__tag : int.
      forall __void_param : unit
            [(House_heating__createheating.Dispatch.createheating attr__tag)
               __void_param].
        let result =
          (House_heating__createheating.Dispatch.createheating attr__tag)
            __void_param in
        if (((House_heating__createheating.Dispatch.createheating__function_guard
                result)
               attr__tag)
              __void_param) then
          ((true /\
              (((((House_heating__househeating___axiom.dynamic_invariant
                     result)
                    True)
                   False)
                  True)
                 True)) /\
             ((House_heating__househeating.attr__tag result) = attr__tag))
        else true
  
  axiom house_heating__househeating__compat_axiom:
    forall __void_param : unit
          [(House_heating__createheating.Dispatch.createheating
              House_heating__househeating.__tag)
             __void_param].
      ((((House_heating__createheating.Dispatch.createheating__function_guard
            ((House_heating__createheating.Dispatch.createheating
                House_heating__househeating.__tag)
               __void_param))
           House_heating__househeating.__tag)
          __void_param) ->
         ((epsilon temp___result_280: House_heating__househeating.househeating.
             ((temp___result_280
                 = (House_heating__createheating.createheating __void_param)) /\
                ((House_heating__createheating.createheating__function_guard
                    temp___result_280)
                   __void_param)))
            = ((House_heating__createheating.Dispatch.createheating
                  House_heating__househeating.__tag)
                 __void_param)))
end

module House_exterior__exteriorstatus
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type exteriorstatus
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = exteriorstatus,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type exteriorstatus__ref = {
                            mutable exteriorstatus__content : exteriorstatus
                            }
  
  function exteriorstatus__ref_exteriorstatus__content__projection (a: exteriorstatus__ref) : exteriorstatus =
    a.exteriorstatus__content
  
  meta "model_projection" function exteriorstatus__ref_exteriorstatus__content__projection
  
  meta "inline:no" function exteriorstatus__ref_exteriorstatus__content__projection
  
  val exteriorstatus__havoc (x: exteriorstatus__ref) : unit
    writes { x }
end

module House_exterior__exteriorstatus__rep
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_exterior__exteriorstatus.exteriorstatus,
    predicate in_range = House_exterior__exteriorstatus.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_exterior__houseexterior__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  use House_exterior__exteriorstatus__rep as House_exterior__exteriorstatus__rep
  
  type __split_fields = {
                       rec__house_exterior__houseexterior__status :
                         House_exterior__exteriorstatus.exteriorstatus;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__house_exterior__houseexterior__status__projection (a: __split_fields) : 
    House_exterior__exteriorstatus.exteriorstatus =
    a.rec__house_exterior__houseexterior__status
  
  meta "model_projection" function __split_fields_rec__house_exterior__houseexterior__status__projection
  
  meta "inline:no" function __split_fields_rec__house_exterior__houseexterior__status__projection
  
  function __split_fields_rec__ext____2__projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____2__projection
  
  meta "inline:no" function __split_fields_rec__ext____2__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__2__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__2__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__2__projection
  
  meta "inline:no" function __rep___split_fields__2__projection
  
  function __rep_attr__tag__2__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__2__projection
  
  meta "inline:no" function __rep_attr__tag__2__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate house_exterior__houseexterior__status__pred (a: __rep) = true
  
  val house_exterior__houseexterior__status__pred (a: __rep) : bool
    ensures { result
                <->
                (house_exterior__houseexterior__status__pred (a : __rep)) }
  
  val rec__house_exterior__houseexterior__status_ (a: __rep) : House_exterior__exteriorstatus.exteriorstatus
    requires { house_exterior__houseexterior__status__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_exterior__houseexterior__status)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((House_exterior__exteriorstatus__rep.to_rep
           ((__split_fields a).rec__house_exterior__houseexterior__status))
          = (House_exterior__exteriorstatus__rep.to_rep
               ((__split_fields b).rec__house_exterior__houseexterior__status))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module House_exterior__houseexterior
  use export House_exterior__houseexterior__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type houseexterior = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function house_exterior__houseexterior__status__first__bit : int
  
  val function house_exterior__houseexterior__status__last__bit : int
  
  val function house_exterior__houseexterior__status__position : int
  
  axiom house_exterior__houseexterior__status__first__bit_axiom:
    (house_exterior__houseexterior__status__first__bit >= (0 : int))
  
  axiom house_exterior__houseexterior__status__last__bit_axiom:
    (house_exterior__houseexterior__status__last__bit
       > house_exterior__houseexterior__status__first__bit)
  
  axiom house_exterior__houseexterior__status__position_axiom:
    (house_exterior__houseexterior__status__position >= (0 : int))
  
  val function user_eq (a: houseexterior) (b: houseexterior) : bool
  
  val function dummy : houseexterior
  
  type houseexterior__ref = {
                           mutable houseexterior__content : houseexterior
                           }
  
  function houseexterior__ref_houseexterior__content__projection (a: houseexterior__ref) : houseexterior =
    a.houseexterior__content
  
  meta "model_projection" function houseexterior__ref_houseexterior__content__projection
  
  meta "inline:no" function houseexterior__ref_houseexterior__content__projection
  
  val houseexterior__havoc (x: houseexterior__ref) : unit
    writes { x }
end

module House_exterior__createexteriors
  use _gnatprove_standard.Main
  use int.Int
  use House_exterior__houseexterior as House_exterior__houseexterior
  
  val function createexteriors (__void_param: unit) : House_exterior__houseexterior.houseexterior
  
  val predicate createexteriors__function_guard (temp___result_164: House_exterior__houseexterior.houseexterior) (__void_param: unit)
  
  scope Dispatch
    val function createexteriors (attr__tag: int) (__void_param: unit) : 
      House_exterior__houseexterior.houseexterior
    
    val predicate createexteriors__function_guard (temp___result_164: 
      House_exterior__houseexterior.houseexterior) (attr__tag: int) (__void_param: unit)
    end
end

module House_exterior__houseexterior___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_exterior__houseexterior as House_exterior__houseexterior
  
  predicate dynamic_invariant (temp___expr_230: House_exterior__houseexterior.houseexterior) (temp___is_init_226: bool) (temp___skip_constant_227: bool) (temp___do_toplevel_228: bool) (temp___do_typ_inv_229: bool) =
    true
  
  val dynamic_invariant (temp___expr_230: House_exterior__houseexterior.houseexterior) (temp___is_init_226: bool) (temp___skip_constant_227: bool) (temp___do_toplevel_228: bool) (temp___do_typ_inv_229: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_230 :
                          House_exterior__houseexterior.houseexterior))
                      (temp___is_init_226 : bool))
                     (temp___skip_constant_227 : bool))
                    (temp___do_toplevel_228 : bool))
                   (temp___do_typ_inv_229 : bool)) }
  
  predicate default_initial_assumption (temp___expr_231: House_exterior__houseexterior.houseexterior) (temp___skip_top_level_232: bool) =
    ((House_exterior__houseexterior.attr__tag temp___expr_231)
       = House_exterior__houseexterior.__tag)
  
  val default_initial_assumption (temp___expr_231: House_exterior__houseexterior.houseexterior) (temp___skip_top_level_232: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_231 :
                       House_exterior__houseexterior.houseexterior))
                   (temp___skip_top_level_232 : bool)) }
end

module House_exterior__createexteriors___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_exterior__houseexterior as House_exterior__houseexterior
  use House_exterior__createexteriors as House_exterior__createexteriors
  use House_exterior__houseexterior___axiom as House_exterior__houseexterior___axiom
  
  val createexteriors (__void_param: unit) : House_exterior__houseexterior.houseexterior
    requires { true }
    ensures { (((result
                   = (House_exterior__createexteriors.createexteriors ())) /\
                  ((House_exterior__createexteriors.createexteriors__function_guard
                      result)
                     ())) /\
                 (((((House_exterior__houseexterior___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  scope Dispatch
    val createexteriors (attr__tag: int) (__void_param: unit) : House_exterior__houseexterior.houseexterior
      requires { true }
      ensures { (((result
                     = ((House_exterior__createexteriors.Dispatch.createexteriors
                           attr__tag)
                          ())) /\
                    (((House_exterior__createexteriors.Dispatch.createexteriors__function_guard
                         result)
                        attr__tag)
                       ())) /\
                   (((((House_exterior__houseexterior___axiom.dynamic_invariant
                          result)
                         True)
                        False)
                       True)
                      True)) }
    end
  
  axiom createexteriors__post_axiom:
    forall __void_param : unit
          [House_exterior__createexteriors.createexteriors __void_param].
      let result =
        House_exterior__createexteriors.createexteriors __void_param in
      if ((House_exterior__createexteriors.createexteriors__function_guard
             result)
            __void_param) then
        ((true /\
            (((((House_exterior__houseexterior___axiom.dynamic_invariant
                   result)
                  True)
                 False)
                True)
               True)) /\
           ((House_exterior__houseexterior.attr__tag result)
              = House_exterior__houseexterior.__tag))
      else true
  
  axiom createexteriors__post__dispatch_axiom:
    forall attr__tag : int.
      forall __void_param : unit
            [(House_exterior__createexteriors.Dispatch.createexteriors
                attr__tag)
               __void_param].
        let result =
          (House_exterior__createexteriors.Dispatch.createexteriors attr__tag)
            __void_param in
        if (((House_exterior__createexteriors.Dispatch.createexteriors__function_guard
                result)
               attr__tag)
              __void_param) then
          ((true /\
              (((((House_exterior__houseexterior___axiom.dynamic_invariant
                     result)
                    True)
                   False)
                  True)
                 True)) /\
             ((House_exterior__houseexterior.attr__tag result) = attr__tag))
        else true
  
  axiom house_exterior__houseexterior__compat_axiom:
    forall __void_param : unit
          [(House_exterior__createexteriors.Dispatch.createexteriors
              House_exterior__houseexterior.__tag)
             __void_param].
      ((((House_exterior__createexteriors.Dispatch.createexteriors__function_guard
            ((House_exterior__createexteriors.Dispatch.createexteriors
                House_exterior__houseexterior.__tag)
               __void_param))
           House_exterior__houseexterior.__tag)
          __void_param) ->
         ((epsilon temp___result_281: House_exterior__houseexterior.houseexterior.
             ((temp___result_281
                 = (House_exterior__createexteriors.createexteriors
                      __void_param)) /\
                ((House_exterior__createexteriors.createexteriors__function_guard
                    temp___result_281)
                   __void_param)))
            = ((House_exterior__createexteriors.Dispatch.createexteriors
                  House_exterior__houseexterior.__tag)
                 __void_param)))
end

module Clean_air__carbon
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type carbon = <range 0 8>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (8 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = carbon,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type carbon__ref = { mutable carbon__content : carbon }
  
  function carbon__ref_carbon__content__projection (a: carbon__ref) : carbon =
    a.carbon__content
  
  meta "model_projection" function carbon__ref_carbon__content__projection
  
  meta "inline:no" function carbon__ref_carbon__content__projection
  
  val carbon__havoc (x: carbon__ref) : unit
    writes { x }
end

module Clean_air__carbon__rep
  use Clean_air__carbon as Clean_air__carbon
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Clean_air__carbon.carbon) : int =
    Clean_air__carbon.carbon'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Clean_air__carbon.carbon,
    predicate in_range = Clean_air__carbon.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Clean_air__aircon
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type aircon
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = aircon,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type aircon__ref = { mutable aircon__content : aircon }
  
  function aircon__ref_aircon__content__projection (a: aircon__ref) : aircon =
    a.aircon__content
  
  meta "model_projection" function aircon__ref_aircon__content__projection
  
  meta "inline:no" function aircon__ref_aircon__content__projection
  
  val aircon__havoc (x: aircon__ref) : unit
    writes { x }
end

module Clean_air__aircon__rep
  use Clean_air__aircon as Clean_air__aircon
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Clean_air__aircon.aircon,
    predicate in_range = Clean_air__aircon.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Clean_air__cleanair__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Clean_air__carbon as Clean_air__carbon
  use Clean_air__carbon__rep as Clean_air__carbon__rep
  use Clean_air__aircon as Clean_air__aircon
  use Clean_air__aircon__rep as Clean_air__aircon__rep
  
  type __split_fields = {
                       rec__clean_air__cleanair__carb :
                         Clean_air__carbon.carbon;
                       rec__clean_air__cleanair__status :
                         Clean_air__aircon.aircon;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__clean_air__cleanair__carb__projection (a: __split_fields) : 
    Clean_air__carbon.carbon =
    a.rec__clean_air__cleanair__carb
  
  meta "model_projection" function __split_fields_rec__clean_air__cleanair__carb__projection
  
  meta "inline:no" function __split_fields_rec__clean_air__cleanair__carb__projection
  
  function __split_fields_rec__clean_air__cleanair__status__projection (a: __split_fields) : 
    Clean_air__aircon.aircon =
    a.rec__clean_air__cleanair__status
  
  meta "model_projection" function __split_fields_rec__clean_air__cleanair__status__projection
  
  meta "inline:no" function __split_fields_rec__clean_air__cleanair__status__projection
  
  function __split_fields_rec__ext____3__projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____3__projection
  
  meta "inline:no" function __split_fields_rec__ext____3__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__3__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__3__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__3__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__3__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__3__projection
  
  meta "inline:no" function __rep___split_fields__3__projection
  
  function __rep_attr__tag__3__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__3__projection
  
  meta "inline:no" function __rep_attr__tag__3__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate clean_air__cleanair__carb__pred (a: __rep) = true
  
  val clean_air__cleanair__carb__pred (a: __rep) : bool
    ensures { result <-> (clean_air__cleanair__carb__pred (a : __rep)) }
  
  val rec__clean_air__cleanair__carb_ (a: __rep) : Clean_air__carbon.carbon
    requires { clean_air__cleanair__carb__pred a }
    ensures { (result = ((__split_fields a).rec__clean_air__cleanair__carb)) }
  
  predicate clean_air__cleanair__status__pred (a: __rep) = true
  
  val clean_air__cleanair__status__pred (a: __rep) : bool
    ensures { result <-> (clean_air__cleanair__status__pred (a : __rep)) }
  
  val rec__clean_air__cleanair__status_ (a: __rep) : Clean_air__aircon.aircon
    requires { clean_air__cleanair__status__pred a }
    ensures { (result
                 = ((__split_fields a).rec__clean_air__cleanair__status)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((Clean_air__carbon__rep.to_rep
            ((__split_fields a).rec__clean_air__cleanair__carb))
           = (Clean_air__carbon__rep.to_rep
                ((__split_fields b).rec__clean_air__cleanair__carb))) /\
          ((Clean_air__aircon__rep.to_rep
              ((__split_fields a).rec__clean_air__cleanair__status))
             = (Clean_air__aircon__rep.to_rep
                  ((__split_fields b).rec__clean_air__cleanair__status)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module Clean_air__cleanair
  use export Clean_air__cleanair__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type cleanair = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function clean_air__cleanair__carb__first__bit : int
  
  val function clean_air__cleanair__carb__last__bit : int
  
  val function clean_air__cleanair__carb__position : int
  
  axiom clean_air__cleanair__carb__first__bit_axiom:
    (clean_air__cleanair__carb__first__bit >= (0 : int))
  
  axiom clean_air__cleanair__carb__last__bit_axiom:
    (clean_air__cleanair__carb__last__bit
       > clean_air__cleanair__carb__first__bit)
  
  axiom clean_air__cleanair__carb__position_axiom:
    (clean_air__cleanair__carb__position >= (0 : int))
  
  val function clean_air__cleanair__status__first__bit : int
  
  val function clean_air__cleanair__status__last__bit : int
  
  val function clean_air__cleanair__status__position : int
  
  axiom clean_air__cleanair__status__first__bit_axiom:
    (clean_air__cleanair__status__first__bit >= (0 : int))
  
  axiom clean_air__cleanair__status__last__bit_axiom:
    (clean_air__cleanair__status__last__bit
       > clean_air__cleanair__status__first__bit)
  
  axiom clean_air__cleanair__status__position_axiom:
    (clean_air__cleanair__status__position >= (0 : int))
  
  val function user_eq (a: cleanair) (b: cleanair) : bool
  
  val function dummy : cleanair
  
  type cleanair__ref = { mutable cleanair__content : cleanair }
  
  function cleanair__ref_cleanair__content__projection (a: cleanair__ref) : cleanair =
    a.cleanair__content
  
  meta "model_projection" function cleanair__ref_cleanair__content__projection
  
  meta "inline:no" function cleanair__ref_cleanair__content__projection
  
  val cleanair__havoc (x: cleanair__ref) : unit
    writes { x }
end

module Clean_air__createaircon
  use _gnatprove_standard.Main
  use int.Int
  use Clean_air__cleanair as Clean_air__cleanair
  
  val function createaircon (__void_param: unit) : Clean_air__cleanair.cleanair
  
  val predicate createaircon__function_guard (temp___result_165: Clean_air__cleanair.cleanair) (__void_param: unit)
  
  scope Dispatch
    val function createaircon (attr__tag: int) (__void_param: unit) : 
      Clean_air__cleanair.cleanair
    
    val predicate createaircon__function_guard (temp___result_165: Clean_air__cleanair.cleanair) (attr__tag: int) (__void_param: unit)
    end
end

module Clean_air__cleanair___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Clean_air__cleanair as Clean_air__cleanair
  
  predicate dynamic_invariant (temp___expr_252: Clean_air__cleanair.cleanair) (temp___is_init_248: bool) (temp___skip_constant_249: bool) (temp___do_toplevel_250: bool) (temp___do_typ_inv_251: bool) =
    true
  
  val dynamic_invariant (temp___expr_252: Clean_air__cleanair.cleanair) (temp___is_init_248: bool) (temp___skip_constant_249: bool) (temp___do_toplevel_250: bool) (temp___do_typ_inv_251: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_252 : Clean_air__cleanair.cleanair))
                      (temp___is_init_248 : bool))
                     (temp___skip_constant_249 : bool))
                    (temp___do_toplevel_250 : bool))
                   (temp___do_typ_inv_251 : bool)) }
  
  predicate default_initial_assumption (temp___expr_253: Clean_air__cleanair.cleanair) (temp___skip_top_level_254: bool) =
    ((Clean_air__cleanair.attr__tag temp___expr_253)
       = Clean_air__cleanair.__tag)
  
  val default_initial_assumption (temp___expr_253: Clean_air__cleanair.cleanair) (temp___skip_top_level_254: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_253 : Clean_air__cleanair.cleanair))
                   (temp___skip_top_level_254 : bool)) }
end

module Clean_air__createaircon___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Clean_air__cleanair as Clean_air__cleanair
  use Clean_air__createaircon as Clean_air__createaircon
  use Clean_air__cleanair___axiom as Clean_air__cleanair___axiom
  
  val createaircon (__void_param: unit) : Clean_air__cleanair.cleanair
    requires { true }
    ensures { (((result = (Clean_air__createaircon.createaircon ())) /\
                  ((Clean_air__createaircon.createaircon__function_guard
                      result)
                     ())) /\
                 (((((Clean_air__cleanair___axiom.dynamic_invariant result)
                       True)
                      False)
                     True)
                    True)) }
  
  scope Dispatch
    val createaircon (attr__tag: int) (__void_param: unit) : Clean_air__cleanair.cleanair
      requires { true }
      ensures { (((result
                     = ((Clean_air__createaircon.Dispatch.createaircon
                           attr__tag)
                          ())) /\
                    (((Clean_air__createaircon.Dispatch.createaircon__function_guard
                         result)
                        attr__tag)
                       ())) /\
                   (((((Clean_air__cleanair___axiom.dynamic_invariant result)
                         True)
                        False)
                       True)
                      True)) }
    end
  
  axiom createaircon__post_axiom:
    forall __void_param : unit
          [Clean_air__createaircon.createaircon __void_param].
      let result = Clean_air__createaircon.createaircon __void_param in
      if ((Clean_air__createaircon.createaircon__function_guard result)
            __void_param) then
        ((true /\
            (((((Clean_air__cleanair___axiom.dynamic_invariant result) True)
                 False)
                True)
               True)) /\
           ((Clean_air__cleanair.attr__tag result)
              = Clean_air__cleanair.__tag))
      else true
  
  axiom createaircon__post__dispatch_axiom:
    forall attr__tag : int.
      forall __void_param : unit
            [(Clean_air__createaircon.Dispatch.createaircon attr__tag)
               __void_param].
        let result =
          (Clean_air__createaircon.Dispatch.createaircon attr__tag)
            __void_param in
        if (((Clean_air__createaircon.Dispatch.createaircon__function_guard
                result)
               attr__tag)
              __void_param) then
          ((true /\
              (((((Clean_air__cleanair___axiom.dynamic_invariant result) True)
                   False)
                  True)
                 True)) /\
             ((Clean_air__cleanair.attr__tag result) = attr__tag))
        else true
  
  axiom clean_air__cleanair__compat_axiom:
    forall __void_param : unit
          [(Clean_air__createaircon.Dispatch.createaircon
              Clean_air__cleanair.__tag)
             __void_param].
      ((((Clean_air__createaircon.Dispatch.createaircon__function_guard
            ((Clean_air__createaircon.Dispatch.createaircon
                Clean_air__cleanair.__tag)
               __void_param))
           Clean_air__cleanair.__tag)
          __void_param) ->
         ((epsilon temp___result_282: Clean_air__cleanair.cleanair.
             ((temp___result_282
                 = (Clean_air__createaircon.createaircon __void_param)) /\
                ((Clean_air__createaircon.createaircon__function_guard
                    temp___result_282)
                   __void_param)))
            = ((Clean_air__createaircon.Dispatch.createaircon
                  Clean_air__cleanair.__tag)
                 __void_param)))
end

module House_appliances__unlocked
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type unlocked
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = unlocked,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type unlocked__ref = { mutable unlocked__content : unlocked }
  
  function unlocked__ref_unlocked__content__projection (a: unlocked__ref) : unlocked =
    a.unlocked__content
  
  meta "model_projection" function unlocked__ref_unlocked__content__projection
  
  meta "inline:no" function unlocked__ref_unlocked__content__projection
  
  val unlocked__havoc (x: unlocked__ref) : unit
    writes { x }
end

module House_appliances__unlocked__rep
  use House_appliances__unlocked as House_appliances__unlocked
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_appliances__unlocked.unlocked,
    predicate in_range = House_appliances__unlocked.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_appliances__locked
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type locked
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (1 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = locked,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type locked__ref = { mutable locked__content : locked }
  
  function locked__ref_locked__content__projection (a: locked__ref) : locked =
    a.locked__content
  
  meta "model_projection" function locked__ref_locked__content__projection
  
  meta "inline:no" function locked__ref_locked__content__projection
  
  val locked__havoc (x: locked__ref) : unit
    writes { x }
end

module House_appliances__locked__rep
  use House_appliances__locked as House_appliances__locked
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = House_appliances__locked.locked,
    predicate in_range = House_appliances__locked.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module House_appliances__houseappliances__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use House_appliances__unlocked as House_appliances__unlocked
  use House_appliances__unlocked__rep as House_appliances__unlocked__rep
  use House_appliances__locked as House_appliances__locked
  use House_appliances__locked__rep as House_appliances__locked__rep
  
  type __split_fields = {
                       rec__house_appliances__houseappliances__statusunlocked :
                         House_appliances__unlocked.unlocked;
                       rec__house_appliances__houseappliances__statuslocked :
                         House_appliances__locked.locked;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__house_appliances__houseappliances__statusunlocked__projection (a: __split_fields) : 
    House_appliances__unlocked.unlocked =
    a.rec__house_appliances__houseappliances__statusunlocked
  
  meta "model_projection" function __split_fields_rec__house_appliances__houseappliances__statusunlocked__projection
  
  meta "inline:no" function __split_fields_rec__house_appliances__houseappliances__statusunlocked__projection
  
  function __split_fields_rec__house_appliances__houseappliances__statuslocked__projection (a: __split_fields) : 
    House_appliances__locked.locked =
    a.rec__house_appliances__houseappliances__statuslocked
  
  meta "model_projection" function __split_fields_rec__house_appliances__houseappliances__statuslocked__projection
  
  meta "inline:no" function __split_fields_rec__house_appliances__houseappliances__statuslocked__projection
  
  function __split_fields_rec__ext____4__projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____4__projection
  
  meta "inline:no" function __split_fields_rec__ext____4__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__4__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__4__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__4__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__4__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__4__projection
  
  meta "inline:no" function __rep___split_fields__4__projection
  
  function __rep_attr__tag__4__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__4__projection
  
  meta "inline:no" function __rep_attr__tag__4__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate house_appliances__houseappliances__statusunlocked__pred (a: __rep) =
    true
  
  val house_appliances__houseappliances__statusunlocked__pred (a: __rep) : 
    bool
    ensures { result
                <->
                (house_appliances__houseappliances__statusunlocked__pred
                   (a : __rep)) }
  
  val rec__house_appliances__houseappliances__statusunlocked_ (a: __rep) : 
    House_appliances__unlocked.unlocked
    requires { house_appliances__houseappliances__statusunlocked__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_appliances__houseappliances__statusunlocked)) }
  
  predicate house_appliances__houseappliances__statuslocked__pred (a: __rep) =
    true
  
  val house_appliances__houseappliances__statuslocked__pred (a: __rep) : 
    bool
    ensures { result
                <->
                (house_appliances__houseappliances__statuslocked__pred
                   (a : __rep)) }
  
  val rec__house_appliances__houseappliances__statuslocked_ (a: __rep) : 
    House_appliances__locked.locked
    requires { house_appliances__houseappliances__statuslocked__pred a }
    ensures { (result
                 = ((__split_fields a).rec__house_appliances__houseappliances__statuslocked)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if (((House_appliances__unlocked__rep.to_rep
            ((__split_fields a).rec__house_appliances__houseappliances__statusunlocked))
           = (House_appliances__unlocked__rep.to_rep
                ((__split_fields b).rec__house_appliances__houseappliances__statusunlocked))) /\
          ((House_appliances__locked__rep.to_rep
              ((__split_fields a).rec__house_appliances__houseappliances__statuslocked))
             = (House_appliances__locked__rep.to_rep
                  ((__split_fields b).rec__house_appliances__houseappliances__statuslocked)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module House_appliances__houseappliances
  use export House_appliances__houseappliances__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type houseappliances = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function house_appliances__houseappliances__statusunlocked__first__bit : 
    int
  
  val function house_appliances__houseappliances__statusunlocked__last__bit : 
    int
  
  val function house_appliances__houseappliances__statusunlocked__position : 
    int
  
  axiom house_appliances__houseappliances__statusunlocked__first__bit_axiom:
    (house_appliances__houseappliances__statusunlocked__first__bit
       >= (0 : int))
  
  axiom house_appliances__houseappliances__statusunlocked__last__bit_axiom:
    (house_appliances__houseappliances__statusunlocked__last__bit
       > house_appliances__houseappliances__statusunlocked__first__bit)
  
  axiom house_appliances__houseappliances__statusunlocked__position_axiom:
    (house_appliances__houseappliances__statusunlocked__position
       >= (0 : int))
  
  val function house_appliances__houseappliances__statuslocked__first__bit : 
    int
  
  val function house_appliances__houseappliances__statuslocked__last__bit : 
    int
  
  val function house_appliances__houseappliances__statuslocked__position : 
    int
  
  axiom house_appliances__houseappliances__statuslocked__first__bit_axiom:
    (house_appliances__houseappliances__statuslocked__first__bit
       >= (0 : int))
  
  axiom house_appliances__houseappliances__statuslocked__last__bit_axiom:
    (house_appliances__houseappliances__statuslocked__last__bit
       > house_appliances__houseappliances__statuslocked__first__bit)
  
  axiom house_appliances__houseappliances__statuslocked__position_axiom:
    (house_appliances__houseappliances__statuslocked__position >= (0 : int))
  
  val function user_eq (a: houseappliances) (b: houseappliances) : bool
  
  val function dummy : houseappliances
  
  type houseappliances__ref = {
                             mutable houseappliances__content :
                               houseappliances
                             }
  
  function houseappliances__ref_houseappliances__content__projection (a: houseappliances__ref) : houseappliances =
    a.houseappliances__content
  
  meta "model_projection" function houseappliances__ref_houseappliances__content__projection
  
  meta "inline:no" function houseappliances__ref_houseappliances__content__projection
  
  val houseappliances__havoc (x: houseappliances__ref) : unit
    writes { x }
end

module House_appliances__createfridge
  use _gnatprove_standard.Main
  use int.Int
  use House_appliances__houseappliances as House_appliances__houseappliances
  
  val function createfridge (__void_param: unit) : House_appliances__houseappliances.houseappliances
  
  val predicate createfridge__function_guard (temp___result_166: House_appliances__houseappliances.houseappliances) (__void_param: unit)
  
  scope Dispatch
    val function createfridge (attr__tag: int) (__void_param: unit) : 
      House_appliances__houseappliances.houseappliances
    
    val predicate createfridge__function_guard (temp___result_166: House_appliances__houseappliances.houseappliances) (attr__tag: int) (__void_param: unit)
    end
end

module House_appliances__houseappliances___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_appliances__houseappliances as House_appliances__houseappliances
  
  predicate dynamic_invariant (temp___expr_275: House_appliances__houseappliances.houseappliances) (temp___is_init_271: bool) (temp___skip_constant_272: bool) (temp___do_toplevel_273: bool) (temp___do_typ_inv_274: bool) =
    true
  
  val dynamic_invariant (temp___expr_275: House_appliances__houseappliances.houseappliances) (temp___is_init_271: bool) (temp___skip_constant_272: bool) (temp___do_toplevel_273: bool) (temp___do_typ_inv_274: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_275 :
                          House_appliances__houseappliances.houseappliances))
                      (temp___is_init_271 : bool))
                     (temp___skip_constant_272 : bool))
                    (temp___do_toplevel_273 : bool))
                   (temp___do_typ_inv_274 : bool)) }
  
  predicate default_initial_assumption (temp___expr_276: House_appliances__houseappliances.houseappliances) (temp___skip_top_level_277: bool) =
    ((House_appliances__houseappliances.attr__tag temp___expr_276)
       = House_appliances__houseappliances.__tag)
  
  val default_initial_assumption (temp___expr_276: House_appliances__houseappliances.houseappliances) (temp___skip_top_level_277: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_276 :
                       House_appliances__houseappliances.houseappliances))
                   (temp___skip_top_level_277 : bool)) }
end

module House_appliances__createfridge___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_appliances__houseappliances as House_appliances__houseappliances
  use House_appliances__createfridge as House_appliances__createfridge
  use House_appliances__houseappliances___axiom as House_appliances__houseappliances___axiom
  
  val createfridge (__void_param: unit) : House_appliances__houseappliances.houseappliances
    requires { true }
    ensures { (((result = (House_appliances__createfridge.createfridge ())) /\
                  ((House_appliances__createfridge.createfridge__function_guard
                      result)
                     ())) /\
                 (((((House_appliances__houseappliances___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  scope Dispatch
    val createfridge (attr__tag: int) (__void_param: unit) : House_appliances__houseappliances.houseappliances
      requires { true }
      ensures { (((result
                     = ((House_appliances__createfridge.Dispatch.createfridge
                           attr__tag)
                          ())) /\
                    (((House_appliances__createfridge.Dispatch.createfridge__function_guard
                         result)
                        attr__tag)
                       ())) /\
                   (((((House_appliances__houseappliances___axiom.dynamic_invariant
                          result)
                         True)
                        False)
                       True)
                      True)) }
    end
  
  axiom createfridge__post_axiom:
    forall __void_param : unit
          [House_appliances__createfridge.createfridge __void_param].
      let result = House_appliances__createfridge.createfridge __void_param in
      if ((House_appliances__createfridge.createfridge__function_guard result)
            __void_param) then
        ((true /\
            (((((House_appliances__houseappliances___axiom.dynamic_invariant
                   result)
                  True)
                 False)
                True)
               True)) /\
           ((House_appliances__houseappliances.attr__tag result)
              = House_appliances__houseappliances.__tag))
      else true
  
  axiom createfridge__post__dispatch_axiom:
    forall attr__tag : int.
      forall __void_param : unit
            [(House_appliances__createfridge.Dispatch.createfridge attr__tag)
               __void_param].
        let result =
          (House_appliances__createfridge.Dispatch.createfridge attr__tag)
            __void_param in
        if (((House_appliances__createfridge.Dispatch.createfridge__function_guard
                result)
               attr__tag)
              __void_param) then
          ((true /\
              (((((House_appliances__houseappliances___axiom.dynamic_invariant
                     result)
                    True)
                   False)
                  True)
                 True)) /\
             ((House_appliances__houseappliances.attr__tag result)
                = attr__tag))
        else true
  
  axiom house_appliances__houseappliances__compat_axiom:
    forall __void_param : unit
          [(House_appliances__createfridge.Dispatch.createfridge
              House_appliances__houseappliances.__tag)
             __void_param].
      ((((House_appliances__createfridge.Dispatch.createfridge__function_guard
            ((House_appliances__createfridge.Dispatch.createfridge
                House_appliances__houseappliances.__tag)
               __void_param))
           House_appliances__houseappliances.__tag)
          __void_param) ->
         ((epsilon temp___result_283: House_appliances__houseappliances.houseappliances.
             ((temp___result_283
                 = (House_appliances__createfridge.createfridge __void_param)) /\
                ((House_appliances__createfridge.createfridge__function_guard
                    temp___result_283)
                   __void_param)))
            = ((House_appliances__createfridge.Dispatch.createfridge
                  House_appliances__houseappliances.__tag)
                 __void_param)))
end

module House__house__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use House_heating__househeating as House_heating__househeating
  use House_exterior__houseexterior as House_exterior__houseexterior
  use Clean_air__cleanair as Clean_air__cleanair
  use House_appliances__houseappliances as House_appliances__houseappliances
  
  type __split_fields = {
                       rec__house__house__heating :
                         House_heating__househeating.househeating;
                       rec__house__house__exterior :
                         House_exterior__houseexterior.houseexterior;
                       rec__house__house__air : Clean_air__cleanair.cleanair;
                       rec__house__house__appliances :
                         House_appliances__houseappliances.houseappliances;
                       rec__ext__ : Main.__private
                       }
  
  function __split_fields_rec__house__house__heating__projection (a: __split_fields) : 
    House_heating__househeating.househeating =
    a.rec__house__house__heating
  
  meta "model_projection" function __split_fields_rec__house__house__heating__projection
  
  meta "inline:no" function __split_fields_rec__house__house__heating__projection
  
  function __split_fields_rec__house__house__exterior__projection (a: __split_fields) : 
    House_exterior__houseexterior.houseexterior =
    a.rec__house__house__exterior
  
  meta "model_projection" function __split_fields_rec__house__house__exterior__projection
  
  meta "inline:no" function __split_fields_rec__house__house__exterior__projection
  
  function __split_fields_rec__house__house__air__projection (a: __split_fields) : 
    Clean_air__cleanair.cleanair =
    a.rec__house__house__air
  
  meta "model_projection" function __split_fields_rec__house__house__air__projection
  
  meta "inline:no" function __split_fields_rec__house__house__air__projection
  
  function __split_fields_rec__house__house__appliances__projection (a: __split_fields) : 
    House_appliances__houseappliances.houseappliances =
    a.rec__house__house__appliances
  
  meta "model_projection" function __split_fields_rec__house__house__appliances__projection
  
  meta "inline:no" function __split_fields_rec__house__house__appliances__projection
  
  function __split_fields_rec__ext____5__projection (a: __split_fields) : 
    Main.__private =
    a.rec__ext__
  
  meta "model_projection" function __split_fields_rec__ext____5__projection
  
  meta "inline:no" function __split_fields_rec__ext____5__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__5__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__5__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__5__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields; attr__tag : int }
  
  function __rep___split_fields__5__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__5__projection
  
  meta "inline:no" function __rep___split_fields__5__projection
  
  function __rep_attr__tag__5__projection (a: __rep) : int = a.attr__tag
  
  meta "model_projection" function __rep_attr__tag__5__projection
  
  meta "inline:no" function __rep_attr__tag__5__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate house__house__heating__pred (a: __rep) = true
  
  val house__house__heating__pred (a: __rep) : bool
    ensures { result <-> (house__house__heating__pred (a : __rep)) }
  
  val rec__house__house__heating_ (a: __rep) : House_heating__househeating.househeating
    requires { house__house__heating__pred a }
    ensures { (result = ((__split_fields a).rec__house__house__heating)) }
  
  predicate house__house__exterior__pred (a: __rep) = true
  
  val house__house__exterior__pred (a: __rep) : bool
    ensures { result <-> (house__house__exterior__pred (a : __rep)) }
  
  val rec__house__house__exterior_ (a: __rep) : House_exterior__houseexterior.houseexterior
    requires { house__house__exterior__pred a }
    ensures { (result = ((__split_fields a).rec__house__house__exterior)) }
  
  predicate house__house__air__pred (a: __rep) = true
  
  val house__house__air__pred (a: __rep) : bool
    ensures { result <-> (house__house__air__pred (a : __rep)) }
  
  val rec__house__house__air_ (a: __rep) : Clean_air__cleanair.cleanair
    requires { house__house__air__pred a }
    ensures { (result = ((__split_fields a).rec__house__house__air)) }
  
  predicate house__house__appliances__pred (a: __rep) = true
  
  val house__house__appliances__pred (a: __rep) : bool
    ensures { result <-> (house__house__appliances__pred (a : __rep)) }
  
  val rec__house__house__appliances_ (a: __rep) : House_appliances__houseappliances.houseappliances
    requires { house__house__appliances__pred a }
    ensures { (result = ((__split_fields a).rec__house__house__appliances)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((((House_heating__househeating.bool_eq
             ((__split_fields a).rec__house__house__heating))
            ((__split_fields b).rec__house__house__heating)) /\
           ((House_exterior__houseexterior.bool_eq
               ((__split_fields a).rec__house__house__exterior))
              ((__split_fields b).rec__house__house__exterior))) /\
          (((Clean_air__cleanair.bool_eq
               ((__split_fields a).rec__house__house__air))
              ((__split_fields b).rec__house__house__air)) /\
             ((House_appliances__houseappliances.bool_eq
                 ((__split_fields a).rec__house__house__appliances))
                ((__split_fields b).rec__house__house__appliances)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
  
  val function __dispatch_eq (a: __rep) (b: __rep) : bool
end

module House__house
  use export House__house__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type house = __rep
  
  val function __tag : int
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function house__house__heating__first__bit : int
  
  val function house__house__heating__last__bit : int
  
  val function house__house__heating__position : int
  
  axiom house__house__heating__first__bit_axiom:
    (house__house__heating__first__bit >= (0 : int))
  
  axiom house__house__heating__last__bit_axiom:
    (house__house__heating__last__bit > house__house__heating__first__bit)
  
  axiom house__house__heating__position_axiom:
    (house__house__heating__position >= (0 : int))
  
  val function house__house__exterior__first__bit : int
  
  val function house__house__exterior__last__bit : int
  
  val function house__house__exterior__position : int
  
  axiom house__house__exterior__first__bit_axiom:
    (house__house__exterior__first__bit >= (0 : int))
  
  axiom house__house__exterior__last__bit_axiom:
    (house__house__exterior__last__bit > house__house__exterior__first__bit)
  
  axiom house__house__exterior__position_axiom:
    (house__house__exterior__position >= (0 : int))
  
  val function house__house__air__first__bit : int
  
  val function house__house__air__last__bit : int
  
  val function house__house__air__position : int
  
  axiom house__house__air__first__bit_axiom:
    (house__house__air__first__bit >= (0 : int))
  
  axiom house__house__air__last__bit_axiom:
    (house__house__air__last__bit > house__house__air__first__bit)
  
  axiom house__house__air__position_axiom:
    (house__house__air__position >= (0 : int))
  
  val function house__house__appliances__first__bit : int
  
  val function house__house__appliances__last__bit : int
  
  val function house__house__appliances__position : int
  
  axiom house__house__appliances__first__bit_axiom:
    (house__house__appliances__first__bit >= (0 : int))
  
  axiom house__house__appliances__last__bit_axiom:
    (house__house__appliances__last__bit
       > house__house__appliances__first__bit)
  
  axiom house__house__appliances__position_axiom:
    (house__house__appliances__position >= (0 : int))
  
  val function user_eq (a: house) (b: house) : bool
  
  val function dummy : house
  
  type house__ref = { mutable house__content : house }
  
  function house__ref_house__content__projection (a: house__ref) : house =
    a.house__content
  
  meta "model_projection" function house__ref_house__content__projection
  
  meta "inline:no" function house__ref_house__content__projection
  
  val house__havoc (x: house__ref) : unit
    writes { x }
end

module Main__system
  use _gnatprove_standard.Main
  use int.Int
  use House__house as House__house
  
  val system__split_fields : House__house.__split_fields__ref
  
  val function system__attr__tag : int
end

module House__house___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House_heating__househeating as House_heating__househeating
  use House_heating__createheating as House_heating__createheating
  use House_exterior__houseexterior as House_exterior__houseexterior
  use House_exterior__createexteriors as House_exterior__createexteriors
  use Clean_air__cleanair as Clean_air__cleanair
  use Clean_air__createaircon as Clean_air__createaircon
  use House_appliances__houseappliances as House_appliances__houseappliances
  use House_appliances__createfridge as House_appliances__createfridge
  use House__house as House__house
  
  predicate dynamic_invariant (temp___expr_288: House__house.house) (temp___is_init_284: bool) (temp___skip_constant_285: bool) (temp___do_toplevel_286: bool) (temp___do_typ_inv_287: bool) =
    true
  
  val dynamic_invariant (temp___expr_288: House__house.house) (temp___is_init_284: bool) (temp___skip_constant_285: bool) (temp___do_toplevel_286: bool) (temp___do_typ_inv_287: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_288 : House__house.house))
                      (temp___is_init_284 : bool))
                     (temp___skip_constant_285 : bool))
                    (temp___do_toplevel_286 : bool))
                   (temp___do_typ_inv_287 : bool)) }
  
  predicate default_initial_assumption (temp___expr_289: House__house.house) (temp___skip_top_level_290: bool) =
    (((House__house.attr__tag temp___expr_289) = House__house.__tag) /\
       (((if (House__house.house__house__heating__pred temp___expr_289) then
            (((House__house.__split_fields temp___expr_289).House__house.rec__house__house__heating)
               = { (epsilon temp___result_291: House_heating__househeating.househeating.
                      ((temp___result_291
                          = (House_heating__createheating.createheating ())) /\
                         ((House_heating__createheating.createheating__function_guard
                             temp___result_291)
                            ()))) with
                   House_heating__househeating.attr__tag =
                     House_heating__househeating.__tag })
          else true) /\
           (if (House__house.house__house__exterior__pred temp___expr_289) then
              (((House__house.__split_fields temp___expr_289).House__house.rec__house__house__exterior)
                 = { (epsilon temp___result_292: House_exterior__houseexterior.houseexterior.
                        ((temp___result_292
                            = (House_exterior__createexteriors.createexteriors
                                 ())) /\
                           ((House_exterior__createexteriors.createexteriors__function_guard
                               temp___result_292)
                              ()))) with
                     House_exterior__houseexterior.attr__tag =
                       House_exterior__houseexterior.__tag })
            else true)) /\
          ((if (House__house.house__house__air__pred temp___expr_289) then
              (((House__house.__split_fields temp___expr_289).House__house.rec__house__house__air)
                 = { (epsilon temp___result_293: Clean_air__cleanair.cleanair.
                        ((temp___result_293
                            = (Clean_air__createaircon.createaircon ())) /\
                           ((Clean_air__createaircon.createaircon__function_guard
                               temp___result_293)
                              ()))) with
                     Clean_air__cleanair.attr__tag =
                       Clean_air__cleanair.__tag })
            else true) /\
             (if (House__house.house__house__appliances__pred temp___expr_289) then
                (((House__house.__split_fields temp___expr_289).House__house.rec__house__house__appliances)
                   = { (epsilon temp___result_294: House_appliances__houseappliances.houseappliances.
                          ((temp___result_294
                              = (House_appliances__createfridge.createfridge
                                   ())) /\
                             ((House_appliances__createfridge.createfridge__function_guard
                                 temp___result_294)
                                ()))) with
                       House_appliances__houseappliances.attr__tag =
                         House_appliances__houseappliances.__tag })
              else true))))
  
  val default_initial_assumption (temp___expr_289: House__house.house) (temp___skip_top_level_290: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_289 : House__house.house))
                   (temp___skip_top_level_290 : bool)) }
end

module Ada___ada__text_io__current_err
  use _gnatprove_standard.Main
  use int.Int
  
  val current_err : Main.__private__ref
end

module Ada___ada__text_io__file_system
  use _gnatprove_standard.Main
  use int.Int
  
  val file_system : Main.__private__ref
end

module Ada___ada__text_io__standard_in
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_in : Main.__private__ref
end

module Ada___ada__text_io__standard_out
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_out : Main.__private__ref
end

module Ada___ada__text_io__standard_err
  use _gnatprove_standard.Main
  use int.Int
  
  val standard_err : Main.__private__ref
end

module Ada___ada__text_io__current_in
  use _gnatprove_standard.Main
  use int.Int
  
  val current_in : Main.__private__ref
end

module Ada___ada__text_io__current_out
  use _gnatprove_standard.Main
  use int.Int
  
  val current_out : Main.__private__ref
end

module Ada___ada__real_time__clock_time
  use _gnatprove_standard.Main
  use int.Int
  
  val clock_time : Main.__private__ref
end

module Main__print_status___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Main__system as Main__system
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__real_time__clock_time as Ada___ada__real_time__clock_time
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  
  val print_status (__void_param: unit) : unit
    reads { Ada___ada__text_io__current_err.current_err,
      Main__system.system__split_fields,
      Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__real_time__clock_time.clock_time,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out }
    requires { true }
    writes { Ada___ada__text_io__current_err.current_err, Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out }
    ensures { true }
end

module Ada___ada__text_io__line_length__2
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  
  val function line_length (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) : int
  
  val predicate line_length__function_guard (temp___result_161: int) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private)
end

module Ada___ada__text_io__page_length__2
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  
  val function page_length (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private) : int
  
  val predicate page_length__function_guard (temp___result_162: int) (Ada___ada__text_io__current_err___current_err___: 
    Main.__private) (Ada___ada__text_io__file_system___file_system___: 
    Main.__private) (Ada___ada__text_io__standard_in___standard_in___: 
    Main.__private) (Ada___ada__text_io__standard_out___standard_out___: 
    Main.__private) (Ada___ada__text_io__standard_err___standard_err___: 
    Main.__private) (Ada___ada__text_io__current_in___current_in___: 
    Main.__private) (Ada___ada__text_io__current_out___current_out___: 
    Main.__private)
end

module Ada___ada__text_io__put_line__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Standard__string as Standard__string
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  
  val put_line (item: Standard__string.string__) : unit
    reads { Ada___ada__text_io__current_err.current_err,
      Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out }
    requires { true }
    writes { Ada___ada__text_io__current_err.current_err, Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out }
    ensures { (([@GP_Pretty_Ada:3286]
                ((old (((((((Ada___ada__text_io__line_length__2.line_length
                               (Main.__private__content
                                   Ada___ada__text_io__current_err.current_err))
                              (Main.__private__content
                                  Ada___ada__text_io__file_system.file_system))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_in.standard_in))
                            (Main.__private__content
                                Ada___ada__text_io__standard_out.standard_out))
                           (Main.__private__content
                               Ada___ada__text_io__standard_err.standard_err))
                          (Main.__private__content
                              Ada___ada__text_io__current_in.current_in))
                         (Main.__private__content
                             Ada___ada__text_io__current_out.current_out)))
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__current_err.current_err))
                             (Main.__private__content
                                 Ada___ada__text_io__file_system.file_system))
                            (Main.__private__content
                                Ada___ada__text_io__standard_in.standard_in))
                           (Main.__private__content
                               Ada___ada__text_io__standard_out.standard_out))
                          (Main.__private__content
                              Ada___ada__text_io__standard_err.standard_err))
                         (Main.__private__content
                             Ada___ada__text_io__current_in.current_in))
                        (Main.__private__content
                            Ada___ada__text_io__current_out.current_out)))) /\
                 ([@GP_Pretty_Ada:3292]
                  ((old (((((((Ada___ada__text_io__page_length__2.page_length
                                 (Main.__private__content
                                     Ada___ada__text_io__current_err.current_err))
                                (Main.__private__content
                                    Ada___ada__text_io__file_system.file_system))
                               (Main.__private__content
                                   Ada___ada__text_io__standard_in.standard_in))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_out.standard_out))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_err.standard_err))
                            (Main.__private__content
                                Ada___ada__text_io__current_in.current_in))
                           (Main.__private__content
                               Ada___ada__text_io__current_out.current_out)))
                     = (((((((Ada___ada__text_io__page_length__2.page_length
                                (Main.__private__content
                                    Ada___ada__text_io__current_err.current_err))
                               (Main.__private__content
                                   Ada___ada__text_io__file_system.file_system))
                              (Main.__private__content
                                  Ada___ada__text_io__standard_in.standard_in))
                             (Main.__private__content
                                 Ada___ada__text_io__standard_out.standard_out))
                            (Main.__private__content
                                Ada___ada__text_io__standard_err.standard_err))
                           (Main.__private__content
                               Ada___ada__text_io__current_in.current_in))
                          (Main.__private__content
                              Ada___ada__text_io__current_out.current_out))))) }
end

module House__is_carbon_valid
  use _gnatprove_standard.Main
  use int.Int
  use House__house as House__house
  
  val function is_carbon_valid (this: House__house.house) : bool
  
  val predicate is_carbon_valid__function_guard (temp___result_167: bool) (this: 
    House__house.house)
  
  scope Dispatch
    val function is_carbon_valid (attr__tag: int) (this: House__house.house) : 
      bool
    
    val predicate is_carbon_valid__function_guard (temp___result_167: bool) (attr__tag: int) (this: 
      House__house.house)
    end
end

module House__is_carbon_valid___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Boolean as Boolean
  use House__house as House__house
  use House__house___axiom as House__house___axiom
  use House__is_carbon_valid as House__is_carbon_valid
  
  val is_carbon_valid (this: House__house.house) : bool
    requires { true }
    ensures { (((result = (House__is_carbon_valid.is_carbon_valid this)) /\
                  ((House__is_carbon_valid.is_carbon_valid__function_guard
                      result)
                     this)) /\
                 true) }
  
  scope Dispatch
    val is_carbon_valid (attr__tag: int) (this: House__house.house) : 
      bool
      requires { true }
      ensures { (((result
                     = ((House__is_carbon_valid.Dispatch.is_carbon_valid
                           attr__tag)
                          this)) /\
                    (((House__is_carbon_valid.Dispatch.is_carbon_valid__function_guard
                         result)
                        attr__tag)
                       this)) /\
                   true) }
    end
  
  axiom is_carbon_valid__post_axiom:
    forall this : House__house.house
          [House__is_carbon_valid.is_carbon_valid this].
      ((((((House__house___axiom.dynamic_invariant this) True) True) True)
          True) ->
         (let result = House__is_carbon_valid.is_carbon_valid this in
          if ((House__is_carbon_valid.is_carbon_valid__function_guard result)
                this) then
            ((true /\ true) /\ true)
          else true))
  
  axiom is_carbon_valid__post__dispatch_axiom:
    forall attr__tag : int.
      forall this : House__house.house
            [(House__is_carbon_valid.Dispatch.is_carbon_valid attr__tag) this].
        ((((((House__house___axiom.dynamic_invariant this) True) True) True)
            True) ->
           (let result =
              (House__is_carbon_valid.Dispatch.is_carbon_valid attr__tag)
                this in
            if (((House__is_carbon_valid.Dispatch.is_carbon_valid__function_guard
                    result)
                   attr__tag)
                  this) then
              ((true /\ true) /\ true)
            else true))
  
  axiom house__house__compat_axiom:
    forall this : House__house.house
          [(House__is_carbon_valid.Dispatch.is_carbon_valid
              House__house.__tag)
             this].
      ((((House__is_carbon_valid.Dispatch.is_carbon_valid__function_guard
            ((House__is_carbon_valid.Dispatch.is_carbon_valid
                House__house.__tag)
               this))
           House__house.__tag)
          this) ->
         ((Boolean.to_int
             (epsilon temp___result_297: bool.
                ((temp___result_297
                    = (House__is_carbon_valid.is_carbon_valid this)) /\
                   ((House__is_carbon_valid.is_carbon_valid__function_guard
                       temp___result_297)
                      this))))
            = (Boolean.to_int
                 ((House__is_carbon_valid.Dispatch.is_carbon_valid
                     House__house.__tag)
                    this))))
end

module House__ThouseC
  use export House__house
  use _gnatprove_standard.Main
  use int.Int
end

module House__update___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_heating__househeating as House_heating__househeating
  use House_exterior__houseexterior as House_exterior__houseexterior
  use Clean_air__cleanair as Clean_air__cleanair
  use House_appliances__houseappliances as House_appliances__houseappliances
  use House__house as House__house
  use House__house___axiom as House__house___axiom
  use House_heating__temperature as House_heating__temperature
  use House_heating__temperature__rep as House_heating__temperature__rep
  use House_heating__heatingstatus as House_heating__heatingstatus
  use House_heating__heatingstatus__rep as House_heating__heatingstatus__rep
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  use House_exterior__exteriorstatus__rep as House_exterior__exteriorstatus__rep
  use Clean_air__carbon as Clean_air__carbon
  use Clean_air__carbon__rep as Clean_air__carbon__rep
  use Clean_air__aircon as Clean_air__aircon
  use Clean_air__aircon__rep as Clean_air__aircon__rep
  use House_appliances__unlocked as House_appliances__unlocked
  use House_appliances__unlocked__rep as House_appliances__unlocked__rep
  use House_appliances__locked as House_appliances__locked
  use House_appliances__locked__rep as House_appliances__locked__rep
  use House__ThouseC as House__ThouseC
  
  val update (this__split_fields: House__house.__split_fields__ref) (this__attr__tag: int) : 
    unit
    requires { ((((((([@GP_Pretty_Ada:7128]
                      (let temp___303 =
                         House_heating__temperature__rep.to_rep
                           ((House_heating__househeating.__split_fields
                                ((House__house.__split_fields
                                     { House__house.__split_fields =
                                         (House__house.__split_fields__content
                                             this__split_fields) ;
                                       House__house.attr__tag =
                                         this__attr__tag }).House__house.rec__house__house__heating)).
                              House_heating__househeating.rec__house_heating__househeating__temp) in
                       (((17 : int) <= temp___303) /\
                          (temp___303 <= (19 : int))))) /\
                       ([@GP_Pretty_Ada:7137]
                        (let temp___304 =
                           House_heating__heatingstatus__rep.to_rep
                             ((House_heating__househeating.__split_fields
                                  ((House__house.__split_fields
                                       { House__house.__split_fields =
                                           (House__house.__split_fields__content
                                               this__split_fields) ;
                                         House__house.attr__tag =
                                           this__attr__tag }).House__house.rec__house__house__heating)).
                                House_heating__househeating.rec__house_heating__househeating__status) in
                         (((0 : int) <= temp___304) /\
                            (temp___304 <= (1 : int)))))) /\
                      ([@GP_Pretty_Ada:7146]
                       (let temp___305 =
                          House_exterior__exteriorstatus__rep.to_rep
                            ((House_exterior__houseexterior.__split_fields
                                 ((House__house.__split_fields
                                      { House__house.__split_fields =
                                          (House__house.__split_fields__content
                                              this__split_fields) ;
                                        House__house.attr__tag =
                                          this__attr__tag }).House__house.rec__house__house__exterior)).
                               House_exterior__houseexterior.rec__house_exterior__houseexterior__status) in
                        (((0 : int) <= temp___305) /\
                           (temp___305 <= (1 : int)))))) /\
                     ([@GP_Pretty_Ada:7155]
                      (let temp___306 =
                         House_appliances__unlocked__rep.to_rep
                           ((House_appliances__houseappliances.__split_fields
                                ((House__house.__split_fields
                                     { House__house.__split_fields =
                                         (House__house.__split_fields__content
                                             this__split_fields) ;
                                       House__house.attr__tag =
                                         this__attr__tag }).House__house.rec__house__house__appliances)).
                              House_appliances__houseappliances.rec__house_appliances__houseappliances__statusunlocked) in
                       (((0 : int) <= temp___306) /\
                          (temp___306 <= (1 : int)))))) /\
                    ([@GP_Pretty_Ada:7164]
                     (let temp___307 =
                        House_appliances__locked__rep.to_rep
                          ((House_appliances__houseappliances.__split_fields
                               ((House__house.__split_fields
                                    { House__house.__split_fields =
                                        (House__house.__split_fields__content
                                            this__split_fields) ;
                                      House__house.attr__tag =
                                        this__attr__tag }).House__house.rec__house__house__appliances)).
                             House_appliances__houseappliances.rec__house_appliances__houseappliances__statuslocked) in
                      (((0 : int) <= temp___307) /\
                         (temp___307 <= (1 : int)))))) /\
                   ([@GP_Pretty_Ada:7173]
                    (let temp___308 =
                       Clean_air__carbon__rep.to_rep
                         ((Clean_air__cleanair.__split_fields
                              ((House__house.__split_fields
                                   { House__house.__split_fields =
                                       (House__house.__split_fields__content
                                           this__split_fields) ;
                                     House__house.attr__tag = this__attr__tag }).
                                 House__house.rec__house__house__air)).
                            Clean_air__cleanair.rec__clean_air__cleanair__carb) in
                     (((0 : int) <= temp___308) /\ (temp___308 <= (8 : int)))))) /\
                  ([@GP_Pretty_Ada:7182]
                   (let temp___309 =
                      Clean_air__aircon__rep.to_rep
                        ((Clean_air__cleanair.__split_fields
                             ((House__house.__split_fields
                                  { House__house.__split_fields =
                                      (House__house.__split_fields__content
                                          this__split_fields) ;
                                    House__house.attr__tag = this__attr__tag }).
                                House__house.rec__house__house__air)).
                           Clean_air__cleanair.rec__clean_air__cleanair__status) in
                    (((0 : int) <= temp___309) /\ (temp___309 <= (1 : int))))))
    }
    writes { this__split_fields }
    ensures { ((([@GP_Pretty_Ada:7201]
                 ((((House_heating__heatingstatus__rep.to_rep
                       ((House_heating__househeating.__split_fields
                            ((House__house.__split_fields
                                 { House__house.__split_fields =
                                     (House__house.__split_fields__content
                                         this__split_fields) ;
                                   House__house.attr__tag = this__attr__tag }).
                               House__house.rec__house__house__heating)).
                          House_heating__househeating.rec__house_heating__househeating__status))
                      = (0 : int)) /\
                     ((House_exterior__exteriorstatus__rep.to_rep
                         ((House_exterior__houseexterior.__split_fields
                              ((House__house.__split_fields
                                   { House__house.__split_fields =
                                       (House__house.__split_fields__content
                                           this__split_fields) ;
                                     House__house.attr__tag = this__attr__tag }).
                                 House__house.rec__house__house__exterior)).
                            House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
                        = (1 : int))) \/
                    (((House_heating__heatingstatus__rep.to_rep
                         ((House_heating__househeating.__split_fields
                              ((House__house.__split_fields
                                   { House__house.__split_fields =
                                       (House__house.__split_fields__content
                                           this__split_fields) ;
                                     House__house.attr__tag = this__attr__tag }).
                                 House__house.rec__house__house__heating)).
                            House_heating__househeating.rec__house_heating__househeating__status))
                        = (1 : int)) /\
                       ((House_exterior__exteriorstatus__rep.to_rep
                           ((House_exterior__houseexterior.__split_fields
                                ((House__house.__split_fields
                                     { House__house.__split_fields =
                                         (House__house.__split_fields__content
                                             this__split_fields) ;
                                       House__house.attr__tag =
                                         this__attr__tag }).House__house.rec__house__house__exterior)).
                              House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
                          = (0 : int))))) /\
                  ([@GP_Pretty_Ada:7224]
                   (let temp___317 =
                      Clean_air__carbon__rep.to_rep
                        ((Clean_air__cleanair.__split_fields
                             ((House__house.__split_fields
                                  { House__house.__split_fields =
                                      (House__house.__split_fields__content
                                          this__split_fields) ;
                                    House__house.attr__tag = this__attr__tag }).
                                House__house.rec__house__house__air)).
                           Clean_air__cleanair.rec__clean_air__cleanair__carb) in
                    (((0 : int) <= temp___317) /\ (temp___317 <= (8 : int)))))) /\
                 (((((House__house___axiom.dynamic_invariant
                        { House__house.__split_fields =
                            (House__house.__split_fields__content
                                this__split_fields) ;
                          House__house.attr__tag = this__attr__tag })
                       True)
                      True)
                     True)
                    True)) }
  
  scope Dispatch
    val predicate update__specific_post (attr__tag: int) (this__split_fields: 
      House__house.__split_fields) (this__attr__tag: int) (this__split_fields___old: 
      House__house.__split_fields)
    
    val update (this__split_fields: House__house.__split_fields__ref) (this__attr__tag: int) : 
      unit
      requires { ((((((([@GP_Pretty_Ada:25035]
                        (let temp___310 =
                           House_heating__temperature__rep.to_rep
                             ((House_heating__househeating.__split_fields
                                  ((House__ThouseC.__split_fields
                                       { House__house.__split_fields =
                                           (House__house.__split_fields__content
                                               this__split_fields) ;
                                         House__house.attr__tag =
                                           this__attr__tag }).House__ThouseC.rec__house__house__heating)).
                                House_heating__househeating.rec__house_heating__househeating__temp) in
                         (((17 : int) <= temp___310) /\
                            (temp___310 <= (19 : int))))) /\
                         ([@GP_Pretty_Ada:25044]
                          (let temp___311 =
                             House_heating__heatingstatus__rep.to_rep
                               ((House_heating__househeating.__split_fields
                                    ((House__ThouseC.__split_fields
                                         { House__house.__split_fields =
                                             (House__house.__split_fields__content
                                                 this__split_fields) ;
                                           House__house.attr__tag =
                                             this__attr__tag }).House__ThouseC.rec__house__house__heating)).
                                  House_heating__househeating.rec__house_heating__househeating__status) in
                           (((0 : int) <= temp___311) /\
                              (temp___311 <= (1 : int)))))) /\
                        ([@GP_Pretty_Ada:25053]
                         (let temp___312 =
                            House_exterior__exteriorstatus__rep.to_rep
                              ((House_exterior__houseexterior.__split_fields
                                   ((House__ThouseC.__split_fields
                                        { House__house.__split_fields =
                                            (House__house.__split_fields__content
                                                this__split_fields) ;
                                          House__house.attr__tag =
                                            this__attr__tag }).House__ThouseC.rec__house__house__exterior)).
                                 House_exterior__houseexterior.rec__house_exterior__houseexterior__status) in
                          (((0 : int) <= temp___312) /\
                             (temp___312 <= (1 : int)))))) /\
                       ([@GP_Pretty_Ada:25062]
                        (let temp___313 =
                           House_appliances__unlocked__rep.to_rep
                             ((House_appliances__houseappliances.__split_fields
                                  ((House__ThouseC.__split_fields
                                       { House__house.__split_fields =
                                           (House__house.__split_fields__content
                                               this__split_fields) ;
                                         House__house.attr__tag =
                                           this__attr__tag }).House__ThouseC.rec__house__house__appliances)).
                                House_appliances__houseappliances.rec__house_appliances__houseappliances__statusunlocked) in
                         (((0 : int) <= temp___313) /\
                            (temp___313 <= (1 : int)))))) /\
                      ([@GP_Pretty_Ada:25071]
                       (let temp___314 =
                          House_appliances__locked__rep.to_rep
                            ((House_appliances__houseappliances.__split_fields
                                 ((House__ThouseC.__split_fields
                                      { House__house.__split_fields =
                                          (House__house.__split_fields__content
                                              this__split_fields) ;
                                        House__house.attr__tag =
                                          this__attr__tag }).House__ThouseC.rec__house__house__appliances)).
                               House_appliances__houseappliances.rec__house_appliances__houseappliances__statuslocked) in
                        (((0 : int) <= temp___314) /\
                           (temp___314 <= (1 : int)))))) /\
                     ([@GP_Pretty_Ada:25080]
                      (let temp___315 =
                         Clean_air__carbon__rep.to_rep
                           ((Clean_air__cleanair.__split_fields
                                ((House__ThouseC.__split_fields
                                     { House__house.__split_fields =
                                         (House__house.__split_fields__content
                                             this__split_fields) ;
                                       House__house.attr__tag =
                                         this__attr__tag }).House__ThouseC.rec__house__house__air)).
                              Clean_air__cleanair.rec__clean_air__cleanair__carb) in
                       (((0 : int) <= temp___315) /\
                          (temp___315 <= (8 : int)))))) /\
                    ([@GP_Pretty_Ada:25089]
                     (let temp___316 =
                        Clean_air__aircon__rep.to_rep
                          ((Clean_air__cleanair.__split_fields
                               ((House__ThouseC.__split_fields
                                    { House__house.__split_fields =
                                        (House__house.__split_fields__content
                                            this__split_fields) ;
                                      House__house.attr__tag =
                                        this__attr__tag }).House__ThouseC.rec__house__house__air)).
                             Clean_air__cleanair.rec__clean_air__cleanair__status) in
                      (((0 : int) <= temp___316) /\
                         (temp___316 <= (1 : int))))))
      }
      writes { this__split_fields }
      ensures { ((true /\
                    (((((House__house___axiom.dynamic_invariant
                           { House__house.__split_fields =
                               (House__house.__split_fields__content
                                   this__split_fields) ;
                             House__house.attr__tag = this__attr__tag })
                          True)
                         True)
                        True)
                       True)) /\
                   ((((update__specific_post this__attr__tag)
                        (House__house.__split_fields__content
                            this__split_fields))
                       this__attr__tag)
                      (old (House__house.__split_fields__content
                               this__split_fields)))) }
    end
  
  axiom house__house__compat_axiom:
    forall this__split_fields : House__house.__split_fields, this__split_fields___old : 
          House__house.__split_fields.
      forall this__attr__tag : int
            [(((Dispatch.update__specific_post House__house.__tag)
                 this__split_fields)
                this__attr__tag)
               this__split_fields___old].
        (((((Dispatch.update__specific_post House__house.__tag)
              this__split_fields)
             this__attr__tag)
            this__split_fields___old) ->
           (let temp___this_318 =
              { House__house.__split_fields = this__split_fields___old ;
                House__house.attr__tag = this__attr__tag } in
            let temp___this_318 =
              { House__house.__split_fields = this__split_fields ;
                House__house.attr__tag = this__attr__tag } in
            (([@GP_Pretty_Ada:7201]
              ((((House_heating__heatingstatus__rep.to_rep
                    ((House_heating__househeating.__split_fields
                         ((House__house.__split_fields
                              { House__house.__split_fields =
                                  this__split_fields ;
                                House__house.attr__tag = this__attr__tag }).
                            House__house.rec__house__house__heating)).
                       House_heating__househeating.rec__house_heating__househeating__status))
                   = (0 : int)) /\
                  ((House_exterior__exteriorstatus__rep.to_rep
                      ((House_exterior__houseexterior.__split_fields
                           ((House__house.__split_fields
                                { House__house.__split_fields =
                                    this__split_fields ;
                                  House__house.attr__tag = this__attr__tag }).
                              House__house.rec__house__house__exterior)).
                         House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
                     = (1 : int))) \/
                 (((House_heating__heatingstatus__rep.to_rep
                      ((House_heating__househeating.__split_fields
                           ((House__house.__split_fields
                                { House__house.__split_fields =
                                    this__split_fields ;
                                  House__house.attr__tag = this__attr__tag }).
                              House__house.rec__house__house__heating)).
                         House_heating__househeating.rec__house_heating__househeating__status))
                     = (1 : int)) /\
                    ((House_exterior__exteriorstatus__rep.to_rep
                        ((House_exterior__houseexterior.__split_fields
                             ((House__house.__split_fields
                                  { House__house.__split_fields =
                                      this__split_fields ;
                                    House__house.attr__tag = this__attr__tag }).
                                House__house.rec__house__house__exterior)).
                           House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
                       = (0 : int))))) /\
               ([@GP_Pretty_Ada:7224]
                (let temp___319 =
                   Clean_air__carbon__rep.to_rep
                     ((Clean_air__cleanair.__split_fields
                          ((House__house.__split_fields
                               { House__house.__split_fields =
                                   this__split_fields ;
                                 House__house.attr__tag = this__attr__tag }).
                             House__house.rec__house__house__air)).Clean_air__cleanair.rec__clean_air__cleanair__carb) in
                 (((0 : int) <= temp___319) /\ (temp___319 <= (8 : int))))))))
end

module Main__L_1
  use _gnatprove_standard.Main
  use int.Int
  
  exception L_1
end

module Temp___String_Literal_362
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  use Standard__character__rep as Standard__character__rep
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  
  val function temp___String_Literal_362 (__void_param: unit) : Array__Int__Standard__character.map
  
  axiom temp___String_Literal_362__def_axiom:
    forall __void_param : unit [temp___String_Literal_362 __void_param].
      ((((Standard__character__rep.to_rep
            ((Array__Int__Standard__character.get
                (temp___String_Literal_362 __void_param))
               (1 : int)))
           = (67 : int)) /\
          ((Standard__character__rep.to_rep
              ((Array__Int__Standard__character.get
                  (temp___String_Literal_362 __void_param))
                 (2 : int)))
             = (97 : int))) /\
         ((((((((Standard__character__rep.to_rep
                   ((Array__Int__Standard__character.get
                       (temp___String_Literal_362 __void_param))
                      (3 : int)))
                  = (114 : int)) /\
                 ((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_362 __void_param))
                        (4 : int)))
                    = (98 : int))) /\
                ((Standard__character__rep.to_rep
                    ((Array__Int__Standard__character.get
                        (temp___String_Literal_362 __void_param))
                       (5 : int)))
                   = (111 : int))) /\
               ((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_362 __void_param))
                        (6 : int)))
                    = (110 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_362 __void_param))
                          (7 : int)))
                      = (32 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_362 __void_param))
                         (8 : int)))
                     = (108 : int)))) /\
              (((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_362 __void_param))
                        (9 : int)))
                    = (101 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_362 __void_param))
                          (10 : int)))
                      = (118 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_362 __void_param))
                         (11 : int)))
                     = (101 : int))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_362 __void_param))
                          (12 : int)))
                      = (108 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_362 __void_param))
                            (13 : int)))
                        = (32 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_362 __void_param))
                           (14 : int)))
                       = (111 : int))))) /\
             ((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_362 __void_param))
                        (15 : int)))
                    = (117 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_362 __void_param))
                          (16 : int)))
                      = (116 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_362 __void_param))
                         (17 : int)))
                     = (115 : int))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_362 __void_param))
                          (18 : int)))
                      = (105 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_362 __void_param))
                            (19 : int)))
                        = (100 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_362 __void_param))
                           (20 : int)))
                       = (101 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_362 __void_param))
                          (21 : int)))
                      = (32 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_362 __void_param))
                            (22 : int)))
                        = (118 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_362 __void_param))
                           (23 : int)))
                       = (97 : int))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_362 __void_param))
                            (24 : int)))
                        = (108 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_362 __void_param))
                              (25 : int)))
                          = (105 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_362 __void_param))
                             (26 : int)))
                         = (100 : int)))))) /\
            (((((((Standard__character__rep.to_rep
                     ((Array__Int__Standard__character.get
                         (temp___String_Literal_362 __void_param))
                        (27 : int)))
                    = (32 : int)) /\
                   ((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_362 __void_param))
                          (28 : int)))
                      = (114 : int))) /\
                  ((Standard__character__rep.to_rep
                      ((Array__Int__Standard__character.get
                          (temp___String_Literal_362 __void_param))
                         (29 : int)))
                     = (97 : int))) /\
                 ((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_362 __void_param))
                          (30 : int)))
                      = (110 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_362 __void_param))
                            (31 : int)))
                        = (103 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_362 __void_param))
                           (32 : int)))
                       = (101 : int)))) /\
                (((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_362 __void_param))
                          (33 : int)))
                      = (46 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_362 __void_param))
                            (34 : int)))
                        = (32 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_362 __void_param))
                           (35 : int)))
                       = (85 : int))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_362 __void_param))
                            (36 : int)))
                        = (112 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_362 __void_param))
                              (37 : int)))
                          = (100 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_362 __void_param))
                             (38 : int)))
                         = (97 : int))))) /\
               ((((((Standard__character__rep.to_rep
                       ((Array__Int__Standard__character.get
                           (temp___String_Literal_362 __void_param))
                          (39 : int)))
                      = (116 : int)) /\
                     ((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_362 __void_param))
                            (40 : int)))
                        = (101 : int))) /\
                    ((Standard__character__rep.to_rep
                        ((Array__Int__Standard__character.get
                            (temp___String_Literal_362 __void_param))
                           (41 : int)))
                       = (32 : int))) /\
                   ((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_362 __void_param))
                            (42 : int)))
                        = (115 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_362 __void_param))
                              (43 : int)))
                          = (107 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_362 __void_param))
                             (44 : int)))
                         = (105 : int)))) /\
                  (((((Standard__character__rep.to_rep
                         ((Array__Int__Standard__character.get
                             (temp___String_Literal_362 __void_param))
                            (45 : int)))
                        = (112 : int)) /\
                       ((Standard__character__rep.to_rep
                           ((Array__Int__Standard__character.get
                               (temp___String_Literal_362 __void_param))
                              (46 : int)))
                          = (112 : int))) /\
                      ((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_362 __void_param))
                             (47 : int)))
                         = (101 : int))) /\
                     (((Standard__character__rep.to_rep
                          ((Array__Int__Standard__character.get
                              (temp___String_Literal_362 __void_param))
                             (48 : int)))
                         = (100 : int)) /\
                        ((Standard__character__rep.to_rep
                            ((Array__Int__Standard__character.get
                                (temp___String_Literal_362 __void_param))
                               (49 : int)))
                           = (46 : int))))))))
end

module Standard__positive___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__positive as Standard__positive
  
  predicate dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) =
    if ((temp___is_init_49 = True) \/
          (Standard__positive.first <= Standard__positive.last)) then
      (((Standard__positive.dynamic_property Standard__positive.first)
          Standard__positive.last)
         temp___expr_53)
    else true
  
  val dynamic_invariant (temp___expr_53: int) (temp___is_init_49: bool) (temp___skip_constant_50: bool) (temp___do_toplevel_51: bool) (temp___do_typ_inv_52: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_53 : int))
                      (temp___is_init_49 : bool))
                     (temp___skip_constant_50 : bool))
                    (temp___do_toplevel_51 : bool))
                   (temp___do_typ_inv_52 : bool)) }
  
  predicate default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) =
    true
  
  val default_initial_assumption (temp___expr_54: int) (temp___skip_top_level_55: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_54 : int))
                   (temp___skip_top_level_55 : bool)) }
end

module Standard__character___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__character as Standard__character
  
  predicate dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) =
    if ((temp___is_init_77 = True) \/
          (Standard__character.first <= Standard__character.last)) then
      (((Standard__character.dynamic_property Standard__character.first)
          Standard__character.last)
         temp___expr_81)
    else true
  
  val dynamic_invariant (temp___expr_81: int) (temp___is_init_77: bool) (temp___skip_constant_78: bool) (temp___do_toplevel_79: bool) (temp___do_typ_inv_80: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_81 : int))
                      (temp___is_init_77 : bool))
                     (temp___skip_constant_78 : bool))
                    (temp___do_toplevel_79 : bool))
                   (temp___do_typ_inv_80 : bool)) }
  
  predicate default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) =
    true
  
  val default_initial_assumption (temp___expr_82: int) (temp___skip_top_level_83: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_82 : int))
                   (temp___skip_top_level_83 : bool)) }
end

module Standard__string___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Standard__positive as Standard__positive
  use Standard__string as Standard__string
  
  predicate dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) =
    if temp___skip_constant_100 then true
    else
      ((((Standard__string.dynamic_property Standard__positive.first)
           Standard__positive.last)
          (Standard__string.first temp___expr_103))
         (Standard__string.last temp___expr_103))
  
  val dynamic_invariant (temp___expr_103: Standard__string.string__) (temp___is_init_99: bool) (temp___skip_constant_100: bool) (temp___do_toplevel_101: bool) (temp___do_typ_inv_102: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_103 : Standard__string.string__))
                      (temp___is_init_99 : bool))
                     (temp___skip_constant_100 : bool))
                    (temp___do_toplevel_101 : bool))
                   (temp___do_typ_inv_102 : bool)) }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Main__system___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Main__L_1___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Ada___ada__text_io__count
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type count = <range 0 2147483647>
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = count,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type count__ref = { mutable count__content : count }
  
  function count__ref_count__content__projection (a: count__ref) : count =
    a.count__content
  
  meta "model_projection" function count__ref_count__content__projection
  
  meta "inline:no" function count__ref_count__content__projection
  
  val count__havoc (x: count__ref) : unit
    writes { x }
end

module Ada___ada__text_io__count___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Ada___ada__text_io__count as Ada___ada__text_io__count
  
  predicate dynamic_invariant (temp___expr_172: int) (temp___is_init_168: bool) (temp___skip_constant_169: bool) (temp___do_toplevel_170: bool) (temp___do_typ_inv_171: bool) =
    if ((temp___is_init_168 = True) \/
          (Ada___ada__text_io__count.first <= Ada___ada__text_io__count.last)) then
      (((Ada___ada__text_io__count.dynamic_property
           Ada___ada__text_io__count.first)
          Ada___ada__text_io__count.last)
         temp___expr_172)
    else true
  
  val dynamic_invariant (temp___expr_172: int) (temp___is_init_168: bool) (temp___skip_constant_169: bool) (temp___do_toplevel_170: bool) (temp___do_typ_inv_171: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_172 : int))
                      (temp___is_init_168 : bool))
                     (temp___skip_constant_169 : bool))
                    (temp___do_toplevel_170 : bool))
                   (temp___do_typ_inv_171 : bool)) }
  
  predicate default_initial_assumption (temp___expr_173: int) (temp___skip_top_level_174: bool) =
    true
  
  val default_initial_assumption (temp___expr_173: int) (temp___skip_top_level_174: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_173 : int))
                   (temp___skip_top_level_174 : bool)) }
end

module Ada___ada__text_io__line_length__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  
  val line_length (__void_param: unit) : int
    reads { Ada___ada__text_io__current_err.current_err,
      Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out }
    requires { true }
    writes {  }
    ensures { (((result
                   = (((((((Ada___ada__text_io__line_length__2.line_length
                              (Main.__private__content
                                  Ada___ada__text_io__current_err.current_err))
                             (Main.__private__content
                                 Ada___ada__text_io__file_system.file_system))
                            (Main.__private__content
                                Ada___ada__text_io__standard_in.standard_in))
                           (Main.__private__content
                               Ada___ada__text_io__standard_out.standard_out))
                          (Main.__private__content
                              Ada___ada__text_io__standard_err.standard_err))
                         (Main.__private__content
                             Ada___ada__text_io__current_in.current_in))
                        (Main.__private__content
                            Ada___ada__text_io__current_out.current_out))) /\
                  true) /\
                 (((((Ada___ada__text_io__count___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  axiom line_length__post_axiom:
    forall Ada___ada__text_io__current_err___current_err___ : Main.__private, Ada___ada__text_io__file_system___file_system___ : 
          Main.__private, Ada___ada__text_io__standard_in___standard_in___ : 
          Main.__private, Ada___ada__text_io__standard_out___standard_out___ : 
          Main.__private, Ada___ada__text_io__standard_err___standard_err___ : 
          Main.__private, Ada___ada__text_io__current_in___current_in___ : 
          Main.__private, Ada___ada__text_io__current_out___current_out___ : 
          Main.__private
          [((((((Ada___ada__text_io__line_length__2.line_length
                   Ada___ada__text_io__current_err___current_err___)
                  Ada___ada__text_io__file_system___file_system___)
                 Ada___ada__text_io__standard_in___standard_in___)
                Ada___ada__text_io__standard_out___standard_out___)
               Ada___ada__text_io__standard_err___standard_err___)
              Ada___ada__text_io__current_in___current_in___)
             Ada___ada__text_io__current_out___current_out___].
      let result =
        ((((((Ada___ada__text_io__line_length__2.line_length
                Ada___ada__text_io__current_err___current_err___)
               Ada___ada__text_io__file_system___file_system___)
              Ada___ada__text_io__standard_in___standard_in___)
             Ada___ada__text_io__standard_out___standard_out___)
            Ada___ada__text_io__standard_err___standard_err___)
           Ada___ada__text_io__current_in___current_in___)
          Ada___ada__text_io__current_out___current_out___ in
      ((true /\
          (((((Ada___ada__text_io__count___axiom.dynamic_invariant result)
                True)
               False)
              True)
             True)) /\
         true)
end

module Ada___ada__text_io__page_length__2___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Main as Main
  use Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  use Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
  use Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
  use Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
  use Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
  use Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
  use Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
  use Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
  
  val page_length (__void_param: unit) : int
    reads { Ada___ada__text_io__current_err.current_err,
      Ada___ada__text_io__file_system.file_system,
      Ada___ada__text_io__standard_in.standard_in,
      Ada___ada__text_io__standard_out.standard_out,
      Ada___ada__text_io__standard_err.standard_err,
      Ada___ada__text_io__current_in.current_in,
      Ada___ada__text_io__current_out.current_out }
    requires { true }
    writes {  }
    ensures { (((result
                   = (((((((Ada___ada__text_io__page_length__2.page_length
                              (Main.__private__content
                                  Ada___ada__text_io__current_err.current_err))
                             (Main.__private__content
                                 Ada___ada__text_io__file_system.file_system))
                            (Main.__private__content
                                Ada___ada__text_io__standard_in.standard_in))
                           (Main.__private__content
                               Ada___ada__text_io__standard_out.standard_out))
                          (Main.__private__content
                              Ada___ada__text_io__standard_err.standard_err))
                         (Main.__private__content
                             Ada___ada__text_io__current_in.current_in))
                        (Main.__private__content
                            Ada___ada__text_io__current_out.current_out))) /\
                  true) /\
                 (((((Ada___ada__text_io__count___axiom.dynamic_invariant
                        result)
                       True)
                      False)
                     True)
                    True)) }
  
  axiom page_length__post_axiom:
    forall Ada___ada__text_io__current_err___current_err___ : Main.__private, Ada___ada__text_io__file_system___file_system___ : 
          Main.__private, Ada___ada__text_io__standard_in___standard_in___ : 
          Main.__private, Ada___ada__text_io__standard_out___standard_out___ : 
          Main.__private, Ada___ada__text_io__standard_err___standard_err___ : 
          Main.__private, Ada___ada__text_io__current_in___current_in___ : 
          Main.__private, Ada___ada__text_io__current_out___current_out___ : 
          Main.__private
          [((((((Ada___ada__text_io__page_length__2.page_length
                   Ada___ada__text_io__current_err___current_err___)
                  Ada___ada__text_io__file_system___file_system___)
                 Ada___ada__text_io__standard_in___standard_in___)
                Ada___ada__text_io__standard_out___standard_out___)
               Ada___ada__text_io__standard_err___standard_err___)
              Ada___ada__text_io__current_in___current_in___)
             Ada___ada__text_io__current_out___current_out___].
      let result =
        ((((((Ada___ada__text_io__page_length__2.page_length
                Ada___ada__text_io__current_err___current_err___)
               Ada___ada__text_io__file_system___file_system___)
              Ada___ada__text_io__standard_in___standard_in___)
             Ada___ada__text_io__standard_out___standard_out___)
            Ada___ada__text_io__standard_err___standard_err___)
           Ada___ada__text_io__current_in___current_in___)
          Ada___ada__text_io__current_out___current_out___ in
      ((true /\
          (((((Ada___ada__text_io__count___axiom.dynamic_invariant result)
                True)
               False)
              True)
             True)) /\
         true)
end

module House_heating__heatingstatus___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_heating__heatingstatus as House_heating__heatingstatus
  
  predicate dynamic_invariant (temp___expr_207: int) (temp___is_init_203: bool) (temp___skip_constant_204: bool) (temp___do_toplevel_205: bool) (temp___do_typ_inv_206: bool) =
    if ((temp___is_init_203 = True) \/
          (House_heating__heatingstatus.first
             <= House_heating__heatingstatus.last)) then
      (((House_heating__heatingstatus.dynamic_property
           House_heating__heatingstatus.first)
          House_heating__heatingstatus.last)
         temp___expr_207)
    else true
  
  val dynamic_invariant (temp___expr_207: int) (temp___is_init_203: bool) (temp___skip_constant_204: bool) (temp___do_toplevel_205: bool) (temp___do_typ_inv_206: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_207 : int))
                      (temp___is_init_203 : bool))
                     (temp___skip_constant_204 : bool))
                    (temp___do_toplevel_205 : bool))
                   (temp___do_typ_inv_206 : bool)) }
  
  predicate default_initial_assumption (temp___expr_208: int) (temp___skip_top_level_209: bool) =
    true
  
  val default_initial_assumption (temp___expr_208: int) (temp___skip_top_level_209: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_208 : int))
                   (temp___skip_top_level_209 : bool)) }
end

module House_heating__temperature___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_heating__temperature as House_heating__temperature
  
  predicate dynamic_invariant (temp___expr_200: int) (temp___is_init_196: bool) (temp___skip_constant_197: bool) (temp___do_toplevel_198: bool) (temp___do_typ_inv_199: bool) =
    if ((temp___is_init_196 = True) \/
          (House_heating__temperature.first
             <= House_heating__temperature.last)) then
      (((House_heating__temperature.dynamic_property
           House_heating__temperature.first)
          House_heating__temperature.last)
         temp___expr_200)
    else true
  
  val dynamic_invariant (temp___expr_200: int) (temp___is_init_196: bool) (temp___skip_constant_197: bool) (temp___do_toplevel_198: bool) (temp___do_typ_inv_199: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_200 : int))
                      (temp___is_init_196 : bool))
                     (temp___skip_constant_197 : bool))
                    (temp___do_toplevel_198 : bool))
                   (temp___do_typ_inv_199 : bool)) }
  
  predicate default_initial_assumption (temp___expr_201: int) (temp___skip_top_level_202: bool) =
    true
  
  val default_initial_assumption (temp___expr_201: int) (temp___skip_top_level_202: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_201 : int))
                   (temp___skip_top_level_202 : bool)) }
end

module House_exterior__exteriorstatus___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_exterior__exteriorstatus as House_exterior__exteriorstatus
  
  predicate dynamic_invariant (temp___expr_223: int) (temp___is_init_219: bool) (temp___skip_constant_220: bool) (temp___do_toplevel_221: bool) (temp___do_typ_inv_222: bool) =
    if ((temp___is_init_219 = True) \/
          (House_exterior__exteriorstatus.first
             <= House_exterior__exteriorstatus.last)) then
      (((House_exterior__exteriorstatus.dynamic_property
           House_exterior__exteriorstatus.first)
          House_exterior__exteriorstatus.last)
         temp___expr_223)
    else true
  
  val dynamic_invariant (temp___expr_223: int) (temp___is_init_219: bool) (temp___skip_constant_220: bool) (temp___do_toplevel_221: bool) (temp___do_typ_inv_222: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_223 : int))
                      (temp___is_init_219 : bool))
                     (temp___skip_constant_220 : bool))
                    (temp___do_toplevel_221 : bool))
                   (temp___do_typ_inv_222 : bool)) }
  
  predicate default_initial_assumption (temp___expr_224: int) (temp___skip_top_level_225: bool) =
    true
  
  val default_initial_assumption (temp___expr_224: int) (temp___skip_top_level_225: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_224 : int))
                   (temp___skip_top_level_225 : bool)) }
end

module Clean_air__carbon___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Clean_air__carbon as Clean_air__carbon
  
  predicate dynamic_invariant (temp___expr_238: int) (temp___is_init_234: bool) (temp___skip_constant_235: bool) (temp___do_toplevel_236: bool) (temp___do_typ_inv_237: bool) =
    if ((temp___is_init_234 = True) \/
          (Clean_air__carbon.first <= Clean_air__carbon.last)) then
      (((Clean_air__carbon.dynamic_property Clean_air__carbon.first)
          Clean_air__carbon.last)
         temp___expr_238)
    else true
  
  val dynamic_invariant (temp___expr_238: int) (temp___is_init_234: bool) (temp___skip_constant_235: bool) (temp___do_toplevel_236: bool) (temp___do_typ_inv_237: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_238 : int))
                      (temp___is_init_234 : bool))
                     (temp___skip_constant_235 : bool))
                    (temp___do_toplevel_236 : bool))
                   (temp___do_typ_inv_237 : bool)) }
  
  predicate default_initial_assumption (temp___expr_239: int) (temp___skip_top_level_240: bool) =
    true
  
  val default_initial_assumption (temp___expr_239: int) (temp___skip_top_level_240: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_239 : int))
                   (temp___skip_top_level_240 : bool)) }
end

module Clean_air__aircon___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Clean_air__aircon as Clean_air__aircon
  
  predicate dynamic_invariant (temp___expr_245: int) (temp___is_init_241: bool) (temp___skip_constant_242: bool) (temp___do_toplevel_243: bool) (temp___do_typ_inv_244: bool) =
    if ((temp___is_init_241 = True) \/
          (Clean_air__aircon.first <= Clean_air__aircon.last)) then
      (((Clean_air__aircon.dynamic_property Clean_air__aircon.first)
          Clean_air__aircon.last)
         temp___expr_245)
    else true
  
  val dynamic_invariant (temp___expr_245: int) (temp___is_init_241: bool) (temp___skip_constant_242: bool) (temp___do_toplevel_243: bool) (temp___do_typ_inv_244: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_245 : int))
                      (temp___is_init_241 : bool))
                     (temp___skip_constant_242 : bool))
                    (temp___do_toplevel_243 : bool))
                   (temp___do_typ_inv_244 : bool)) }
  
  predicate default_initial_assumption (temp___expr_246: int) (temp___skip_top_level_247: bool) =
    true
  
  val default_initial_assumption (temp___expr_246: int) (temp___skip_top_level_247: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_246 : int))
                   (temp___skip_top_level_247 : bool)) }
end

module House_appliances__unlocked___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_appliances__unlocked as House_appliances__unlocked
  
  predicate dynamic_invariant (temp___expr_261: int) (temp___is_init_257: bool) (temp___skip_constant_258: bool) (temp___do_toplevel_259: bool) (temp___do_typ_inv_260: bool) =
    if ((temp___is_init_257 = True) \/
          (House_appliances__unlocked.first
             <= House_appliances__unlocked.last)) then
      (((House_appliances__unlocked.dynamic_property
           House_appliances__unlocked.first)
          House_appliances__unlocked.last)
         temp___expr_261)
    else true
  
  val dynamic_invariant (temp___expr_261: int) (temp___is_init_257: bool) (temp___skip_constant_258: bool) (temp___do_toplevel_259: bool) (temp___do_typ_inv_260: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_261 : int))
                      (temp___is_init_257 : bool))
                     (temp___skip_constant_258 : bool))
                    (temp___do_toplevel_259 : bool))
                   (temp___do_typ_inv_260 : bool)) }
  
  predicate default_initial_assumption (temp___expr_262: int) (temp___skip_top_level_263: bool) =
    true
  
  val default_initial_assumption (temp___expr_262: int) (temp___skip_top_level_263: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_262 : int))
                   (temp___skip_top_level_263 : bool)) }
end

module House_appliances__locked___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use House_appliances__locked as House_appliances__locked
  
  predicate dynamic_invariant (temp___expr_268: int) (temp___is_init_264: bool) (temp___skip_constant_265: bool) (temp___do_toplevel_266: bool) (temp___do_typ_inv_267: bool) =
    if ((temp___is_init_264 = True) \/
          (House_appliances__locked.first <= House_appliances__locked.last)) then
      (((House_appliances__locked.dynamic_property
           House_appliances__locked.first)
          House_appliances__locked.last)
         temp___expr_268)
    else true
  
  val dynamic_invariant (temp___expr_268: int) (temp___is_init_264: bool) (temp___skip_constant_265: bool) (temp___do_toplevel_266: bool) (temp___do_typ_inv_267: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_268 : int))
                      (temp___is_init_264 : bool))
                     (temp___skip_constant_265 : bool))
                    (temp___do_toplevel_266 : bool))
                   (temp___do_typ_inv_267 : bool)) }
  
  predicate default_initial_assumption (temp___expr_269: int) (temp___skip_top_level_270: bool) =
    true
  
  val default_initial_assumption (temp___expr_269: int) (temp___skip_top_level_270: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_269 : int))
                   (temp___skip_top_level_270 : bool)) }
end

module House__ThouseC___axiom
  use _gnatprove_standard.Main
  use int.Int
  use House__house as House__house
  
  predicate dynamic_invariant (temp___expr_302: House__house.house) (temp___is_init_298: bool) (temp___skip_constant_299: bool) (temp___do_toplevel_300: bool) (temp___do_typ_inv_301: bool) =
    true
  
  val dynamic_invariant (temp___expr_302: House__house.house) (temp___is_init_298: bool) (temp___skip_constant_299: bool) (temp___do_toplevel_300: bool) (temp___do_typ_inv_301: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_302 : House__house.house))
                      (temp___is_init_298 : bool))
                     (temp___skip_constant_299 : bool))
                    (temp___do_toplevel_300 : bool))
                   (temp___do_typ_inv_301 : bool)) }
end

module Main__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use Standard__string as Standard__string
  use House_heating__househeating as House_heating__househeating
  use House_heating__createheating___axiom as House_heating__createheating___axiom
  use House_exterior__houseexterior as House_exterior__houseexterior
  use House_exterior__createexteriors___axiom as House_exterior__createexteriors___axiom
  use Clean_air__cleanair as Clean_air__cleanair
  use Clean_air__createaircon___axiom as Clean_air__createaircon___axiom
  use House_appliances__houseappliances as House_appliances__houseappliances
  use House_appliances__createfridge___axiom as House_appliances__createfridge___axiom
  use Main__system as Main__system
  use House__house as House__house
  use House__house___axiom as House__house___axiom
  use Main__print_status___axiom as Main__print_status___axiom
  use Ada___ada__text_io__put_line__2___axiom as Ada___ada__text_io__put_line__2___axiom
  use House__is_carbon_valid___axiom as House__is_carbon_valid___axiom
  use House__update___axiom as House__update___axiom
  use Main__L_1 as Main__L_1
  use Temp___String_Literal_362 as Temp___String_Literal_362
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Array__Int__Standard__character as Array__Int__Standard__character
  use Standard__positive___axiom as Standard__positive___axiom
  use Standard__character___axiom as Standard__character___axiom
  use Standard__string___axiom as Standard__string___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Main__system___axiom as Main__system___axiom
  use Main__L_1___axiom as Main__L_1___axiom
  use Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
  use Ada___ada__text_io__line_length__2___axiom as Ada___ada__text_io__line_length__2___axiom
  use Ada___ada__text_io__page_length__2___axiom as Ada___ada__text_io__page_length__2___axiom
  use Ada___ada__text_io__put_line__2___axiom as Ada___ada__text_io__put_line__2___axiom
  use House__house___axiom as House__house___axiom
  use House__is_carbon_valid___axiom as House__is_carbon_valid___axiom
  use House__update___axiom as House__update___axiom
  use House_heating__heatingstatus___axiom as House_heating__heatingstatus___axiom
  use House_heating__temperature___axiom as House_heating__temperature___axiom
  use House_heating__househeating___axiom as House_heating__househeating___axiom
  use House_heating__createheating___axiom as House_heating__createheating___axiom
  use House_exterior__exteriorstatus___axiom as House_exterior__exteriorstatus___axiom
  use House_exterior__houseexterior___axiom as House_exterior__houseexterior___axiom
  use House_exterior__createexteriors___axiom as House_exterior__createexteriors___axiom
  use Clean_air__carbon___axiom as Clean_air__carbon___axiom
  use Clean_air__aircon___axiom as Clean_air__aircon___axiom
  use Clean_air__cleanair___axiom as Clean_air__cleanair___axiom
  use Clean_air__createaircon___axiom as Clean_air__createaircon___axiom
  use House_appliances__unlocked___axiom as House_appliances__unlocked___axiom
  use House_appliances__locked___axiom as House_appliances__locked___axiom
  use House_appliances__houseappliances___axiom as House_appliances__houseappliances___axiom
  use House_appliances__createfridge___axiom as House_appliances__createfridge___axiom
  use House__ThouseC___axiom as House__ThouseC___axiom
  use Main__print_status___axiom as Main__print_status___axiom
  
  let def (__void_param : unit)
    requires { [#"main.adb" 10 0 0] true }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram main.adb:10]
      ());
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram main.adb:10]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram main.adb:10]
      ());
     ([#"main.adb" 10 0 0] ());
     ([@GNAT-comment:Assume Pre of the subprogram main.adb:10] ());
     ([#"main.adb" 10 0 0]
      (try
         ([#"main.adb" 10 0 0] ());
         ([#"main.adb" 12 0 0]
          (([#"main.adb" 12 0 0]
            (begin
               ensures { true }
               let _ =
                 let _ =
                   let temp___359 =
                     [#"main.adb" 12 0 0]
                     (val _f : House__house.house
                        ensures { [#"main.adb" 12 0 0] true } in
                      _f) in
                   (if (House__house.house__house__heating__pred temp___359) then
                      ([#"main.adb" 12 0 0]
                       (begin
                          ensures { true }
                          let _ =
                            let _ =
                              House_heating__createheating___axiom.createheating
                                () in
                            () in
                          ()
                        end))
                    else ());
                   (if (House__house.house__house__exterior__pred temp___359) then
                      ([#"main.adb" 12 0 0]
                       (begin
                          ensures { true }
                          let _ =
                            let _ =
                              House_exterior__createexteriors___axiom.createexteriors
                                () in
                            () in
                          ()
                        end))
                    else ());
                   (if (House__house.house__house__air__pred temp___359) then
                      ([#"main.adb" 12 0 0]
                       (begin
                          ensures { true }
                          let _ =
                            let _ =
                              Clean_air__createaircon___axiom.createaircon () in
                            () in
                          ()
                        end))
                    else ());
                   (if (House__house.house__house__appliances__pred
                          temp___359) then
                      ([#"main.adb" 12 0 0]
                       (begin
                          ensures { true }
                          let _ =
                            let _ =
                              House_appliances__createfridge___axiom.createfridge
                                () in
                            () in
                          ()
                        end))
                    else ()) in
                 () in
               ()
             end));
           ([#"main.adb" 12 0 0]
            assume {
              [#"main.adb" 12 0 0]
              ((House__house___axiom.default_initial_assumption
                  { House__house.__split_fields =
                      (House__house.__split_fields__content
                          Main__system.system__split_fields) ;
                    House__house.attr__tag = Main__system.system__attr__tag })
                 False) });
           ([#"main.adb" 12 0 0]
            assume {
              [#"main.adb" 12 0 0]
              (((((House__house___axiom.dynamic_invariant
                     { House__house.__split_fields =
                         (House__house.__split_fields__content
                             Main__system.system__split_fields) ;
                       House__house.attr__tag =
                         Main__system.system__attr__tag })
                    False)
                   False)
                  True)
                 True) })));
         ([#"main.adb" 14 0 0] ());
         ([#"main.adb" 14 0 0] ());
         ([#"main.adb" 14 0 0] ());
         ([#"main.adb" 39 0 0] ());
         ([@GP_Sloc:main.adb:39:4]
          [#"main.adb" 39 0 0]
          (([@GNAT-comment:Translation of an Ada loop from main.adb:39] ());
           (if True then
              ([#"main.adb" 39 0 0]
               (try
                  let temp___loop_entry_364 =
                    { House__house.__split_fields =
                        (House__house.__split_fields__content
                            Main__system.system__split_fields) ;
                      House__house.attr__tag = Main__system.system__attr__tag } in
                  ([@GNAT-comment:While loop translating the Ada loop from main.adb:39]
                   ());
                  ([#"main.adb" 39 0 0]
                   [#"main.adb" 39 0 0]
                   (([@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                     ());
                    while True do
                      ([@GNAT-comment:gnat_ast_to_ptree: code after the loop invariant]
                       (([@GNAT-comment:Assume implicit invariants from the loop main.adb:39]
                         ());
                        ([#"main.adb" 39 0 0]
                         assume {
                           [#"main.adb" 39 0 0]
                           ((true /\
                               (((((House__house___axiom.dynamic_invariant
                                      { House__house.__split_fields =
                                          (House__house.__split_fields__content
                                              Main__system.system__split_fields) ;
                                        House__house.attr__tag =
                                          Main__system.system__attr__tag })
                                     False)
                                    True)
                                   True)
                                  True)) /\
                              (true /\ true)) });
                        ([@GNAT-comment:Continuation of loop after loop invariant and variant]
                         ());
                        ([@GP_Sloc:main.adb:40:7] [#"main.adb" 40 0 0] ());
                        ([@GP_Sloc:main.adb:40:7]
                         [#"main.adb" 40 0 0]
                         (([#"main.adb" 40 0 0] (val _f : unit in
                                                 _f));
                          (Main__print_status___axiom.print_status ())));
                        ([@GP_Sloc:main.adb:42:26] [#"main.adb" 42 0 0] ());
                        ([@GP_Sloc:main.adb:42:10] [#"main.adb" 42 0 0] ());
                        ([@GP_Sloc:main.adb:42:7]
                         [#"main.adb" 42 0 0]
                         (if (([#"main.adb" 42 0 0]
                               [#"main.adb" 42 0 0]
                               (([@branch_id=975] Main.spark__branch).bool__content <-
                                  (House__is_carbon_valid___axiom.is_carbon_valid
                                     { House__house.__split_fields =
                                         (House__house.__split_fields__content
                                             Main__system.system__split_fields) ;
                                       House__house.attr__tag =
                                         Main__system.system__attr__tag })));
                              (([@branch_id=975] Main.spark__branch).bool__content)) then
                            (([@GP_Sloc:main.adb:43:10]
                              [#"main.adb" 43 0 0] ());
                             ([@GP_Sloc:main.adb:43:16]
                              [#"main.adb" 43 0 0] ());
                             ([@GP_Sloc:main.adb:43:16]
                              [#"main.adb" 43 0 0]
                              (let temp___compl_361 =
                                 { House__house.__split_fields =
                                     (House__house.__split_fields__content
                                         Main__system.system__split_fields) ;
                                   House__house.attr__tag =
                                     Main__system.system__attr__tag } in
                               ([#"main.adb" 43 0 0] (val _f : unit in
                                                      _f));
                               ([#"main.adb" 43 0 0]
                                [@GP_Reason:VC_PRECONDITION]
                                [@vc:annotation]
                                [@GP_Sloc:main.adb:43:16]
                                [@comment:         system.Update;                ^ main.adb:43:16:VC_PRECONDITION]
                                [@GP_Id:0]
                                [@GP_Shape:L_1_loop__if__call_update]
                                ((House__update___axiom.update
                                    Main__system.system__split_fields)
                                   Main__system.system__attr__tag)))))
                          else
                            (([@GP_Sloc:main.adb:45:10]
                              [#"main.adb" 45 0 0] ());
                             ([@GP_Sloc:main.adb:45:10]
                              [#"main.adb" 45 0 0]
                              (([#"main.adb" 45 0 0] (val _f : unit in
                                                      _f));
                               (Ada___ada__text_io__put_line__2___axiom.put_line
                                  (let temp___363 =
                                     Temp___String_Literal_362.temp___String_Literal_362
                                       () in
                                   ((Standard__string.of_array temp___363)
                                      (1 : int))
                                     (49 : int))))))));
                        ([@GNAT-comment:Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:39]
                         ());
                        (if False then (raise Main__L_1.L_1)
                         else ())));
                      ([@GNAT-comment:gnat_ast_to_ptree: code before the loop invariant]
                       [@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                       ());
                      ([@GNAT-comment:gnat_ast_to_ptree: code checking the variants]
                       ())
                    done))
                with Main__L_1.L_1 -> ()
                end))
            else ())));
         (raise Return__exc)
       with Return__exc -> ()
       end)))
end
