(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type positive  = <range 1 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 1
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = positive,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type positive__ref  = { mutable positive__content : positive }
  
  function   positive__ref_positive__content__projection (a : positive__ref)
    requires {  } ensures  {  } returns positive = a.positive__content
  
  meta model_projection function positive__ref_positive__content__projection
  
  meta inline:no function positive__ref_positive__content__projection
  
  function   positive__havoc (x : positive__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type character  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 255
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = character,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type character__ref  = { mutable character__content : character }
  
  function   character__ref_character__content__projection
    (a : character__ref) requires {  } ensures  {  } returns
    character = a.character__content
  
  meta model_projection function character__ref_character__content__projection
  
  meta inline:no function character__ref_character__content__projection
  
  function   character__havoc (x : character__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
  
  use        Standard__character
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__character.character,
    predicate in_range = Standard__character.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  
  function   index_I1_one () requires { True } ensures  { True } returns
    int = 1
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  clone export _gnatprove_standard.Array__1 with axiom . type I1.t = int,
    predicate I1.le = <=, predicate I1.lt = <, predicate I1.gt = >,
    function I1.add = +, function I1.sub = -, function I1.one = index_I1_one,
    type component_type = component_type
  
  function   bool_eq
    (a : map a__first : int a__last : int b : map b__first : int
    b__last : int) requires { True } ensures  { True } returns
    bool = ((if (a__first <= a__last) then
            ((b__first <= b__last) /\
               ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              --pp_universal_quantif NOT IMPLEMENTED)
  
  axiom bool_eq_rev : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
  
  use        Standard__integer
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Standard__integer.integer) requires { True }
    ensures  { True } returns int = (Standard__integer.integer'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  use        Standard__positive
  use        Standard__character
  use        Array__Int__Standard__character
  use        Standard__integer__rep
  
  type component_type  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   index_1_id (x : int) requires { True } ensures  { True } returns
    int = x
  
  clone export ada__model.Unconstr_Array with axiom . type map = Array__Int__Standard__character.map,
    function array_bool_eq = Array__Int__Standard__character.bool_eq,
    type index_base_type = Standard__integer.integer,
    type index_rep_type = int,
    function to_rep = Standard__integer__rep.to_rep,
    function rep_to_int = index_1_id,
    predicate in_range_base = Standard__integer.in_range,
    predicate index_dynamic_property = Standard__positive.dynamic_property,
    predicate index_rep_le = <=
  
  type string__  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  meta model_projection function to_array
  
  meta inline:no function to_array
  
  meta model_projection function first
  
  meta inline:no function first
  
  meta model_projection function last
  
  meta inline:no function last
  
  type string____ref  = { mutable string____content : string__ }
  
  function   string____ref_string____content__projection (a : string____ref)
    requires {  } ensures  {  } returns string__ = a.string____content
  
  meta model_projection function string____ref_string____content__projection
  
  meta inline:no function string____ref_string____content__projection
  
  function   string____havoc (x : string____ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
  
  use import int.Int
  use        Standard__string
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_string (x : _gnatprove_standard.Main.__image s : int)
    requires { True } ensures  { True } returns Standard__string.string__
  
  function   from_string (x : Standard__string.string__) requires { True }
    ensures  { True } returns _gnatprove_standard.Main.__image
  
  axiom to_string__first : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom to_string__length : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Array__Int__Standard__character
  
  function   index_Index_one () requires { True } ensures  { True } returns
    int = 1
  
  clone export _gnatprove_standard.Array__1__Concat with axiom . type component_type = Array__Int__Standard__character.component_type,
    type map = Array__Int__Standard__character.map, type Index.t = int,
    predicate Index.le = <=, predicate Index.lt = <, predicate Index.gt = >,
    function Index.add = +, function Index.sub = -,
    function Index.one = index_Index_one,
    function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing type "temperature" defined at house_heating.ads:5, created in Gnat2Why.Types.Translate_Type *)
module House_heating__temperature
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type temperature  = <range 17 19>
  
  function   first () requires { True } ensures  { True } returns int = 17
  
  function   last () requires { True } ensures  { True } returns int = 19
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = temperature,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type temperature__ref  = { mutable temperature__content : temperature }
  
  function   temperature__ref_temperature__content__projection
    (a : temperature__ref) requires {  } ensures  {  } returns
    temperature = a.temperature__content
  
  meta model_projection function temperature__ref_temperature__content__projection
  
  meta inline:no function temperature__ref_temperature__content__projection
  
  function   temperature__havoc (x : temperature__ref) requires {  } ensures 
    {  } returns unit

end

(* Module defining to_rep/of_rep for type "temperature" defined at house_heating.ads:5, created in Gnat2Why.Types.Translate_Type *)
module House_heating__temperature__rep
  
  use        House_heating__temperature
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : House_heating__temperature.temperature) requires
    { True } ensures  { True } returns
    int = (House_heating__temperature.temperature'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = House_heating__temperature.temperature,
    predicate in_range = House_heating__temperature.in_range,
    function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "heatingstatus" defined at house_heating.ads:4, created in Gnat2Why.Types.Translate_Type *)
module House_heating__heatingstatus
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type heatingstatus  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = heatingstatus,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type heatingstatus__ref  = { mutable heatingstatus__content : heatingstatus }
  
  function   heatingstatus__ref_heatingstatus__content__projection
    (a : heatingstatus__ref) requires {  } ensures  {  } returns
    heatingstatus = a.heatingstatus__content
  
  meta model_projection function heatingstatus__ref_heatingstatus__content__projection
  
  meta inline:no function heatingstatus__ref_heatingstatus__content__projection
  
  function   heatingstatus__havoc (x : heatingstatus__ref) requires {  }
    ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "heatingstatus" defined at house_heating.ads:4, created in Gnat2Why.Types.Translate_Type *)
module House_heating__heatingstatus__rep
  
  use        House_heating__heatingstatus
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = House_heating__heatingstatus.heatingstatus,
    predicate in_range = House_heating__heatingstatus.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "househeating" defined at house_heating.ads:13, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module House_heating__househeating__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        House_heating__temperature
  use        House_heating__temperature__rep
  use        House_heating__heatingstatus
  use        House_heating__heatingstatus__rep
  
  type __split_fields  = { [name:temp]
                           [model_trace:.7266]rec__house_heating__househeating__temp : House_heating__temperature.temperature;
                           [model_trace:.7271]
                           [name:status]rec__house_heating__househeating__status : House_heating__heatingstatus.heatingstatus;
                           rec__ext__ : _gnatprove_standard.Main.__private }
  
  function [name:temp] [model_trace:.7266] 
    __split_fields_rec__house_heating__househeating__temp__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    House_heating__temperature.temperature = a.rec__house_heating__househeating__temp
  
  meta model_projection function __split_fields_rec__house_heating__househeating__temp__projection
  
  meta inline:no function __split_fields_rec__house_heating__househeating__temp__projection
  
  function [model_trace:.7271] [name:status] 
    __split_fields_rec__house_heating__househeating__status__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    House_heating__heatingstatus.heatingstatus = a.rec__house_heating__househeating__status
  
  meta model_projection function __split_fields_rec__house_heating__househeating__status__projection
  
  meta inline:no function __split_fields_rec__house_heating__househeating__status__projection
  
  function   __split_fields_rec__ext____projection (a : __split_fields)
    requires {  } ensures  {  } returns
    _gnatprove_standard.Main.__private = a.rec__ext__
  
  meta model_projection function __split_fields_rec__ext____projection
  
  meta inline:no function __split_fields_rec__ext____projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields; attr__tag : int }
  
  function   __rep___split_fields__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__projection
  
  meta inline:no function __rep___split_fields__projection
  
  function   __rep_attr__tag__projection (a : __rep) requires {  } ensures 
    {  } returns int = a.attr__tag
  
  meta model_projection function __rep_attr__tag__projection
  
  meta inline:no function __rep_attr__tag__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   house_heating__househeating__temp__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__house_heating__househeating__temp_ (a : __rep) requires
    { (house_heating__househeating__temp__pred a) } ensures 
    { (result = a.__split_fields.rec__house_heating__househeating__temp) }
    returns House_heating__temperature.temperature
  
  function   house_heating__househeating__status__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__house_heating__househeating__status_ (a : __rep) requires
    { (house_heating__househeating__status__pred a) } ensures 
    { (result = a.__split_fields.rec__house_heating__househeating__status) }
    returns House_heating__heatingstatus.heatingstatus
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((House_heating__temperature__rep.to_rep
                a.__split_fields.rec__house_heating__househeating__temp)
               = (House_heating__temperature__rep.to_rep
                    b.__split_fields.rec__house_heating__househeating__temp))
              /\
              ((House_heating__heatingstatus__rep.to_rep
                  a.__split_fields.rec__house_heating__househeating__status)
                 = (House_heating__heatingstatus__rep.to_rep
                      b.__split_fields.rec__house_heating__househeating__status)))
           then True  else False)
  
  function   __dispatch_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns bool

end

(* Module for axiomatizing type "househeating" defined at house_heating.ads:13, created in Gnat2Why.Types.Translate_Type *)
module House_heating__househeating
  
  use export House_heating__househeating__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type househeating  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   __tag () requires {  } ensures  {  } returns int
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   house_heating__househeating__temp__first__bit () requires {  }
    ensures  {  } returns int
  
  function   house_heating__househeating__temp__last__bit () requires {  }
    ensures  {  } returns int
  
  function   house_heating__househeating__temp__position () requires {  }
    ensures  {  } returns int
  
  axiom house_heating__househeating__temp__first__bit_axiom : ((house_heating__househeating__temp__first__bit
                                                                  ) >= 0)
  
  axiom house_heating__househeating__temp__last__bit_axiom : ((house_heating__househeating__temp__last__bit
                                                                 )
                                                                > (house_heating__househeating__temp__first__bit
                                                                    ))
  
  axiom house_heating__househeating__temp__position_axiom : ((house_heating__househeating__temp__position
                                                                ) >= 0)
  
  function   house_heating__househeating__status__first__bit () requires {  }
    ensures  {  } returns int
  
  function   house_heating__househeating__status__last__bit () requires {  }
    ensures  {  } returns int
  
  function   house_heating__househeating__status__position () requires {  }
    ensures  {  } returns int
  
  axiom house_heating__househeating__status__first__bit_axiom : ((house_heating__househeating__status__first__bit
                                                                    ) >= 0)
  
  axiom house_heating__househeating__status__last__bit_axiom : ((house_heating__househeating__status__last__bit
                                                                   )
                                                                  > (
                                                                  house_heating__househeating__status__first__bit
                                                                    ))
  
  axiom house_heating__househeating__status__position_axiom : ((house_heating__househeating__status__position
                                                                  ) >= 0)
  
  function   user_eq (a : househeating b : househeating) requires { True }
    ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns househeating
  
  type househeating__ref  = { mutable househeating__content : househeating }
  
  function   househeating__ref_househeating__content__projection
    (a : househeating__ref) requires {  } ensures  {  } returns
    househeating = a.househeating__content
  
  meta model_projection function househeating__ref_househeating__content__projection
  
  meta inline:no function househeating__ref_househeating__content__projection
  
  function   househeating__havoc (x : househeating__ref) requires {  }
    ensures  {  } returns unit

end

(* Module for axiomatizing type "exteriorstatus" defined at house_exterior.ads:4, created in Gnat2Why.Types.Translate_Type *)
module House_exterior__exteriorstatus
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type exteriorstatus  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = exteriorstatus,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type exteriorstatus__ref  = { mutable exteriorstatus__content : exteriorstatus }
  
  function   exteriorstatus__ref_exteriorstatus__content__projection
    (a : exteriorstatus__ref) requires {  } ensures  {  } returns
    exteriorstatus = a.exteriorstatus__content
  
  meta model_projection function exteriorstatus__ref_exteriorstatus__content__projection
  
  meta inline:no function exteriorstatus__ref_exteriorstatus__content__projection
  
  function   exteriorstatus__havoc (x : exteriorstatus__ref) requires {  }
    ensures  {  } returns unit

end

(* Module defining to_rep/of_rep for type "exteriorstatus" defined at house_exterior.ads:4, created in Gnat2Why.Types.Translate_Type *)
module House_exterior__exteriorstatus__rep
  
  use        House_exterior__exteriorstatus
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = House_exterior__exteriorstatus.exteriorstatus,
    predicate in_range = House_exterior__exteriorstatus.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "houseexterior" defined at house_exterior.ads:6, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module House_exterior__houseexterior__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        House_exterior__exteriorstatus
  use        House_exterior__exteriorstatus__rep
  
  type __split_fields  = { [model_trace:.7400]
                           [name:status]rec__house_exterior__houseexterior__status : House_exterior__exteriorstatus.exteriorstatus;
                           rec__ext__ : _gnatprove_standard.Main.__private }
  
  function [model_trace:.7400] [name:status] 
    __split_fields_rec__house_exterior__houseexterior__status__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    House_exterior__exteriorstatus.exteriorstatus = a.rec__house_exterior__houseexterior__status
  
  meta model_projection function __split_fields_rec__house_exterior__houseexterior__status__projection
  
  meta inline:no function __split_fields_rec__house_exterior__houseexterior__status__projection
  
  function   __split_fields_rec__ext____2__projection (a : __split_fields)
    requires {  } ensures  {  } returns
    _gnatprove_standard.Main.__private = a.rec__ext__
  
  meta model_projection function __split_fields_rec__ext____2__projection
  
  meta inline:no function __split_fields_rec__ext____2__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__2__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__2__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__2__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields; attr__tag : int }
  
  function   __rep___split_fields__2__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__2__projection
  
  meta inline:no function __rep___split_fields__2__projection
  
  function   __rep_attr__tag__2__projection (a : __rep) requires {  }
    ensures  {  } returns int = a.attr__tag
  
  meta model_projection function __rep_attr__tag__2__projection
  
  meta inline:no function __rep_attr__tag__2__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   house_exterior__houseexterior__status__pred (a : __rep) requires
    { True } ensures  { True } returns  = True
  
  function   rec__house_exterior__houseexterior__status_ (a : __rep) requires
    { (house_exterior__houseexterior__status__pred a) } ensures 
    { (result = a.__split_fields.rec__house_exterior__houseexterior__status) }
    returns House_exterior__exteriorstatus.exteriorstatus
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           ((House_exterior__exteriorstatus__rep.to_rep
               a.__split_fields.rec__house_exterior__houseexterior__status)
              = (House_exterior__exteriorstatus__rep.to_rep
                   b.__split_fields.rec__house_exterior__houseexterior__status))
           then True  else False)
  
  function   __dispatch_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns bool

end

(* Module for axiomatizing type "houseexterior" defined at house_exterior.ads:6, created in Gnat2Why.Types.Translate_Type *)
module House_exterior__houseexterior
  
  use export House_exterior__houseexterior__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type houseexterior  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   __tag () requires {  } ensures  {  } returns int
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   house_exterior__houseexterior__status__first__bit () requires
    {  } ensures  {  } returns int
  
  function   house_exterior__houseexterior__status__last__bit () requires
    {  } ensures  {  } returns int
  
  function   house_exterior__houseexterior__status__position () requires {  }
    ensures  {  } returns int
  
  axiom house_exterior__houseexterior__status__first__bit_axiom : ((house_exterior__houseexterior__status__first__bit
                                                                    ) >= 0)
  
  axiom house_exterior__houseexterior__status__last__bit_axiom : ((house_exterior__houseexterior__status__last__bit
                                                                    )
                                                                    > (
                                                                    house_exterior__houseexterior__status__first__bit
                                                                    ))
  
  axiom house_exterior__houseexterior__status__position_axiom : ((house_exterior__houseexterior__status__position
                                                                    ) >= 0)
  
  function   user_eq (a : houseexterior b : houseexterior) requires { True }
    ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns houseexterior
  
  type houseexterior__ref  = { mutable houseexterior__content : houseexterior }
  
  function   houseexterior__ref_houseexterior__content__projection
    (a : houseexterior__ref) requires {  } ensures  {  } returns
    houseexterior = a.houseexterior__content
  
  meta model_projection function houseexterior__ref_houseexterior__content__projection
  
  meta inline:no function houseexterior__ref_houseexterior__content__projection
  
  function   houseexterior__havoc (x : houseexterior__ref) requires {  }
    ensures  {  } returns unit

end

(* Module for axiomatizing type "carbon" defined at clean_air.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Clean_air__carbon
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type carbon  = <range 0 8>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 8
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = carbon,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type carbon__ref  = { mutable carbon__content : carbon }
  
  function   carbon__ref_carbon__content__projection (a : carbon__ref)
    requires {  } ensures  {  } returns carbon = a.carbon__content
  
  meta model_projection function carbon__ref_carbon__content__projection
  
  meta inline:no function carbon__ref_carbon__content__projection
  
  function   carbon__havoc (x : carbon__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "carbon" defined at clean_air.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Clean_air__carbon__rep
  
  use        Clean_air__carbon
  use import _gnatprove_standard.Main
  use import int.Int
  
  function   to_rep (x : Clean_air__carbon.carbon) requires { True } ensures 
    { True } returns int = (Clean_air__carbon.carbon'int x)
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Clean_air__carbon.carbon,
    predicate in_range = Clean_air__carbon.in_range, function to_rep = to_rep
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "aircon" defined at clean_air.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Clean_air__aircon
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type aircon  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = aircon,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type aircon__ref  = { mutable aircon__content : aircon }
  
  function   aircon__ref_aircon__content__projection (a : aircon__ref)
    requires {  } ensures  {  } returns aircon = a.aircon__content
  
  meta model_projection function aircon__ref_aircon__content__projection
  
  meta inline:no function aircon__ref_aircon__content__projection
  
  function   aircon__havoc (x : aircon__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "aircon" defined at clean_air.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Clean_air__aircon__rep
  
  use        Clean_air__aircon
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = Clean_air__aircon.aircon,
    predicate in_range = Clean_air__aircon.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "cleanair" defined at clean_air.ads:13, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Clean_air__cleanair__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Clean_air__carbon
  use        Clean_air__carbon__rep
  use        Clean_air__aircon
  use        Clean_air__aircon__rep
  
  type __split_fields  = { [model_trace:.7499]
                           [name:carb]rec__clean_air__cleanair__carb : Clean_air__carbon.carbon;
                           [model_trace:.7504]
                           [name:status]rec__clean_air__cleanair__status : Clean_air__aircon.aircon;
                           rec__ext__ : _gnatprove_standard.Main.__private }
  
  function [model_trace:.7499] [name:carb] 
    __split_fields_rec__clean_air__cleanair__carb__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Clean_air__carbon.carbon = a.rec__clean_air__cleanair__carb
  
  meta model_projection function __split_fields_rec__clean_air__cleanair__carb__projection
  
  meta inline:no function __split_fields_rec__clean_air__cleanair__carb__projection
  
  function [model_trace:.7504] [name:status] 
    __split_fields_rec__clean_air__cleanair__status__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    Clean_air__aircon.aircon = a.rec__clean_air__cleanair__status
  
  meta model_projection function __split_fields_rec__clean_air__cleanair__status__projection
  
  meta inline:no function __split_fields_rec__clean_air__cleanair__status__projection
  
  function   __split_fields_rec__ext____3__projection (a : __split_fields)
    requires {  } ensures  {  } returns
    _gnatprove_standard.Main.__private = a.rec__ext__
  
  meta model_projection function __split_fields_rec__ext____3__projection
  
  meta inline:no function __split_fields_rec__ext____3__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__3__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__3__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__3__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields; attr__tag : int }
  
  function   __rep___split_fields__3__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__3__projection
  
  meta inline:no function __rep___split_fields__3__projection
  
  function   __rep_attr__tag__3__projection (a : __rep) requires {  }
    ensures  {  } returns int = a.attr__tag
  
  meta model_projection function __rep_attr__tag__3__projection
  
  meta inline:no function __rep_attr__tag__3__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   clean_air__cleanair__carb__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__clean_air__cleanair__carb_ (a : __rep) requires
    { (clean_air__cleanair__carb__pred a) } ensures 
    { (result = a.__split_fields.rec__clean_air__cleanair__carb) } returns
    Clean_air__carbon.carbon
  
  function   clean_air__cleanair__status__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__clean_air__cleanair__status_ (a : __rep) requires
    { (clean_air__cleanair__status__pred a) } ensures 
    { (result = a.__split_fields.rec__clean_air__cleanair__status) } returns
    Clean_air__aircon.aircon
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((Clean_air__carbon__rep.to_rep
                a.__split_fields.rec__clean_air__cleanair__carb)
               = (Clean_air__carbon__rep.to_rep
                    b.__split_fields.rec__clean_air__cleanair__carb)) /\
              ((Clean_air__aircon__rep.to_rep
                  a.__split_fields.rec__clean_air__cleanair__status)
                 = (Clean_air__aircon__rep.to_rep
                      b.__split_fields.rec__clean_air__cleanair__status)))
           then True  else False)
  
  function   __dispatch_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns bool

end

(* Module for axiomatizing type "cleanair" defined at clean_air.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Clean_air__cleanair
  
  use export Clean_air__cleanair__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type cleanair  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   __tag () requires {  } ensures  {  } returns int
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   clean_air__cleanair__carb__first__bit () requires {  } ensures 
    {  } returns int
  
  function   clean_air__cleanair__carb__last__bit () requires {  } ensures 
    {  } returns int
  
  function   clean_air__cleanair__carb__position () requires {  } ensures 
    {  } returns int
  
  axiom clean_air__cleanair__carb__first__bit_axiom : ((clean_air__cleanair__carb__first__bit
                                                          ) >= 0)
  
  axiom clean_air__cleanair__carb__last__bit_axiom : ((clean_air__cleanair__carb__last__bit
                                                         )
                                                        > (clean_air__cleanair__carb__first__bit
                                                             ))
  
  axiom clean_air__cleanair__carb__position_axiom : ((clean_air__cleanair__carb__position
                                                        ) >= 0)
  
  function   clean_air__cleanair__status__first__bit () requires {  }
    ensures  {  } returns int
  
  function   clean_air__cleanair__status__last__bit () requires {  } ensures 
    {  } returns int
  
  function   clean_air__cleanair__status__position () requires {  } ensures 
    {  } returns int
  
  axiom clean_air__cleanair__status__first__bit_axiom : ((clean_air__cleanair__status__first__bit
                                                            ) >= 0)
  
  axiom clean_air__cleanair__status__last__bit_axiom : ((clean_air__cleanair__status__last__bit
                                                           )
                                                          > (clean_air__cleanair__status__first__bit
                                                               ))
  
  axiom clean_air__cleanair__status__position_axiom : ((clean_air__cleanair__status__position
                                                          ) >= 0)
  
  function   user_eq (a : cleanair b : cleanair) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns cleanair
  
  type cleanair__ref  = { mutable cleanair__content : cleanair }
  
  function   cleanair__ref_cleanair__content__projection (a : cleanair__ref)
    requires {  } ensures  {  } returns cleanair = a.cleanair__content
  
  meta model_projection function cleanair__ref_cleanair__content__projection
  
  meta inline:no function cleanair__ref_cleanair__content__projection
  
  function   cleanair__havoc (x : cleanair__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for axiomatizing type "unlocked" defined at house_appliances.ads:4, created in Gnat2Why.Types.Translate_Type *)
module House_appliances__unlocked
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type unlocked  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = unlocked,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type unlocked__ref  = { mutable unlocked__content : unlocked }
  
  function   unlocked__ref_unlocked__content__projection (a : unlocked__ref)
    requires {  } ensures  {  } returns unlocked = a.unlocked__content
  
  meta model_projection function unlocked__ref_unlocked__content__projection
  
  meta inline:no function unlocked__ref_unlocked__content__projection
  
  function   unlocked__havoc (x : unlocked__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "unlocked" defined at house_appliances.ads:4, created in Gnat2Why.Types.Translate_Type *)
module House_appliances__unlocked__rep
  
  use        House_appliances__unlocked
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = House_appliances__unlocked.unlocked,
    predicate in_range = House_appliances__unlocked.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing type "locked" defined at house_appliances.ads:5, created in Gnat2Why.Types.Translate_Type *)
module House_appliances__locked
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type locked  
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns int = 1
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = locked,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type locked__ref  = { mutable locked__content : locked }
  
  function   locked__ref_locked__content__projection (a : locked__ref)
    requires {  } ensures  {  } returns locked = a.locked__content
  
  meta model_projection function locked__ref_locked__content__projection
  
  meta inline:no function locked__ref_locked__content__projection
  
  function   locked__havoc (x : locked__ref) requires {  } ensures  {  }
    returns unit

end

(* Module defining to_rep/of_rep for type "locked" defined at house_appliances.ads:5, created in Gnat2Why.Types.Translate_Type *)
module House_appliances__locked__rep
  
  use        House_appliances__locked
  use import _gnatprove_standard.Main
  use import int.Int
  
  clone export ada__model.Rep_Proj_Int with axiom . type t = House_appliances__locked.locked,
    predicate in_range = House_appliances__locked.in_range
  
  meta model_projection function to_rep
  
  meta inline:no function to_rep

end

(* Module for axiomatizing the record theory associated to type "houseappliances" defined at house_appliances.ads:7, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module House_appliances__houseappliances__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        House_appliances__unlocked
  use        House_appliances__unlocked__rep
  use        House_appliances__locked
  use        House_appliances__locked__rep
  
  type __split_fields  = { [model_trace:.7605]
                           [name:statusUnlocked]rec__house_appliances__houseappliances__statusunlocked : House_appliances__unlocked.unlocked;
                           [name:statusLocked]
                           [model_trace:.7610]rec__house_appliances__houseappliances__statuslocked : House_appliances__locked.locked;
                           rec__ext__ : _gnatprove_standard.Main.__private }
  
  function [model_trace:.7605] [name:statusUnlocked] 
    __split_fields_rec__house_appliances__houseappliances__statusunlocked__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    House_appliances__unlocked.unlocked = a.rec__house_appliances__houseappliances__statusunlocked
  
  meta model_projection function __split_fields_rec__house_appliances__houseappliances__statusunlocked__projection
  
  meta inline:no function __split_fields_rec__house_appliances__houseappliances__statusunlocked__projection
  
  function [name:statusLocked] [model_trace:.7610] 
    __split_fields_rec__house_appliances__houseappliances__statuslocked__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    House_appliances__locked.locked = a.rec__house_appliances__houseappliances__statuslocked
  
  meta model_projection function __split_fields_rec__house_appliances__houseappliances__statuslocked__projection
  
  meta inline:no function __split_fields_rec__house_appliances__houseappliances__statuslocked__projection
  
  function   __split_fields_rec__ext____4__projection (a : __split_fields)
    requires {  } ensures  {  } returns
    _gnatprove_standard.Main.__private = a.rec__ext__
  
  meta model_projection function __split_fields_rec__ext____4__projection
  
  meta inline:no function __split_fields_rec__ext____4__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__4__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__4__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__4__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields; attr__tag : int }
  
  function   __rep___split_fields__4__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__4__projection
  
  meta inline:no function __rep___split_fields__4__projection
  
  function   __rep_attr__tag__4__projection (a : __rep) requires {  }
    ensures  {  } returns int = a.attr__tag
  
  meta model_projection function __rep_attr__tag__4__projection
  
  meta inline:no function __rep_attr__tag__4__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   house_appliances__houseappliances__statusunlocked__pred
    (a : __rep) requires { True } ensures  { True } returns  = True
  
  function   rec__house_appliances__houseappliances__statusunlocked_
    (a : __rep) requires
    { (house_appliances__houseappliances__statusunlocked__pred a) } ensures 
    { (result
         = a.__split_fields.rec__house_appliances__houseappliances__statusunlocked) }
    returns House_appliances__unlocked.unlocked
  
  function   house_appliances__houseappliances__statuslocked__pred
    (a : __rep) requires { True } ensures  { True } returns  = True
  
  function   rec__house_appliances__houseappliances__statuslocked_
    (a : __rep) requires
    { (house_appliances__houseappliances__statuslocked__pred a) } ensures 
    { (result
         = a.__split_fields.rec__house_appliances__houseappliances__statuslocked) }
    returns House_appliances__locked.locked
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           (((House_appliances__unlocked__rep.to_rep
                a.__split_fields.rec__house_appliances__houseappliances__statusunlocked)
               = (House_appliances__unlocked__rep.to_rep
                    b.__split_fields.rec__house_appliances__houseappliances__statusunlocked))
              /\
              ((House_appliances__locked__rep.to_rep
                  a.__split_fields.rec__house_appliances__houseappliances__statuslocked)
                 = (House_appliances__locked__rep.to_rep
                      b.__split_fields.rec__house_appliances__houseappliances__statuslocked)))
           then True  else False)
  
  function   __dispatch_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns bool

end

(* Module for axiomatizing type "houseappliances" defined at house_appliances.ads:7, created in Gnat2Why.Types.Translate_Type *)
module House_appliances__houseappliances
  
  use export House_appliances__houseappliances__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type houseappliances  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   __tag () requires {  } ensures  {  } returns int
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   house_appliances__houseappliances__statusunlocked__first__bit 
    () requires {  } ensures  {  } returns int
  
  function   house_appliances__houseappliances__statusunlocked__last__bit 
    () requires {  } ensures  {  } returns int
  
  function   house_appliances__houseappliances__statusunlocked__position 
    () requires {  } ensures  {  } returns int
  
  axiom house_appliances__houseappliances__statusunlocked__first__bit_axiom : 
  ((house_appliances__houseappliances__statusunlocked__first__bit ) >= 0)
  
  axiom house_appliances__houseappliances__statusunlocked__last__bit_axiom : 
  ((house_appliances__houseappliances__statusunlocked__last__bit )
     > (house_appliances__houseappliances__statusunlocked__first__bit ))
  
  axiom house_appliances__houseappliances__statusunlocked__position_axiom : 
  ((house_appliances__houseappliances__statusunlocked__position ) >= 0)
  
  function   house_appliances__houseappliances__statuslocked__first__bit 
    () requires {  } ensures  {  } returns int
  
  function   house_appliances__houseappliances__statuslocked__last__bit 
    () requires {  } ensures  {  } returns int
  
  function   house_appliances__houseappliances__statuslocked__position 
    () requires {  } ensures  {  } returns int
  
  axiom house_appliances__houseappliances__statuslocked__first__bit_axiom : 
  ((house_appliances__houseappliances__statuslocked__first__bit ) >= 0)
  
  axiom house_appliances__houseappliances__statuslocked__last__bit_axiom : 
  ((house_appliances__houseappliances__statuslocked__last__bit )
     > (house_appliances__houseappliances__statuslocked__first__bit ))
  
  axiom house_appliances__houseappliances__statuslocked__position_axiom : 
  ((house_appliances__houseappliances__statuslocked__position ) >= 0)
  
  function   user_eq (a : houseappliances b : houseappliances) requires
    { True } ensures  { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns houseappliances
  
  type houseappliances__ref  = { mutable houseappliances__content : houseappliances }
  
  function   houseappliances__ref_houseappliances__content__projection
    (a : houseappliances__ref) requires {  } ensures  {  } returns
    houseappliances = a.houseappliances__content
  
  meta model_projection function houseappliances__ref_houseappliances__content__projection
  
  meta inline:no function houseappliances__ref_houseappliances__content__projection
  
  function   houseappliances__havoc (x : houseappliances__ref) requires {  }
    ensures  {  } returns unit

end

(* Module for axiomatizing the record theory associated to type "house" defined at house.ads:11, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module House__house__rep
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        House_heating__househeating
  use        House_exterior__houseexterior
  use        Clean_air__cleanair
  use        House_appliances__houseappliances
  
  type __split_fields  = { [name:heating]
                           [model_trace:.7081]rec__house__house__heating : House_heating__househeating.househeating;
                           [name:exterior]
                           [model_trace:.7087]rec__house__house__exterior : House_exterior__houseexterior.houseexterior;
                           [name:air]
                           [model_trace:.7092]rec__house__house__air : Clean_air__cleanair.cleanair;
                           [model_trace:.7097]
                           [name:appliances]rec__house__house__appliances : House_appliances__houseappliances.houseappliances;
                           rec__ext__ : _gnatprove_standard.Main.__private }
  
  function [name:heating] [model_trace:.7081] 
    __split_fields_rec__house__house__heating__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    House_heating__househeating.househeating = a.rec__house__house__heating
  
  meta model_projection function __split_fields_rec__house__house__heating__projection
  
  meta inline:no function __split_fields_rec__house__house__heating__projection
  
  function [name:exterior] [model_trace:.7087] 
    __split_fields_rec__house__house__exterior__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    House_exterior__houseexterior.houseexterior = a.rec__house__house__exterior
  
  meta model_projection function __split_fields_rec__house__house__exterior__projection
  
  meta inline:no function __split_fields_rec__house__house__exterior__projection
  
  function [name:air] [model_trace:.7092] 
    __split_fields_rec__house__house__air__projection (a : __split_fields)
    requires {  } ensures  {  } returns
    Clean_air__cleanair.cleanair = a.rec__house__house__air
  
  meta model_projection function __split_fields_rec__house__house__air__projection
  
  meta inline:no function __split_fields_rec__house__house__air__projection
  
  function [model_trace:.7097] [name:appliances] 
    __split_fields_rec__house__house__appliances__projection
    (a : __split_fields) requires {  } ensures  {  } returns
    House_appliances__houseappliances.houseappliances = a.rec__house__house__appliances
  
  meta model_projection function __split_fields_rec__house__house__appliances__projection
  
  meta inline:no function __split_fields_rec__house__house__appliances__projection
  
  function   __split_fields_rec__ext____5__projection (a : __split_fields)
    requires {  } ensures  {  } returns
    _gnatprove_standard.Main.__private = a.rec__ext__
  
  meta model_projection function __split_fields_rec__ext____5__projection
  
  meta inline:no function __split_fields_rec__ext____5__projection
  
  type __split_fields__ref  = { mutable __split_fields__content : __split_fields }
  
  function   __split_fields__ref___split_fields__content__5__projection
    (a : __split_fields__ref) requires {  } ensures  {  } returns
    __split_fields = a.__split_fields__content
  
  meta model_projection function __split_fields__ref___split_fields__content__5__projection
  
  meta inline:no function __split_fields__ref___split_fields__content__5__projection
  
  function   __split_fields__havoc (x : __split_fields__ref) requires {  }
    ensures  {  } returns unit
  
  type __rep  = { __split_fields : __split_fields; attr__tag : int }
  
  function   __rep___split_fields__5__projection (a : __rep) requires {  }
    ensures  {  } returns __split_fields = a.__split_fields
  
  meta model_projection function __rep___split_fields__5__projection
  
  meta inline:no function __rep___split_fields__5__projection
  
  function   __rep_attr__tag__5__projection (a : __rep) requires {  }
    ensures  {  } returns int = a.attr__tag
  
  meta model_projection function __rep_attr__tag__5__projection
  
  meta inline:no function __rep_attr__tag__5__projection
  
  function   to_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   of_base (a : __rep) requires { True } ensures  { True } returns
    __rep = a
  
  function   house__house__heating__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__house__house__heating_ (a : __rep) requires
    { (house__house__heating__pred a) } ensures 
    { (result = a.__split_fields.rec__house__house__heating) } returns
    House_heating__househeating.househeating
  
  function   house__house__exterior__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__house__house__exterior_ (a : __rep) requires
    { (house__house__exterior__pred a) } ensures 
    { (result = a.__split_fields.rec__house__house__exterior) } returns
    House_exterior__houseexterior.houseexterior
  
  function   house__house__air__pred (a : __rep) requires { True } ensures 
    { True } returns  = True
  
  function   rec__house__house__air_ (a : __rep) requires
    { (house__house__air__pred a) } ensures 
    { (result = a.__split_fields.rec__house__house__air) } returns
    Clean_air__cleanair.cleanair
  
  function   house__house__appliances__pred (a : __rep) requires { True }
    ensures  { True } returns  = True
  
  function   rec__house__house__appliances_ (a : __rep) requires
    { (house__house__appliances__pred a) } ensures 
    { (result = a.__split_fields.rec__house__house__appliances) } returns
    House_appliances__houseappliances.houseappliances
  
  function   bool_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns
    bool = (if
           ((House_heating__househeating.bool_eq
               a.__split_fields.rec__house__house__heating
               b.__split_fields.rec__house__house__heating) /\
              (House_exterior__houseexterior.bool_eq
                 a.__split_fields.rec__house__house__exterior
                 b.__split_fields.rec__house__house__exterior) /\
              (Clean_air__cleanair.bool_eq
                 a.__split_fields.rec__house__house__air
                 b.__split_fields.rec__house__house__air) /\
              (House_appliances__houseappliances.bool_eq
                 a.__split_fields.rec__house__house__appliances
                 b.__split_fields.rec__house__house__appliances))
           then True  else False)
  
  function   __dispatch_eq (a : __rep b : __rep) requires { True } ensures 
    { True } returns bool

end

(* Module for axiomatizing type "house" defined at house.ads:11, created in Gnat2Why.Types.Translate_Type *)
module House__house
  
  use export House__house__rep
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type house  = --pp_transparent_type_definition NOT IMPLEMENTED
  
  function   __tag () requires {  } ensures  {  } returns int
  
  function   value__size () requires {  } ensures  {  } returns int
  
  function   object__size () requires {  } ensures  {  } returns int
  
  function   alignment () requires {  } ensures  {  } returns int
  
  axiom value__size_axiom : ((value__size ) >= 0)
  
  axiom object__size_axiom : ((object__size ) >= 0)
  
  axiom alignment_axiom : ((alignment ) >= 0)
  
  function   house__house__heating__first__bit () requires {  } ensures  {  }
    returns int
  
  function   house__house__heating__last__bit () requires {  } ensures  {  }
    returns int
  
  function   house__house__heating__position () requires {  } ensures  {  }
    returns int
  
  axiom house__house__heating__first__bit_axiom : ((house__house__heating__first__bit
                                                      ) >= 0)
  
  axiom house__house__heating__last__bit_axiom : ((house__house__heating__last__bit
                                                     )
                                                    > (house__house__heating__first__bit
                                                         ))
  
  axiom house__house__heating__position_axiom : ((house__house__heating__position
                                                    ) >= 0)
  
  function   house__house__exterior__first__bit () requires {  } ensures 
    {  } returns int
  
  function   house__house__exterior__last__bit () requires {  } ensures  {  }
    returns int
  
  function   house__house__exterior__position () requires {  } ensures  {  }
    returns int
  
  axiom house__house__exterior__first__bit_axiom : ((house__house__exterior__first__bit
                                                       ) >= 0)
  
  axiom house__house__exterior__last__bit_axiom : ((house__house__exterior__last__bit
                                                      )
                                                     > (house__house__exterior__first__bit
                                                          ))
  
  axiom house__house__exterior__position_axiom : ((house__house__exterior__position
                                                     ) >= 0)
  
  function   house__house__air__first__bit () requires {  } ensures  {  }
    returns int
  
  function   house__house__air__last__bit () requires {  } ensures  {  }
    returns int
  
  function   house__house__air__position () requires {  } ensures  {  }
    returns int
  
  axiom house__house__air__first__bit_axiom : ((house__house__air__first__bit )
                                                 >= 0)
  
  axiom house__house__air__last__bit_axiom : ((house__house__air__last__bit )
                                                > (house__house__air__first__bit
                                                     ))
  
  axiom house__house__air__position_axiom : ((house__house__air__position )
                                               >= 0)
  
  function   house__house__appliances__first__bit () requires {  } ensures 
    {  } returns int
  
  function   house__house__appliances__last__bit () requires {  } ensures 
    {  } returns int
  
  function   house__house__appliances__position () requires {  } ensures 
    {  } returns int
  
  axiom house__house__appliances__first__bit_axiom : ((house__house__appliances__first__bit
                                                         ) >= 0)
  
  axiom house__house__appliances__last__bit_axiom : ((house__house__appliances__last__bit
                                                        )
                                                       > (house__house__appliances__first__bit
                                                            ))
  
  axiom house__house__appliances__position_axiom : ((house__house__appliances__position
                                                       ) >= 0)
  
  function   user_eq (a : house b : house) requires { True } ensures 
    { True } returns bool
  
  function   dummy () requires {  } ensures  {  } returns house
  
  type house__ref  = { mutable house__content : house }
  
  function   house__ref_house__content__projection (a : house__ref) requires
    {  } ensures  {  } returns house = a.house__content
  
  meta model_projection function house__ref_house__content__projection
  
  meta inline:no function house__ref_house__content__projection
  
  function   house__havoc (x : house__ref) requires {  } ensures  {  }
    returns unit

end

(* Module for defining a ref holding the value of variable "system" defined at main.adb:12, created in Gnat2Why.Decls.Translate_Variable *)
module Main__system
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        House__house
  
  val system__split_fields [model_projected] [model_trace:849]
  [name:system] [sloc:main.adb:12]: House__house.__split_fields
  
  function  [sloc:main.adb:12] system__attr__tag () requires {  } ensures 
    {  } returns int

end

(* Module for possibly declaring a logic function for "createheating" defined at house_heating.ads:30, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module House_heating__createheating
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        House_heating__househeating
  
  function   createheating (__void_param : unit) requires { True } ensures 
    { True } returns House_heating__househeating.househeating
  
  function   createheating__function_guard
    (([mlw:proxy_symbol]
    [introduced] temp___result_163) : House_heating__househeating.househeating
    __void_param : unit) requires { True } ensures  { True } returns bool
  
  scope Dispatch function   createheating
                   (attr__tag : int __void_param : unit) requires { True }
                   ensures  { True } returns
                   House_heating__househeating.househeating
    function   createheating__function_guard
      (([mlw:proxy_symbol]
      [introduced] temp___result_163) : House_heating__househeating.househeating
      attr__tag : int __void_param : unit) requires { True } ensures 
      { True } returns bool end

end

(* Module for possibly declaring a logic function for "createexteriors" defined at house_exterior.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module House_exterior__createexteriors
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        House_exterior__houseexterior
  
  function   createexteriors (__void_param : unit) requires { True } ensures 
    { True } returns House_exterior__houseexterior.houseexterior
  
  function   createexteriors__function_guard
    (([mlw:proxy_symbol]
    [introduced] temp___result_164) : House_exterior__houseexterior.houseexterior
    __void_param : unit) requires { True } ensures  { True } returns bool
  
  scope Dispatch function   createexteriors
                   (attr__tag : int __void_param : unit) requires { True }
                   ensures  { True } returns
                   House_exterior__houseexterior.houseexterior
    function   createexteriors__function_guard
      (([mlw:proxy_symbol]
      [introduced] temp___result_164) : House_exterior__houseexterior.houseexterior
      attr__tag : int __void_param : unit) requires { True } ensures 
      { True } returns bool end

end

(* Module for possibly declaring a logic function for "createaircon" defined at clean_air.ads:26, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Clean_air__createaircon
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Clean_air__cleanair
  
  function   createaircon (__void_param : unit) requires { True } ensures 
    { True } returns Clean_air__cleanair.cleanair
  
  function   createaircon__function_guard
    (([mlw:proxy_symbol]
    [introduced] temp___result_165) : Clean_air__cleanair.cleanair
    __void_param : unit) requires { True } ensures  { True } returns bool
  
  scope Dispatch function   createaircon
                   (attr__tag : int __void_param : unit) requires { True }
                   ensures  { True } returns Clean_air__cleanair.cleanair
    function   createaircon__function_guard
      (([mlw:proxy_symbol]
      [introduced] temp___result_165) : Clean_air__cleanair.cleanair
      attr__tag : int __void_param : unit) requires { True } ensures 
      { True } returns bool end

end

(* Module for possibly declaring a logic function for "createfridge" defined at house_appliances.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module House_appliances__createfridge
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        House_appliances__houseappliances
  
  function   createfridge (__void_param : unit) requires { True } ensures 
    { True } returns House_appliances__houseappliances.houseappliances
  
  function   createfridge__function_guard
    (([mlw:proxy_symbol]
    [introduced] temp___result_166) : House_appliances__houseappliances.houseappliances
    __void_param : unit) requires { True } ensures  { True } returns bool
  
  scope Dispatch function   createfridge
                   (attr__tag : int __void_param : unit) requires { True }
                   ensures  { True } returns
                   House_appliances__houseappliances.houseappliances
    function   createfridge__function_guard
      (([mlw:proxy_symbol]
      [introduced] temp___result_166) : House_appliances__houseappliances.houseappliances
      attr__tag : int __void_param : unit) requires { True } ensures 
      { True } returns bool end

end

(* Module giving axioms for type "house" defined at house.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module House__house___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        House_heating__househeating
  use        House_heating__createheating
  use        House_exterior__houseexterior
  use        House_exterior__createexteriors
  use        Clean_air__cleanair
  use        Clean_air__createaircon
  use        House_appliances__houseappliances
  use        House_appliances__createfridge
  use        House__house
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_288) : House__house.house
    ([mlw:proxy_symbol] [introduced] temp___is_init_284) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_285) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_286) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_287) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_289) : House__house.house
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_290) : bool)
    requires { True } ensures  { True } returns
     = (((House__house.attr__tag ([mlw:proxy_symbol]
            [introduced] temp___expr_289)) = House__house.__tag) /\
          ((if
           (House__house.house__house__heating__pred ([mlw:proxy_symbol]
              [introduced] temp___expr_289))
           then
           (([mlw:proxy_symbol]
              [introduced] temp___expr_289).House__house.__split_fields.House__house.rec__house__house__heating
              = --pp_record_update NOT IMPLEMENTED)
           ) /\
             (if
             (House__house.house__house__exterior__pred ([mlw:proxy_symbol]
                [introduced] temp___expr_289))
             then
             (([mlw:proxy_symbol]
                [introduced] temp___expr_289).House__house.__split_fields.House__house.rec__house__house__exterior
                = --pp_record_update NOT IMPLEMENTED)
             ) /\
             (if
             (House__house.house__house__air__pred ([mlw:proxy_symbol]
                [introduced] temp___expr_289))
             then
             (([mlw:proxy_symbol]
                [introduced] temp___expr_289).House__house.__split_fields.House__house.rec__house__house__air
                = --pp_record_update NOT IMPLEMENTED)
             ) /\
             (if
             (House__house.house__house__appliances__pred ([mlw:proxy_symbol]
                [introduced] temp___expr_289))
             then
             (([mlw:proxy_symbol]
                [introduced] temp___expr_289).House__house.__split_fields.House__house.rec__house__house__appliances
                = --pp_record_update NOT IMPLEMENTED)
             )))

end

(* Module for defining a ref holding the value of variable "heating" defined at main.adb:15, created in Gnat2Why.Decls.Translate_Variable *)
module Main__print_status__heating
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        House_heating__househeating
  
  val heating__split_fields [name:heating] [model_trace:858]
  [model_projected] [sloc:main.adb:15]: House_heating__househeating.__split_fields
  
  function  [sloc:main.adb:15] heating__attr__tag () requires {  } ensures 
    {  } returns int

end

(* Module giving axioms for type "househeating" defined at house_heating.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module House_heating__househeating___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        House_heating__househeating
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_214) : House_heating__househeating.househeating
    ([mlw:proxy_symbol] [introduced] temp___is_init_210) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_211) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_212) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_213) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_215) : House_heating__househeating.househeating
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_216) : bool)
    requires { True } ensures  { True } returns
     = ((House_heating__househeating.attr__tag ([mlw:proxy_symbol]
           [introduced] temp___expr_215)) = House_heating__househeating.__tag)

end

(* Module for defining a ref holding the value of variable "exterior" defined at main.adb:16, created in Gnat2Why.Decls.Translate_Variable *)
module Main__print_status__exterior
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        House_exterior__houseexterior
  
  val exterior__split_fields [name:exterior] [model_projected]
  [model_trace:865] [sloc:main.adb:16]: House_exterior__houseexterior.__split_fields
  
  function  [sloc:main.adb:16] exterior__attr__tag () requires {  } ensures 
    {  } returns int

end

(* Module giving axioms for type "houseexterior" defined at house_exterior.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module House_exterior__houseexterior___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        House_exterior__houseexterior
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_230) : House_exterior__houseexterior.houseexterior
    ([mlw:proxy_symbol] [introduced] temp___is_init_226) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_227) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_228) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_229) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_231) : House_exterior__houseexterior.houseexterior
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_232) : bool)
    requires { True } ensures  { True } returns
     = ((House_exterior__houseexterior.attr__tag ([mlw:proxy_symbol]
           [introduced] temp___expr_231))
          = House_exterior__houseexterior.__tag)

end

(* Module for defining a ref holding the value of variable "air" defined at main.adb:17, created in Gnat2Why.Decls.Translate_Variable *)
module Main__print_status__air
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Clean_air__cleanair
  
  val air__split_fields [name:air] [model_projected]
  [model_trace:871] [sloc:main.adb:17]: Clean_air__cleanair.__split_fields
  
  function  [sloc:main.adb:17] air__attr__tag () requires {  } ensures  {  }
    returns int

end

(* Module giving axioms for type "cleanair" defined at clean_air.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Clean_air__cleanair___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Clean_air__cleanair
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_252) : Clean_air__cleanair.cleanair
    ([mlw:proxy_symbol] [introduced] temp___is_init_248) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_249) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_250) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_251) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_253) : Clean_air__cleanair.cleanair
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_254) : bool)
    requires { True } ensures  { True } returns
     = ((Clean_air__cleanair.attr__tag ([mlw:proxy_symbol]
           [introduced] temp___expr_253)) = Clean_air__cleanair.__tag)

end

(* Module for defining a ref holding the value of variable "appliances" defined at main.adb:18, created in Gnat2Why.Decls.Translate_Variable *)
module Main__print_status__appliances
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        House_appliances__houseappliances
  
  val appliances__split_fields [name:appliances] [model_projected]
  [model_trace:877] [sloc:main.adb:18]: House_appliances__houseappliances.__split_fields
  
  function  [sloc:main.adb:18] appliances__attr__tag () requires {  }
    ensures  {  } returns int

end

(* Module giving axioms for type "houseappliances" defined at house_appliances.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module House_appliances__houseappliances___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        House_appliances__houseappliances
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_275) : House_appliances__houseappliances.houseappliances
    ([mlw:proxy_symbol] [introduced] temp___is_init_271) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_272) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_273) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_274) : bool) requires
    { True } ensures  { True } returns  = True
  
  function   default_initial_assumption
    (([mlw:proxy_symbol]
    [introduced] temp___expr_276) : House_appliances__houseappliances.houseappliances
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_277) : bool)
    requires { True } ensures  { True } returns
     = ((House_appliances__houseappliances.attr__tag ([mlw:proxy_symbol]
           [introduced] temp___expr_276))
          = House_appliances__houseappliances.__tag)

end

(* Module for possibly declaring a logic function for "line_length" defined at a-textio.ads:243, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__line_length__2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  
  function   line_length
    (Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns int
  
  function   line_length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_161) : int
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns bool

end

(* Module for possibly declaring a logic function for "page_length" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__page_length__2
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  
  function   page_length
    (Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns int
  
  function   page_length__function_guard
    (([mlw:proxy_symbol] [introduced] temp___result_162) : int
    Ada___ada__text_io__current_err___current_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__file_system___file_system___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_in___standard_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_out___standard_out___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__standard_err___standard_err___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_in___current_in___ : _gnatprove_standard.Main.__private
    Ada___ada__text_io__current_out___current_out___ : _gnatprove_standard.Main.__private)
    requires { True } ensures  { True } returns bool

end

(* Module declaring the external object "ada___ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_err
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_err  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__file_system
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val file_system  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_in
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_in  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_out
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_out  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_err
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val standard_err  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_in
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_in  : _gnatprove_standard.Main.__private

end

(* Module declaring the external object "ada___ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_out
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val current_out  : _gnatprove_standard.Main.__private

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at a-textio.ads:463, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__put__4___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Standard__string
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  
  function   put (item : Standard__string.string__) requires { True }
    ensures 
    { (([GP_Pretty_Ada:3064] (--pp_tagged NOT IMPLEMENTED
                                = (Ada___ada__text_io__line_length__2.line_length
                                     !Ada___ada__text_io__current_err.current_err
                                     !Ada___ada__text_io__file_system.file_system
                                     !Ada___ada__text_io__standard_in.standard_in
                                     !Ada___ada__text_io__standard_out.standard_out
                                     !Ada___ada__text_io__standard_err.standard_err
                                     !Ada___ada__text_io__current_in.current_in
                                     !Ada___ada__text_io__current_out.current_out)))
         /\
         ([GP_Pretty_Ada:3070] (--pp_tagged NOT IMPLEMENTED
                                  = (Ada___ada__text_io__page_length__2.page_length
                                       !Ada___ada__text_io__current_err.current_err
                                       !Ada___ada__text_io__file_system.file_system
                                       !Ada___ada__text_io__standard_in.standard_in
                                       !Ada___ada__text_io__standard_out.standard_out
                                       !Ada___ada__text_io__standard_err.standard_err
                                       !Ada___ada__text_io__current_in.current_in
                                       !Ada___ada__text_io__current_out.current_out)))) }
    returns unit

end

(* Module for declaring a program function (and possibly an axiom) for "put_line" defined at a-textio.ads:506, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__put_line__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Standard__string
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  
  function   put_line (item : Standard__string.string__) requires { True }
    ensures 
    { (([GP_Pretty_Ada:3286] (--pp_tagged NOT IMPLEMENTED
                                = (Ada___ada__text_io__line_length__2.line_length
                                     !Ada___ada__text_io__current_err.current_err
                                     !Ada___ada__text_io__file_system.file_system
                                     !Ada___ada__text_io__standard_in.standard_in
                                     !Ada___ada__text_io__standard_out.standard_out
                                     !Ada___ada__text_io__standard_err.standard_err
                                     !Ada___ada__text_io__current_in.current_in
                                     !Ada___ada__text_io__current_out.current_out)))
         /\
         ([GP_Pretty_Ada:3292] (--pp_tagged NOT IMPLEMENTED
                                  = (Ada___ada__text_io__page_length__2.page_length
                                       !Ada___ada__text_io__current_err.current_err
                                       !Ada___ada__text_io__file_system.file_system
                                       !Ada___ada__text_io__standard_in.standard_in
                                       !Ada___ada__text_io__standard_out.standard_out
                                       !Ada___ada__text_io__standard_err.standard_err
                                       !Ada___ada__text_io__current_in.current_in
                                       !Ada___ada__text_io__current_out.current_out)))) }
    returns unit

end

(* Module for defining a value for string literal  defined at main.adb:22, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_365
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_365 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_365__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:23, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_367
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_367 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_367__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:24, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_369
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_369 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_369__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:25, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_371
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_371 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_371__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:25, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_372
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_372 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_372__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:26, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_377
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_377 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_377__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:27, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_380
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_380 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_380__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:28, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_383
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_383 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_383__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:29, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_386
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_386 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_386__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:30, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_389
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_389 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_389__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:30, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_390
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_390 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_390__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:31, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_395
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_395 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_395__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for defining a value for string literal  defined at main.adb:32, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_398
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  use        Standard__character__rep
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  
  function   temp___String_Literal_398 (__void_param : unit) requires
    { True } ensures  { True } returns Array__Int__Standard__character.map
  
  axiom temp___String_Literal_398__def_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__positive
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_53) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_49) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_50) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_51) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_52) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_49) = True) \/
          (Standard__positive.first <= Standard__positive.last))
       then
       (Standard__positive.dynamic_property Standard__positive.first
          Standard__positive.last ([mlw:proxy_symbol]
          [introduced] temp___expr_53))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_54) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_55) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__character
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_81) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_77) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_78) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_79) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_80) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_77) = True) \/
          (Standard__character.first <= Standard__character.last))
       then
       (Standard__character.dynamic_property Standard__character.first
          Standard__character.last ([mlw:proxy_symbol]
          [introduced] temp___expr_81))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_82) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_83) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Standard__positive
  use        Standard__string
  
  function   dynamic_invariant
    (([mlw:proxy_symbol]
    [introduced] temp___expr_103) : Standard__string.string__
    ([mlw:proxy_symbol] [introduced] temp___is_init_99) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_101) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_102) : bool) requires
    { True } ensures  { True } returns
     = (if ([mlw:proxy_symbol] [introduced] temp___skip_constant_100) then
       True  else
       (Standard__string.dynamic_property Standard__positive.first
          Standard__positive.last
          (Standard__string.first ([mlw:proxy_symbol]
             [introduced] temp___expr_103))
          (Standard__string.last ([mlw:proxy_symbol]
             [introduced] temp___expr_103))))

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving an empty axiom for the entity "system" defined at main.adb:12, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__system___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "heating" defined at main.adb:15, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__print_status__heating___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "exterior" defined at main.adb:16, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__print_status__exterior___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "air" defined at main.adb:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__print_status__air___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module giving an empty axiom for the entity "appliances" defined at main.adb:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__print_status__appliances___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for axiomatizing type "count" defined at a-textio.ads:78, created in Gnat2Why.Types.Translate_Type *)
module Ada___ada__text_io__count
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type count  = <range 0 2147483647>
  
  function   first () requires { True } ensures  { True } returns int = 0
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = count,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type count__ref  = { mutable count__content : count }
  
  function   count__ref_count__content__projection (a : count__ref) requires
    {  } ensures  {  } returns count = a.count__content
  
  meta model_projection function count__ref_count__content__projection
  
  meta inline:no function count__ref_count__content__projection
  
  function   count__havoc (x : count__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "count" defined at a-textio.ads:78, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada___ada__text_io__count___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Ada___ada__text_io__count
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_172) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_168) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_169) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_170) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_171) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_168) = True) \/
          (Ada___ada__text_io__count.first <= Ada___ada__text_io__count.last))
       then
       (Ada___ada__text_io__count.dynamic_property
          Ada___ada__text_io__count.first Ada___ada__text_io__count.last
          ([mlw:proxy_symbol] [introduced] temp___expr_172))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_173) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_174) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "line_length" defined at a-textio.ads:243, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__line_length__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Ada___ada__text_io__line_length__2
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  
  function   line_length (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ada___ada__text_io__line_length__2.line_length
               !Ada___ada__text_io__current_err.current_err
               !Ada___ada__text_io__file_system.file_system
               !Ada___ada__text_io__standard_in.standard_in
               !Ada___ada__text_io__standard_out.standard_out
               !Ada___ada__text_io__standard_err.standard_err
               !Ada___ada__text_io__current_in.current_in
               !Ada___ada__text_io__current_out.current_out)) /\ True /\
         (Ada___ada__text_io__count___axiom.dynamic_invariant result True
            False True True)) } returns int
  
  axiom line_length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for declaring a program function (and possibly an axiom) for "page_length" defined at a-textio.ads:249, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__page_length__2___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        _gnatprove_standard.Main
  use        Ada___ada__text_io__page_length__2
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  use        Ada___ada__text_io__current_err
  use        Ada___ada__text_io__file_system
  use        Ada___ada__text_io__standard_in
  use        Ada___ada__text_io__standard_out
  use        Ada___ada__text_io__standard_err
  use        Ada___ada__text_io__current_in
  use        Ada___ada__text_io__current_out
  
  function   page_length (__void_param : unit) requires { True } ensures 
    { ((result
          = (Ada___ada__text_io__page_length__2.page_length
               !Ada___ada__text_io__current_err.current_err
               !Ada___ada__text_io__file_system.file_system
               !Ada___ada__text_io__standard_in.standard_in
               !Ada___ada__text_io__standard_out.standard_out
               !Ada___ada__text_io__standard_err.standard_err
               !Ada___ada__text_io__current_in.current_in
               !Ada___ada__text_io__current_out.current_out)) /\ True /\
         (Ada___ada__text_io__count___axiom.dynamic_invariant result True
            False True True)) } returns int
  
  axiom page_length__post_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "heatingstatus" defined at house_heating.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module House_heating__heatingstatus___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        House_heating__heatingstatus
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_207) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_203) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_204) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_205) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_206) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_203) = True) \/
          (House_heating__heatingstatus.first
             <= House_heating__heatingstatus.last))
       then
       (House_heating__heatingstatus.dynamic_property
          House_heating__heatingstatus.first
          House_heating__heatingstatus.last ([mlw:proxy_symbol]
          [introduced] temp___expr_207))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_208) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_209) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "temperature" defined at house_heating.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module House_heating__temperature___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        House_heating__temperature
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_200) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_196) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_197) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_198) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_199) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_196) = True) \/
          (House_heating__temperature.first
             <= House_heating__temperature.last))
       then
       (House_heating__temperature.dynamic_property
          House_heating__temperature.first House_heating__temperature.last
          ([mlw:proxy_symbol] [introduced] temp___expr_200))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_201) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_202) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "createheating" defined at house_heating.ads:30, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module House_heating__createheating___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        House_heating__househeating
  use        House_heating__createheating
  use        House_heating__househeating___axiom
  
  function   createheating (__void_param : unit) requires { True } ensures 
    { ((result = (House_heating__createheating.createheating ())) /\
         (House_heating__createheating.createheating__function_guard result
            ()) /\
         (House_heating__househeating___axiom.dynamic_invariant result True
            False True True)) } returns
    House_heating__househeating.househeating
  
  scope Dispatch function   createheating
                   (attr__tag : int __void_param : unit) requires { True }
                   ensures 
                   { ((result
                         = (House_heating__createheating.Dispatch.createheating
                              attr__tag ())) /\
                        (House_heating__createheating.Dispatch.createheating__function_guard
                           result attr__tag ()) /\
                        (House_heating__househeating___axiom.dynamic_invariant
                           result True False True True)) } returns
                   House_heating__househeating.househeating end
  
  axiom createheating__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom createheating__post__dispatch_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom house_heating__househeating__compat_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "exteriorstatus" defined at house_exterior.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module House_exterior__exteriorstatus___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        House_exterior__exteriorstatus
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_223) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_219) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_220) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_221) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_222) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_219) = True) \/
          (House_exterior__exteriorstatus.first
             <= House_exterior__exteriorstatus.last))
       then
       (House_exterior__exteriorstatus.dynamic_property
          House_exterior__exteriorstatus.first
          House_exterior__exteriorstatus.last ([mlw:proxy_symbol]
          [introduced] temp___expr_223))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_224) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_225) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "createexteriors" defined at house_exterior.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module House_exterior__createexteriors___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        House_exterior__houseexterior
  use        House_exterior__createexteriors
  use        House_exterior__houseexterior___axiom
  
  function   createexteriors (__void_param : unit) requires { True } ensures 
    { ((result = (House_exterior__createexteriors.createexteriors ())) /\
         (House_exterior__createexteriors.createexteriors__function_guard
            result ()) /\
         (House_exterior__houseexterior___axiom.dynamic_invariant result True
            False True True)) } returns
    House_exterior__houseexterior.houseexterior
  
  scope Dispatch function   createexteriors
                   (attr__tag : int __void_param : unit) requires { True }
                   ensures 
                   { ((result
                         = (House_exterior__createexteriors.Dispatch.createexteriors
                              attr__tag ())) /\
                        (House_exterior__createexteriors.Dispatch.createexteriors__function_guard
                           result attr__tag ()) /\
                        (House_exterior__houseexterior___axiom.dynamic_invariant
                           result True False True True)) } returns
                   House_exterior__houseexterior.houseexterior end
  
  axiom createexteriors__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom createexteriors__post__dispatch_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom house_exterior__houseexterior__compat_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "carbon" defined at clean_air.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Clean_air__carbon___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Clean_air__carbon
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_238) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_234) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_235) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_236) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_237) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_234) = True) \/
          (Clean_air__carbon.first <= Clean_air__carbon.last))
       then
       (Clean_air__carbon.dynamic_property Clean_air__carbon.first
          Clean_air__carbon.last ([mlw:proxy_symbol]
          [introduced] temp___expr_238))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_239) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_240) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "aircon" defined at clean_air.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Clean_air__aircon___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Clean_air__aircon
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_245) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_241) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_242) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_243) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_244) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_241) = True) \/
          (Clean_air__aircon.first <= Clean_air__aircon.last))
       then
       (Clean_air__aircon.dynamic_property Clean_air__aircon.first
          Clean_air__aircon.last ([mlw:proxy_symbol]
          [introduced] temp___expr_245))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_246) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_247) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "createaircon" defined at clean_air.ads:26, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Clean_air__createaircon___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        Clean_air__cleanair
  use        Clean_air__createaircon
  use        Clean_air__cleanair___axiom
  
  function   createaircon (__void_param : unit) requires { True } ensures 
    { ((result = (Clean_air__createaircon.createaircon ())) /\
         (Clean_air__createaircon.createaircon__function_guard result ()) /\
         (Clean_air__cleanair___axiom.dynamic_invariant result True False
            True True)) } returns Clean_air__cleanair.cleanair
  
  scope Dispatch function   createaircon
                   (attr__tag : int __void_param : unit) requires { True }
                   ensures 
                   { ((result
                         = (Clean_air__createaircon.Dispatch.createaircon
                              attr__tag ())) /\
                        (Clean_air__createaircon.Dispatch.createaircon__function_guard
                           result attr__tag ()) /\
                        (Clean_air__cleanair___axiom.dynamic_invariant result
                           True False True True)) } returns
                   Clean_air__cleanair.cleanair end
  
  axiom createaircon__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom createaircon__post__dispatch_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom clean_air__cleanair__compat_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module giving axioms for type "unlocked" defined at house_appliances.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module House_appliances__unlocked___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        House_appliances__unlocked
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_261) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_257) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_258) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_259) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_260) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_257) = True) \/
          (House_appliances__unlocked.first
             <= House_appliances__unlocked.last))
       then
       (House_appliances__unlocked.dynamic_property
          House_appliances__unlocked.first House_appliances__unlocked.last
          ([mlw:proxy_symbol] [introduced] temp___expr_261))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_262) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_263) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module giving axioms for type "locked" defined at house_appliances.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module House_appliances__locked___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        House_appliances__locked
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_268) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_264) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_265) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_266) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_267) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_264) = True) \/
          (House_appliances__locked.first <= House_appliances__locked.last))
       then
       (House_appliances__locked.dynamic_property
          House_appliances__locked.first House_appliances__locked.last
          ([mlw:proxy_symbol] [introduced] temp___expr_268))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_269) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_270) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for declaring a program function (and possibly an axiom) for "createfridge" defined at house_appliances.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module House_appliances__createfridge___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use        House_appliances__houseappliances
  use        House_appliances__createfridge
  use        House_appliances__houseappliances___axiom
  
  function   createfridge (__void_param : unit) requires { True } ensures 
    { ((result = (House_appliances__createfridge.createfridge ())) /\
         (House_appliances__createfridge.createfridge__function_guard result
            ()) /\
         (House_appliances__houseappliances___axiom.dynamic_invariant result
            True False True True)) } returns
    House_appliances__houseappliances.houseappliances
  
  scope Dispatch function   createfridge
                   (attr__tag : int __void_param : unit) requires { True }
                   ensures 
                   { ((result
                         = (House_appliances__createfridge.Dispatch.createfridge
                              attr__tag ())) /\
                        (House_appliances__createfridge.Dispatch.createfridge__function_guard
                           result attr__tag ()) /\
                        (House_appliances__houseappliances___axiom.dynamic_invariant
                           result True False True True)) } returns
                   House_appliances__houseappliances.houseappliances end
  
  axiom createfridge__post_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom createfridge__post__dispatch_axiom : --pp_universal_quantif NOT IMPLEMENTED
  
  axiom house_appliances__houseappliances__compat_axiom : --pp_universal_quantif NOT IMPLEMENTED

end

(* Module for checking contracts and absence of run-time errors in subprogram "print_status" defined at main.adb:14, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__print_status__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        _gnatprove_standard.Integer
  use        Standard_String__Img
  use        Standard__positive
  use        Array__Int__Standard__character__Concat
  use        Standard__string
  use        House_heating__househeating
  use        House_exterior__houseexterior
  use        Clean_air__cleanair
  use        House_appliances__houseappliances
  use        Main__system
  use        House__house
  use        House__house___axiom
  use        Main__print_status__heating
  use        House_heating__househeating___axiom
  use        Main__print_status__exterior
  use        House_exterior__houseexterior___axiom
  use        Main__print_status__air
  use        Clean_air__cleanair___axiom
  use        Main__print_status__appliances
  use        House_appliances__houseappliances___axiom
  use        Ada___ada__text_io__put__4___axiom
  use        Ada___ada__text_io__put_line__2___axiom
  use        House_heating__temperature
  use        House_heating__temperature__rep
  use        House_heating__heatingstatus
  use        House_heating__heatingstatus__rep
  use        House_exterior__exteriorstatus
  use        House_exterior__exteriorstatus__rep
  use        Clean_air__carbon
  use        Clean_air__carbon__rep
  use        Clean_air__aircon
  use        Clean_air__aircon__rep
  use        House_appliances__unlocked
  use        House_appliances__unlocked__rep
  use        House_appliances__locked
  use        House_appliances__locked__rep
  use        Temp___String_Literal_365
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_367
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_369
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_371
  use        Array__Int__Standard__character
  use        Temp___String_Literal_372
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_377
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_380
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_383
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_386
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_389
  use        Array__Int__Standard__character
  use        Temp___String_Literal_390
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_395
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Temp___String_Literal_398
  use        Array__Int__Standard__character
  use        Array__Int__Standard__character
  use        Standard__positive___axiom
  use        Standard__character___axiom
  use        Standard__string___axiom
  use        Standard__integer___axiom
  use        Main__system___axiom
  use        Main__print_status__heating___axiom
  use        Main__print_status__exterior___axiom
  use        Main__print_status__air___axiom
  use        Main__print_status__appliances___axiom
  use        Ada___ada__text_io__count___axiom
  use        Ada___ada__text_io__line_length__2___axiom
  use        Ada___ada__text_io__page_length__2___axiom
  use        Ada___ada__text_io__put__4___axiom
  use        Ada___ada__text_io__put_line__2___axiom
  use        House__house___axiom
  use        House_heating__heatingstatus___axiom
  use        House_heating__temperature___axiom
  use        House_heating__househeating___axiom
  use        House_heating__createheating___axiom
  use        House_exterior__exteriorstatus___axiom
  use        House_exterior__houseexterior___axiom
  use        House_exterior__createexteriors___axiom
  use        Clean_air__carbon___axiom
  use        Clean_air__aircon___axiom
  use        Clean_air__cleanair___axiom
  use        Clean_air__createaircon___axiom
  use        House_appliances__unlocked___axiom
  use        House_appliances__locked___axiom
  use        House_appliances__houseappliances___axiom
  use        House_appliances__createfridge___axiom
  
  function [GP_Subp:main.adb:14] [sloc:main.adb:14] def (__void_param : unit)
    requires { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram main.adb:14 *);
        assume
        { (House__house___axiom.dynamic_invariant
             --pp_record_aggregate NOT IMPLEMENTED True False True True) };
        (* Assume moved pointers in outputs of the subprogram main.adb:14 *);
        (* Check for RTE in the Pre of the subprogram main.adb:14 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram main.adb:14 *);
        (try
        ();
          ([sloc:main.adb:15] ());
          ([sloc:main.adb:15] (let main__print_status__heating__assume =
          ( ( --pp_record_aggregate NOT IMPLEMENTED).House__house.__split_fields.House__house.rec__house__house__heating)
          in ( Main__print_status__heating.heating__split_fields :=
          main__print_status__heating__assume.House_heating__househeating.__split_fields);
          assume
          { (Main__print_status__heating.heating__attr__tag
               = House_heating__househeating.__tag) });
          assume
          { (House_heating__househeating___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED True False True True) });
          ([sloc:main.adb:16] ());
          ([sloc:main.adb:16] (let main__print_status__exterior__assume =
          ( ( --pp_record_aggregate NOT IMPLEMENTED).House__house.__split_fields.House__house.rec__house__house__exterior)
          in ( Main__print_status__exterior.exterior__split_fields :=
          main__print_status__exterior__assume.House_exterior__houseexterior.__split_fields);
          assume
          { (Main__print_status__exterior.exterior__attr__tag
               = House_exterior__houseexterior.__tag) });
          assume
          { (House_exterior__houseexterior___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED True False True True) });
          ([sloc:main.adb:17] ());
          ([sloc:main.adb:17] (let main__print_status__air__assume =
          ( ( --pp_record_aggregate NOT IMPLEMENTED).House__house.__split_fields.House__house.rec__house__house__air)
          in ( Main__print_status__air.air__split_fields :=
          main__print_status__air__assume.Clean_air__cleanair.__split_fields);
          assume
          { (Main__print_status__air.air__attr__tag
               = Clean_air__cleanair.__tag) });
          assume
          { (Clean_air__cleanair___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED True False True True) });
          ([sloc:main.adb:18] ());
          ([sloc:main.adb:18] (let main__print_status__appliances__assume =
          ( ( --pp_record_aggregate NOT IMPLEMENTED).House__house.__split_fields.House__house.rec__house__house__appliances)
          in ( Main__print_status__appliances.appliances__split_fields :=
          main__print_status__appliances__assume.House_appliances__houseappliances.__split_fields);
          assume
          { (Main__print_status__appliances.appliances__attr__tag
               = House_appliances__houseappliances.__tag) });
          assume
          { (House_appliances__houseappliances___axiom.dynamic_invariant
               --pp_record_aggregate NOT IMPLEMENTED True False True True) });
          ();
          ([GP_Sloc:main.adb:22:7] ([sloc:main.adb:22] ()));
          ([GP_Sloc:main.adb:22:7] ([sloc:main.adb:22] ( any
                                                          --pp_effects NOT IMPLEMENTED
                                                          pre {}
                                   post {} return unit);
          (Ada___ada__text_io__put__4___axiom.put (let ([mlw:proxy_symbol]
             [introduced] temp___366) =
             ( (Temp___String_Literal_365.temp___String_Literal_365 ())) in
             (Standard__string.of_array ([mlw:proxy_symbol]
                [introduced] temp___366) 1 4)));
          ()));
        ([GP_Sloc:main.adb:23:7] ([sloc:main.adb:23] ()));
        ([GP_Sloc:main.adb:23:7] ([sloc:main.adb:23] ( any
                                                        --pp_effects NOT IMPLEMENTED
                                                        pre {}
                                 post {} return unit);
        (Ada___ada__text_io__put_line__2___axiom.put_line
           (let ([mlw:proxy_symbol] [introduced] temp___368) =
           ( (Temp___String_Literal_367.temp___String_Literal_367 ())) in
           (Standard__string.of_array ([mlw:proxy_symbol]
              [introduced] temp___368) 1 54)));
        ()));
    ([GP_Sloc:main.adb:24:7] ([sloc:main.adb:24] ()));
    ([GP_Sloc:main.adb:24:7] ([sloc:main.adb:24] ( any
                                                    --pp_effects NOT IMPLEMENTED
                                                    pre {}
                             post {} return unit);
    (Ada___ada__text_io__put_line__2___axiom.put_line
       (let ([mlw:proxy_symbol] [introduced] temp___370) =
       ( (Temp___String_Literal_369.temp___String_Literal_369 ())) in
       (Standard__string.of_array ([mlw:proxy_symbol]
          [introduced] temp___370) 1 55)));
    ()));
  ([GP_Sloc:main.adb:25:7] ([sloc:main.adb:25] ()));
  ([GP_Sloc:main.adb:25:7] ([sloc:main.adb:25] ( any
                                                  --pp_effects NOT IMPLEMENTED
                                                  pre {}
                           post {} return unit);
  (Ada___ada__text_io__put_line__2___axiom.put_line (let ([mlw:proxy_symbol]
     [introduced] temp___376) =
     (Temp___String_Literal_371.temp___String_Literal_371 ()) in
     (let ([mlw:proxy_symbol] [introduced] temp___375) =
     (let ([mlw:proxy_symbol] [introduced] temp___374) =
       (Standard_String__Img.to_string
          (House_heating__temperature.attr__ATTRIBUTE_IMAGE
             (House_heating__temperature__rep.to_rep
                ( --pp_record_aggregate NOT IMPLEMENTED).House_heating__househeating.__split_fields.House_heating__househeating.rec__house_heating__househeating__temp))
          5) in (let ([mlw:proxy_symbol] [introduced] temp___373) =
       (Temp___String_Literal_372.temp___String_Literal_372 ()) in
       (Standard__string.of_array
          (Array__Int__Standard__character__Concat.concat ([mlw:proxy_symbol]
             [introduced] temp___373) 1 13
             (Standard__string.to_array ([mlw:proxy_symbol]
                [introduced] temp___374))
             (Standard__string.first ([mlw:proxy_symbol]
                [introduced] temp___374))
             (Standard__string.last ([mlw:proxy_symbol]
                [introduced] temp___374))) 1
          ([sloc:main.adb:25] ([GP_Shape:call_put_line__concat__concat]
                              [vc:annotation] [GP_Sloc:main.adb:25:32]
                              [comment:      Put_Line("Temperature: " & heating.temp'Image & "C, ");                                ^ main.adb:25:32:VC_RANGE_CHECK]
                              [GP_Reason:VC_RANGE_CHECK]
                              [GP_Id:1] (Standard__positive.range_check_
                                           ((1
                                               + ((_gnatprove_standard.Integer.length
                                                     1 13)
                                                    + (_gnatprove_standard.Integer.length
                                                         (Standard__string.first
                                                            ([mlw:proxy_symbol]
                                                            [introduced] temp___374))
                                                         (Standard__string.last
                                                            ([mlw:proxy_symbol]
                                                            [introduced] temp___374)))))
                                              - 1))))))) in
     (if
     ((Standard__string.length ([mlw:proxy_symbol] [introduced] temp___375))
        = 0)
     then
     (Standard__string.of_array ([mlw:proxy_symbol] [introduced] temp___376)
        1 3)
      else
     (Standard__string.of_array
        (Array__Int__Standard__character__Concat.concat
           (Standard__string.to_array ([mlw:proxy_symbol]
              [introduced] temp___375))
           (Standard__string.first ([mlw:proxy_symbol]
              [introduced] temp___375))
           (Standard__string.last ([mlw:proxy_symbol]
              [introduced] temp___375)) ([mlw:proxy_symbol]
           [introduced] temp___376) 1 3)
        (Standard__string.first ([mlw:proxy_symbol] [introduced] temp___375))
        ([sloc:main.adb:25] ([comment:      Put_Line("Temperature: " & heating.temp'Image & "C, ");                                                     ^ main.adb:25:53:VC_RANGE_CHECK]
                            [vc:annotation] [GP_Reason:VC_RANGE_CHECK]
                            [GP_Id:2] [GP_Shape:call_put_line__concat]
                            [GP_Sloc:main.adb:25:53] (Standard__positive.range_check_
                                                        (((Standard__string.first
                                                             ([mlw:proxy_symbol]
                                                             [introduced] temp___375))
                                                            + ((_gnatprove_standard.Integer.length
                                                                  (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___375))
                                                                  (Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___375)))
                                                                 + (_gnatprove_standard.Integer.length
                                                                    1 3)))
                                                           - 1)))))))));
  ()));
([GP_Sloc:main.adb:26:7] ([sloc:main.adb:26] ()));
([GP_Sloc:main.adb:26:7] ([sloc:main.adb:26] ( any
                                                --pp_effects NOT IMPLEMENTED
                                                pre {}
                         post {} return unit);
(Ada___ada__text_io__put_line__2___axiom.put_line (let ([mlw:proxy_symbol]
   [introduced] temp___379) =
   (Standard_String__Img.to_string
      (House_heating__heatingstatus.attr__ATTRIBUTE_IMAGE
         (House_heating__heatingstatus__rep.to_rep
            ( --pp_record_aggregate NOT IMPLEMENTED).House_heating__househeating.__split_fields.House_heating__househeating.rec__house_heating__househeating__status))
      2040) in (let ([mlw:proxy_symbol] [introduced] temp___378) =
   (Temp___String_Literal_377.temp___String_Literal_377 ()) in
   (Standard__string.of_array
      (Array__Int__Standard__character__Concat.concat ([mlw:proxy_symbol]
         [introduced] temp___378) 1 15
         (Standard__string.to_array ([mlw:proxy_symbol]
            [introduced] temp___379))
         (Standard__string.first ([mlw:proxy_symbol] [introduced] temp___379))
         (Standard__string.last ([mlw:proxy_symbol] [introduced] temp___379)))
      1
      ([sloc:main.adb:26] ([vc:annotation]
                          [comment:      Put_Line("Heater Status: " &  heating.status'Image);                                  ^ main.adb:26:34:VC_RANGE_CHECK]
                          [GP_Reason:VC_RANGE_CHECK] [GP_Id:3]
                          [GP_Sloc:main.adb:26:34]
                          [GP_Shape:call_put_line__concat] (Standard__positive.range_check_
                                                              ((1
                                                                  + (
                                                                  (_gnatprove_standard.Integer.length
                                                                    1 15)
                                                                    + (
                                                                    _gnatprove_standard.Integer.length
                                                                    (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___379))
                                                                    (Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___379)))))
                                                                 - 1))))))));
()));
([GP_Sloc:main.adb:27:7] ([sloc:main.adb:27] ()));
([GP_Sloc:main.adb:27:7] ([sloc:main.adb:27] ( any
                                                --pp_effects NOT IMPLEMENTED
                                                pre {}
                         post {} return unit);
(Ada___ada__text_io__put_line__2___axiom.put_line (let ([mlw:proxy_symbol]
   [introduced] temp___382) =
   (Standard_String__Img.to_string
      (House_exterior__exteriorstatus.attr__ATTRIBUTE_IMAGE
         (House_exterior__exteriorstatus__rep.to_rep
            ( --pp_record_aggregate NOT IMPLEMENTED).House_exterior__houseexterior.__split_fields.House_exterior__houseexterior.rec__house_exterior__houseexterior__status))
      2040) in (let ([mlw:proxy_symbol] [introduced] temp___381) =
   (Temp___String_Literal_380.temp___String_Literal_380 ()) in
   (Standard__string.of_array
      (Array__Int__Standard__character__Concat.concat ([mlw:proxy_symbol]
         [introduced] temp___381) 1 34
         (Standard__string.to_array ([mlw:proxy_symbol]
            [introduced] temp___382))
         (Standard__string.first ([mlw:proxy_symbol] [introduced] temp___382))
         (Standard__string.last ([mlw:proxy_symbol] [introduced] temp___382)))
      1
      ([sloc:main.adb:27] ([comment:      Put_Line("Window and Exterior Doors Status: " & exterior.status'Image);                                                     ^ main.adb:27:53:VC_RANGE_CHECK]
                          [vc:annotation] [GP_Reason:VC_RANGE_CHECK]
                          [GP_Sloc:main.adb:27:53] [GP_Id:4]
                          [GP_Shape:call_put_line__concat] (Standard__positive.range_check_
                                                              ((1
                                                                  + (
                                                                  (_gnatprove_standard.Integer.length
                                                                    1 34)
                                                                    + (
                                                                    _gnatprove_standard.Integer.length
                                                                    (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___382))
                                                                    (Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___382)))))
                                                                 - 1))))))));
()));
([GP_Sloc:main.adb:28:7] ([sloc:main.adb:28] ()));
([GP_Sloc:main.adb:28:7] ([sloc:main.adb:28] ( any
                                                --pp_effects NOT IMPLEMENTED
                                                pre {}
                         post {} return unit);
(Ada___ada__text_io__put_line__2___axiom.put_line (let ([mlw:proxy_symbol]
   [introduced] temp___385) =
   (Standard_String__Img.to_string
      (House_appliances__unlocked.attr__ATTRIBUTE_IMAGE
         (House_appliances__unlocked__rep.to_rep
            ( --pp_record_aggregate NOT IMPLEMENTED).House_appliances__houseappliances.__split_fields.House_appliances__houseappliances.rec__house_appliances__houseappliances__statusunlocked))
      2040) in (let ([mlw:proxy_symbol] [introduced] temp___384) =
   (Temp___String_Literal_383.temp___String_Literal_383 ()) in
   (Standard__string.of_array
      (Array__Int__Standard__character__Concat.concat ([mlw:proxy_symbol]
         [introduced] temp___384) 1 20
         (Standard__string.to_array ([mlw:proxy_symbol]
            [introduced] temp___385))
         (Standard__string.first ([mlw:proxy_symbol] [introduced] temp___385))
         (Standard__string.last ([mlw:proxy_symbol] [introduced] temp___385)))
      1
      ([sloc:main.adb:28] ([vc:annotation] [GP_Reason:VC_RANGE_CHECK]
                          [GP_Sloc:main.adb:28:39]
                          [comment:      Put_Line("Unlocked Appliance: " & appliances.statusUnlocked'Image);                                       ^ main.adb:28:39:VC_RANGE_CHECK]
                          [GP_Id:5]
                          [GP_Shape:call_put_line__concat] (Standard__positive.range_check_
                                                              ((1
                                                                  + (
                                                                  (_gnatprove_standard.Integer.length
                                                                    1 20)
                                                                    + (
                                                                    _gnatprove_standard.Integer.length
                                                                    (Standard__string.first
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___385))
                                                                    (Standard__string.last
                                                                    ([mlw:proxy_symbol]
                                                                    [introduced] temp___385)))))
                                                                 - 1))))))));
()));
([GP_Sloc:main.adb:29:7] ([sloc:main.adb:29] ()));
([GP_Sloc:main.adb:29:7] ([sloc:main.adb:29] ( any
                                                --pp_effects NOT IMPLEMENTED
                                                pre {}
                         post {} return unit);
(Ada___ada__text_io__put_line__2___axiom.put_line (let ([mlw:proxy_symbol]
   [introduced] temp___388) =
   (Standard_String__Img.to_string
      (House_appliances__locked.attr__ATTRIBUTE_IMAGE
         (House_appliances__locked__rep.to_rep
            ( --pp_record_aggregate NOT IMPLEMENTED).House_appliances__houseappliances.__split_fields.House_appliances__houseappliances.rec__house_appliances__houseappliances__statuslocked))
      2040) in (let ([mlw:proxy_symbol] [introduced] temp___387) =
   (Temp___String_Literal_386.temp___String_Literal_386 ()) in
   (Standard__string.of_array
      (Array__Int__Standard__character__Concat.concat ([mlw:proxy_symbol]
         [introduced] temp___387) 1 18
         (Standard__string.to_array ([mlw:proxy_symbol]
            [introduced] temp___388))
         (Standard__string.first ([mlw:proxy_symbol] [introduced] temp___388))
         (Standard__string.last ([mlw:proxy_symbol] [introduced] temp___388)))
      1
      ([sloc:main.adb:29] ([comment:      Put_Line("Locked Appliance: " & appliances.statuslocked'Image);                                     ^ main.adb:29:37:VC_RANGE_CHECK]
                          [GP_Sloc:main.adb:29:37] [vc:annotation]
                          [GP_Reason:VC_RANGE_CHECK]
                          [GP_Shape:call_put_line__concat]
                          [GP_Id:6] (Standard__positive.range_check_
                                       ((1
                                           + ((_gnatprove_standard.Integer.length
                                                 1 18)
                                                + (_gnatprove_standard.Integer.length
                                                     (Standard__string.first
                                                        ([mlw:proxy_symbol]
                                                        [introduced] temp___388))
                                                     (Standard__string.last
                                                        ([mlw:proxy_symbol]
                                                        [introduced] temp___388)))))
                                          - 1))))))));
()));
([GP_Sloc:main.adb:30:7] ([sloc:main.adb:30] ()));
([GP_Sloc:main.adb:30:7] ([sloc:main.adb:30] ( any
                                                --pp_effects NOT IMPLEMENTED
                                                pre {}
                         post {} return unit);
(Ada___ada__text_io__put_line__2___axiom.put_line (let ([mlw:proxy_symbol]
   [introduced] temp___394) =
   (Temp___String_Literal_389.temp___String_Literal_389 ()) in
   (let ([mlw:proxy_symbol] [introduced] temp___393) =
   (let ([mlw:proxy_symbol] [introduced] temp___392) =
     (Standard_String__Img.to_string
        (Clean_air__carbon.attr__ATTRIBUTE_IMAGE
           (Clean_air__carbon__rep.to_rep
              ( --pp_record_aggregate NOT IMPLEMENTED).Clean_air__cleanair.__split_fields.Clean_air__cleanair.rec__clean_air__cleanair__carb))
        5) in (let ([mlw:proxy_symbol] [introduced] temp___391) =
     (Temp___String_Literal_390.temp___String_Literal_390 ()) in
     (Standard__string.of_array
        (Array__Int__Standard__character__Concat.concat ([mlw:proxy_symbol]
           [introduced] temp___391) 1 24
           (Standard__string.to_array ([mlw:proxy_symbol]
              [introduced] temp___392))
           (Standard__string.first ([mlw:proxy_symbol]
              [introduced] temp___392))
           (Standard__string.last ([mlw:proxy_symbol]
              [introduced] temp___392))) 1
        ([sloc:main.adb:30] ([GP_Shape:call_put_line__concat__concat]
                            [GP_Sloc:main.adb:30:43] [vc:annotation]
                            [comment:      Put_Line("Carbon Monoxide Levels: " & air.carb'Image & "PPM");                                           ^ main.adb:30:43:VC_RANGE_CHECK]
                            [GP_Reason:VC_RANGE_CHECK]
                            [GP_Id:7] (Standard__positive.range_check_
                                         ((1
                                             + ((_gnatprove_standard.Integer.length
                                                   1 24)
                                                  + (_gnatprove_standard.Integer.length
                                                       (Standard__string.first
                                                          ([mlw:proxy_symbol]
                                                          [introduced] temp___392))
                                                       (Standard__string.last
                                                          ([mlw:proxy_symbol]
                                                          [introduced] temp___392)))))
                                            - 1))))))) in
   (if
   ((Standard__string.length ([mlw:proxy_symbol] [introduced] temp___393))
      = 0)
   then
   (Standard__string.of_array ([mlw:proxy_symbol] [introduced] temp___394) 1
      3)
    else
   (Standard__string.of_array
      (Array__Int__Standard__character__Concat.concat
         (Standard__string.to_array ([mlw:proxy_symbol]
            [introduced] temp___393))
         (Standard__string.first ([mlw:proxy_symbol] [introduced] temp___393))
         (Standard__string.last ([mlw:proxy_symbol] [introduced] temp___393))
         ([mlw:proxy_symbol] [introduced] temp___394) 1 3)
      (Standard__string.first ([mlw:proxy_symbol] [introduced] temp___393))
      ([sloc:main.adb:30] ([vc:annotation] [GP_Sloc:main.adb:30:60]
                          [GP_Reason:VC_RANGE_CHECK]
                          [comment:      Put_Line("Carbon Monoxide Levels: " & air.carb'Image & "PPM");                                                            ^ main.adb:30:60:VC_RANGE_CHECK]
                          [GP_Shape:call_put_line__concat]
                          [GP_Id:8] (Standard__positive.range_check_
                                       (((Standard__string.first
                                            ([mlw:proxy_symbol]
                                            [introduced] temp___393))
                                           + ((_gnatprove_standard.Integer.length
                                                 (Standard__string.first
                                                    ([mlw:proxy_symbol]
                                                    [introduced] temp___393))
                                                 (Standard__string.last
                                                    ([mlw:proxy_symbol]
                                                    [introduced] temp___393)))
                                                + (_gnatprove_standard.Integer.length
                                                     1 3))) - 1)))))))));
()));
([GP_Sloc:main.adb:31:7] ([sloc:main.adb:31] ()));
([GP_Sloc:main.adb:31:7] ([sloc:main.adb:31] ( any
                                                --pp_effects NOT IMPLEMENTED
                                                pre {}
                         post {} return unit);
(Ada___ada__text_io__put_line__2___axiom.put_line (let ([mlw:proxy_symbol]
   [introduced] temp___397) =
   (Standard_String__Img.to_string
      (Clean_air__aircon.attr__ATTRIBUTE_IMAGE
         (Clean_air__aircon__rep.to_rep
            ( --pp_record_aggregate NOT IMPLEMENTED).Clean_air__cleanair.__split_fields.Clean_air__cleanair.rec__clean_air__cleanair__status))
      2040) in (let ([mlw:proxy_symbol] [introduced] temp___396) =
   (Temp___String_Literal_395.temp___String_Literal_395 ()) in
   (Standard__string.of_array
      (Array__Int__Standard__character__Concat.concat ([mlw:proxy_symbol]
         [introduced] temp___396) 1 15
         (Standard__string.to_array ([mlw:proxy_symbol]
            [introduced] temp___397))
         (Standard__string.first ([mlw:proxy_symbol] [introduced] temp___397))
         (Standard__string.last ([mlw:proxy_symbol] [introduced] temp___397)))
      1
      ([sloc:main.adb:31] ([comment:      Put_Line("Air Cleansing: " &  air.status'Image);                                  ^ main.adb:31:34:VC_RANGE_CHECK]
                          [vc:annotation] [GP_Reason:VC_RANGE_CHECK]
                          [GP_Sloc:main.adb:31:34]
                          [GP_Shape:call_put_line__concat]
                          [GP_Id:9] (Standard__positive.range_check_
                                       ((1
                                           + ((_gnatprove_standard.Integer.length
                                                 1 15)
                                                + (_gnatprove_standard.Integer.length
                                                     (Standard__string.first
                                                        ([mlw:proxy_symbol]
                                                        [introduced] temp___397))
                                                     (Standard__string.last
                                                        ([mlw:proxy_symbol]
                                                        [introduced] temp___397)))))
                                          - 1))))))));
()));
([GP_Sloc:main.adb:32:7] ([sloc:main.adb:32] ()));
([GP_Sloc:main.adb:32:7] ([sloc:main.adb:32] ( any
                                                --pp_effects NOT IMPLEMENTED
                                                pre {}
                         post {} return unit);
(Ada___ada__text_io__put_line__2___axiom.put_line (let ([mlw:proxy_symbol]
   [introduced] temp___399) =
   ( (Temp___String_Literal_398.temp___String_Literal_398 ())) in
   (Standard__string.of_array ([mlw:proxy_symbol] [introduced] temp___399) 1
      55)));
()));
([GP_Sloc:main.adb:35:7] ([sloc:main.adb:35] abstract ensures
                         { True } begin  (let _ = ( 1000000000) in ())  end));
raise Return__exc with | Return__exc  -> ());
abstract ensures
{ True } begin  (let _ = True in ())  end

end
